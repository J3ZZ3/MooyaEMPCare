{"file_contents":{"client/src/components/examples/WorkLogTable.tsx":{"content":"import WorkLogTable from '../WorkLogTable';\n\nexport default function WorkLogTableExample() {\n  const entries = [\n    {\n      labourerId: '1',\n      labourerName: 'Thabo Mthembu',\n      openMeters: 15.5,\n      closeMeters: 12.0,\n      openRate: 25,\n      closeRate: 20\n    },\n    {\n      labourerId: '2',\n      labourerName: 'Sipho Ndlovu',\n      openMeters: 18.0,\n      closeMeters: 15.5,\n      openRate: 25,\n      closeRate: 20\n    },\n    {\n      labourerId: '3',\n      labourerName: 'Mandla Khumalo',\n      openMeters: 14.0,\n      closeMeters: 11.0,\n      openRate: 25,\n      closeRate: 20\n    }\n  ];\n\n  const handleUpdate = (labourerId: string, field: string, value: number) => {\n    console.log('Updated:', labourerId, field, value);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Editable Work Log</h3>\n        <WorkLogTable entries={entries} editable onUpdate={handleUpdate} />\n      </div>\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Read-Only Work Log</h3>\n        <WorkLogTable entries={entries} />\n      </div>\n    </div>\n  );\n}","size_bytes":1126},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/examples/StatCard.tsx":{"content":"import StatCard from '../StatCard';\nimport { Users, Briefcase, DollarSign, Calendar } from 'lucide-react';\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-6\">\n      <StatCard title=\"Total Labourers\" value=\"127\" icon={Users} />\n      <StatCard title=\"Active Projects\" value=\"8\" icon={Briefcase} />\n      <StatCard title=\"Current Period Earnings\" value=\"R 45,230\" icon={DollarSign} subtitle=\"14 days\" />\n      <StatCard title=\"Next Payment\" value=\"3 days\" icon={Calendar} subtitle=\"Dec 15, 2025\" />\n    </div>\n  );\n}","size_bytes":597},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"attached_assets/vite.config_1761683200905.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: Error) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7427},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n}\n\n// Sets the ACL policy to the object metadata\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  return false;\n}","size_bytes":1748},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"attached_assets/postcss.config_1761683348007.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/employee-types.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Search, Plus, Edit, Trash2, Loader2 } from \"lucide-react\";\nimport { insertEmployeeTypeSchema } from \"@shared/schema\";\nimport type { User, EmployeeType } from \"@shared/schema\";\nimport type { z } from \"zod\";\n\ninterface EmployeeTypesPageProps {\n  user: User;\n}\n\ntype EmployeeTypeFormData = z.infer<typeof insertEmployeeTypeSchema>;\n\nexport default function EmployeeTypesPage({ user }: EmployeeTypesPageProps) {\n  // Check authorization - only super_admin and admin can access\n  const canManage = user.role === \"super_admin\" || user.role === \"admin\";\n\n  if (!canManage) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">\n              You don't have permission to access this page.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState<EmployeeType | null>(null);\n\n  const addForm = useForm<EmployeeTypeFormData>({\n    resolver: zodResolver(insertEmployeeTypeSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const editForm = useForm<EmployeeTypeFormData>({\n    resolver: zodResolver(insertEmployeeTypeSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const { data: employeeTypes, isLoading } = useQuery<EmployeeType[]>({\n    queryKey: [\"/api/employee-types\"],\n    enabled: canManage,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: EmployeeTypeFormData) => {\n      return apiRequest(\"POST\", \"/api/employee-types\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-types\"] });\n      toast({\n        title: \"Employee type created\",\n        description: \"The employee type has been created successfully.\",\n      });\n      setAddDialogOpen(false);\n      addForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create employee type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<EmployeeTypeFormData> }) => {\n      return apiRequest(\"PUT\", `/api/employee-types/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-types\"] });\n      toast({\n        title: \"Employee type updated\",\n        description: \"The employee type has been updated successfully.\",\n      });\n      setEditDialogOpen(false);\n      setSelectedType(null);\n      editForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update employee type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deactivateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/employee-types/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employee-types\"] });\n      toast({\n        title: \"Employee type deactivated\",\n        description: \"The employee type has been deactivated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to deactivate employee type\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTypes = employeeTypes?.filter((type) =>\n    type.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAdd = (data: EmployeeTypeFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const handleEdit = (data: EmployeeTypeFormData) => {\n    if (!selectedType) return;\n    updateMutation.mutate({\n      id: selectedType.id,\n      data,\n    });\n  };\n\n  const openEditDialog = (type: EmployeeType) => {\n    setSelectedType(type);\n    editForm.reset({\n      name: type.name,\n      description: type.description || \"\",\n      isActive: type.isActive,\n    });\n    setEditDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Employee Types</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage worker categories and roles\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            addForm.reset();\n            setAddDialogOpen(true);\n          }}\n          data-testid=\"button-add-employee-type\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Employee Type\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between gap-4\">\n            <CardTitle>All Employee Types ({filteredTypes?.length || 0})</CardTitle>\n            <div className=\"relative w-full max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search employee types...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-employee-types\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredTypes && filteredTypes.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredTypes.map((type) => (\n                  <TableRow key={type.id} data-testid={`row-employee-type-${type.id}`}>\n                    <TableCell className=\"font-medium\">{type.name}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {type.description || \"—\"}\n                    </TableCell>\n                    <TableCell>\n                      {type.isActive ? (\n                        <Badge variant=\"default\">Active</Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">Inactive</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => openEditDialog(type)}\n                          data-testid={`button-edit-${type.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        {type.isActive && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => deactivateMutation.mutate(type.id)}\n                            disabled={deactivateMutation.isPending}\n                            data-testid={`button-deactivate-${type.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              {searchQuery ? \"No employee types found matching your search.\" : \"No employee types created yet.\"}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Add Dialog */}\n      <Dialog open={addDialogOpen} onOpenChange={setAddDialogOpen}>\n        <DialogContent data-testid=\"dialog-add-employee-type\">\n          <DialogHeader>\n            <DialogTitle>Add Employee Type</DialogTitle>\n            <DialogDescription>\n              Create a new employee type category for workers.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...addForm}>\n            <form onSubmit={addForm.handleSubmit(handleAdd)} className=\"space-y-4\">\n              <FormField\n                control={addForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Trencher, Cable Layer\"\n                        {...field}\n                        data-testid=\"input-employee-type-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={addForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe the role and responsibilities...\"\n                        rows={3}\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-employee-type-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setAddDialogOpen(false)}\n                  data-testid=\"button-cancel-add\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-add\"\n                >\n                  {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-employee-type\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee Type</DialogTitle>\n            <DialogDescription>\n              Update the employee type details.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(handleEdit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Trencher, Cable Layer\"\n                        {...field}\n                        data-testid=\"input-edit-employee-type-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Describe the role and responsibilities...\"\n                        rows={3}\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-edit-employee-type-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditDialogOpen(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateMutation.isPending}\n                  data-testid=\"button-submit-edit\"\n                >\n                  {updateMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Save Changes\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14652},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"attached_assets/design_guidelines_1761683200899.md":{"content":"# Design Guidelines: Fibre Deployment Management Tool\n\n## Design Approach\n\n**Selected System:** Material Design 3  \n**Rationale:** This is a data-intensive enterprise application requiring excellent information hierarchy, robust form patterns, and responsive data tables. Material Design excels at organizing complex information while maintaining clarity and usability across devices - critical for field supervisors using mobile devices and office staff managing workflows.\n\n**Key Design Principles:**\n1. **Data Clarity First:** Information hierarchy prioritizes critical data visibility\n2. **Role-Specific Optimization:** Interface adapts to user role workflows\n3. **Mobile-Field Ready:** Touch-friendly interfaces for supervisor daily work logging\n4. **Efficient Workflows:** Minimize clicks for repetitive tasks (daily work entry, approvals)\n5. **Trust Through Transparency:** Clear audit trails and approval states\n\n---\n\n## Typography\n\n**Font Family:** Roboto (primary), Roboto Mono (data/numbers)\n\n**Hierarchy:**\n- **Page Titles:** 32px, Medium (500) - Project names, dashboard headers\n- **Section Headers:** 24px, Medium (500) - Card titles, form sections\n- **Subsection Headers:** 20px, Medium (500) - Table headers, panel titles\n- **Body Text:** 16px, Regular (400) - Form labels, descriptions, table content\n- **Small Text:** 14px, Regular (400) - Helper text, metadata, timestamps\n- **Micro Text:** 12px, Regular (400) - Table footnotes, status badges\n- **Data/Numbers:** Roboto Mono 16px - Meters, currency, ID numbers for scanning clarity\n\n**Implementation Notes:**\n- Use Medium (500) weight for all headers to maintain hierarchy without heaviness\n- Roboto Mono for all numerical data ensures alignment and readability in tables\n- Line height 1.5 for body text, 1.2 for headers\n\n---\n\n## Layout System\n\n**Spacing Scale:** Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24 (0.5rem increments)\n\n**Common Patterns:**\n- Component padding: p-6 (cards, modals)\n- Section spacing: space-y-8 (between major sections)\n- Form field gaps: gap-6 (vertical), gap-4 (horizontal in rows)\n- Table cell padding: px-4 py-3\n- Page margins: px-6 py-8 (mobile), px-12 py-12 (desktop)\n\n**Grid Structures:**\n- Dashboard cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-4\n- Form layouts: grid-cols-1 md:grid-cols-2 (for paired inputs)\n- Data tables: Full-width with horizontal scroll on mobile\n- Project list: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n\n**Container Widths:**\n- Full-width dashboards: max-w-none with px-12\n- Forms/Details: max-w-4xl mx-auto\n- Data tables: max-w-7xl mx-auto\n- Modals: max-w-2xl (standard), max-w-4xl (multi-step forms)\n\n---\n\n## Component Library\n\n### Navigation\n**Top App Bar (Fixed):**\n- Logo + Company name (left)\n- Role indicator badge (e.g., \"Project Manager\")\n- Notification bell icon with count badge\n- User profile menu (right)\n- Height: h-16\n\n**Side Navigation (Desktop Only):**\n- Persistent drawer on desktop (w-64)\n- Collapsible on tablet\n- Hidden on mobile (replaced by hamburger menu)\n- Active state: filled background with subtle left border accent\n- Navigation groups with dividers\n\n### Dashboard Components\n**Summary Cards:**\n- Elevated cards (shadow-md) with p-6\n- Icon + label + large metric number + trend indicator\n- 4 cards in row on desktop, stack on mobile\n- Metrics use Roboto Mono for numbers\n\n**Data Tables:**\n- Striped rows for readability (alternating subtle background)\n- Sticky header on scroll\n- Sort indicators on column headers\n- Row actions (ellipsis menu) on hover/tap\n- Pagination footer with rows-per-page selector\n- Mobile: Convert to stacked cards with key data visible\n\n**Project Cards (Grid View):**\n- Card with project name (header)\n- Location, budget, dates (body)\n- Active labourers count, supervisor count (footer)\n- Status badge (top-right corner)\n- Hover: Subtle shadow elevation increase\n\n### Forms\n**Input Fields:**\n- Outlined variant (Material Design outlined text fields)\n- Floating labels\n- Helper text below field (12px)\n- Error states: red outline + error message\n- Required indicator: asterisk in label\n\n**Field Types:**\n- Text inputs: Full outlined style\n- Dropdowns: Material select with chevron icon\n- Date pickers: Calendar icon trigger\n- File uploads: Drag-drop zone OR button trigger with preview\n- Number inputs: Roboto Mono font, spinner controls\n\n**Form Layout:**\n- Two-column on desktop for paired fields (First Name | Surname)\n- Single column for complex fields (addresses, descriptions)\n- Action buttons: Right-aligned (Cancel, Save)\n- Progress indicator for multi-step forms (stepper component)\n\n### Data Entry (Daily Work Sheet)\n**Specialized Interface:**\n- Table format: Labourer name (fixed left) | Open Meters | Close Meters | Daily Total\n- Inline editing: Click to activate number input\n- Real-time calculation display\n- Mobile optimization: Swipeable cards per labourer with large input fields\n- Submit button: Fixed bottom bar on mobile\n\n### Buttons & Actions\n**Primary Action:** Filled button (high emphasis)\n**Secondary Action:** Outlined button (medium emphasis)\n**Tertiary/Cancel:** Text button (low emphasis)\n\n**Sizes:**\n- Default: h-10 px-6\n- Large: h-12 px-8 (forms, CTAs)\n- Small: h-8 px-4 (table actions)\n- Icon buttons: h-10 w-10 (circular)\n\n### Status & Badges\n**Payment Status:**\n- Pending: Amber/yellow badge\n- Approved: Green badge\n- Rejected: Red badge\n- Paid: Blue badge\n\n**Project Status:**\n- Active: Green filled badge\n- Completed: Gray filled badge\n- On Hold: Orange outlined badge\n\n**Badge Style:** Rounded-full, px-3 py-1, 12px text, medium weight\n\n### Modals & Dialogs\n**Standard Modal:**\n- Centered overlay with backdrop (semi-transparent black)\n- max-w-2xl, rounded-lg, shadow-2xl\n- Header with title + close icon\n- Content area: p-6\n- Footer with actions (right-aligned)\n\n**Confirmation Dialogs:**\n- Smaller (max-w-md)\n- Warning icon for destructive actions\n- Clear primary/secondary action buttons\n\n### File Uploads & Images\n**Profile Photo Upload:**\n- Circular preview (96px diameter)\n- Upload button overlay on hover\n- Drag-drop zone alternative\n- Format requirements displayed (max 5MB, JPG/PNG)\n\n**Document Uploads:**\n- Card-style upload zone with icon\n- File name + size display after upload\n- Replace/remove actions\n- Preview thumbnail for images\n\n### Notifications & Alerts\n**Toast Notifications:**\n- Bottom-right position\n- Success: Green with checkmark icon\n- Error: Red with alert icon\n- Info: Blue with info icon\n- Auto-dismiss after 5 seconds\n\n**In-App Notifications Panel:**\n- Dropdown from bell icon\n- Scrollable list\n- Unread state indicator\n- Group by date\n- Action buttons (View, Dismiss)\n\n### Audit Trail & History\n**Timeline Component:**\n- Vertical timeline with connector lines\n- Event cards with timestamp, user, action description\n- Before/After comparison for corrections\n- Expandable details\n\n---\n\n## Mobile Optimization\n\n**Breakpoints:**\n- Mobile: < 640px\n- Tablet: 640px - 1024px\n- Desktop: > 1024px\n\n**Mobile-Specific Patterns:**\n- Bottom navigation bar (for supervisors in field)\n- Full-screen modals instead of dialogs\n- Larger touch targets (min 44px)\n- Simplified tables (card format)\n- Sticky action buttons at bottom\n- Collapsible sections with chevron indicators\n\n---\n\n## Responsive Behavior\n\n**Dashboard:** 4 cards → 2 cards → 1 card (stacked)\n**Forms:** 2 columns → 1 column\n**Navigation:** Side drawer → Top bar + hamburger menu\n**Tables:** Horizontal scroll → Stacked cards\n**Data Entry:** Table → Swipeable cards with large inputs\n\n---\n\n## Images\n\n**No Hero Images:** This is a data application, not a marketing site. Focus remains on functional interfaces.\n\n**Functional Images:**\n- **Profile Photos:** Circular avatars throughout (user menu, labourer lists, team pages)\n- **Document Previews:** Thumbnail previews for uploaded ID documents and banking proofs\n- **Empty States:** Subtle illustrations for empty project lists, no data scenarios (simple line art style)\n- **Onboarding:** Optional welcome screen illustration if first-time user guidance is added\n\n**Image Handling:**\n- Upload progress indicators\n- Placeholder avatars (initials on colored background)\n- Lazy loading for list views with many photos\n- Image compression guidance in upload UI\n\n---\n\n## Animations\n\n**Minimal, Purposeful Motion:**\n- Page transitions: 200ms fade\n- Modal appearance: 250ms scale + fade\n- Dropdown menus: 150ms slide down\n- Card hover: 200ms shadow elevation increase\n- Loading states: Subtle skeleton screens OR spinner (not both)\n- Success confirmations: Checkmark animation (300ms)\n\n**No Distracting Animations:** Avoid carousel auto-play, parallax effects, or continuous motion that would distract from data entry tasks.","size_bytes":8679},"client/src/components/examples/LoginPage.tsx":{"content":"import LoginPage from '../LoginPage';\n\nexport default function LoginPageExample() {\n  const handleLogin = () => console.log('Login clicked');\n\n  return <LoginPage onLogin={handleLogin} />;\n}","size_bytes":190},"client/src/components/examples/AppSidebar.tsx":{"content":"import { SidebarProvider } from \"@/components/ui/sidebar\";\nimport AppSidebar from '../AppSidebar';\nimport { useState } from 'react';\n\nexport default function AppSidebarExample() {\n  const [currentPath, setCurrentPath] = useState('/dashboard');\n\n  const handleNavigate = (path: string) => {\n    console.log('Navigate to:', path);\n    setCurrentPath(path);\n  };\n\n  const handleLogout = () => console.log('Logout');\n\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          userRole=\"project_manager\"\n          userName=\"John Doe\"\n          userEmail=\"john.doe@mooya.co.za\"\n          currentPath={currentPath}\n          onNavigate={handleNavigate}\n          onLogout={handleLogout}\n        />\n        <div className=\"flex-1 p-6 overflow-auto\">\n          <div className=\"max-w-4xl\">\n            <h1 className=\"text-2xl font-semibold mb-2\">Sidebar Navigation Example</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              Click on the navigation items to see the active state change.\n            </p>\n            <div className=\"p-6 border rounded-lg bg-card\">\n              <p className=\"text-sm text-muted-foreground\">Current path:</p>\n              <p className=\"text-lg font-mono font-semibold\">{currentPath}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":1504},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Mooya EMPCare - Fibre Deployment Management Tool\n\n## Overview\n\nMooya EMPCare is an enterprise-grade fibre deployment management system designed to track temporary labor, manage daily work output, and process fortnightly payroll with role-based access control. The application serves multiple user types including super administrators, project managers, supervisors, and laborers, providing each role with tailored dashboards and workflows optimized for their specific responsibilities. The system emphasizes data clarity, mobile-field readiness for supervisors logging daily work, efficient workflows for repetitive tasks, and transparent audit trails for all financial transactions and approvals.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\nThe application uses a modern React-based single-page application (SPA) architecture with TypeScript. UI is built with Tailwind CSS and shadcn/ui components (New York style), offering utility-first CSS, accessible components, custom design tokens, and dark mode support. The design adheres to Carbon Design System principles, prioritizing clarity and data density, with typography using IBM Plex Sans and IBM Plex Mono. State management is handled by TanStack Query for server state and local React state for UI concerns, using Wouter for lightweight client-side routing. Component architecture follows atomic design principles, with role-specific dashboards.\n\n**Authentication Flows**: The application supports two separate authentication flows:\n- **Staff Login** (/login): OIDC-based Google OAuth for administrators, project managers, and supervisors (@mooya.co.za, @mooyawireless.co.za, @xnext.co.za domains)\n- **Labourer Login** (/labourer-login): Custom phone/email + RSA ID/passport authentication for field labourers\n\n### Backend Architecture\n\nThe backend uses Express.js with Node.js, providing a RESTful API. Key features include:\n- **Dual Authentication System**: Passport.js with both OIDC strategy (staff) and Local strategy (labourers) with session regeneration for security\n- **Automatic Labourer Account Creation**: When a labourer is onboarded, the system automatically creates login credentials:\n  - Password hash generated from RSA ID/passport number using bcrypt (10 salt rounds)\n  - Stored in labourers.passwordHash field for immediate login capability\n  - Login credentials: contactNumber OR email + RSA ID/passport number\n  - UI provides clear informational notice explaining the auto-creation process\n  - Email field labeled \"Email (for login)\" to guide data entry\n- **Banking Details Standardization**: Onboarding form features standardized bank selection with automatic branch code population:\n  - Dropdown menu with 20 major South African banks (Absa, Capitec, FNB, Standard Bank, Nedbank, etc.)\n  - Universal branch codes automatically populated when bank is selected\n  - Branch code field is read-only/disabled to prevent manual errors\n  - Ensures consistent payment file generation and reduces data entry errors\n- **Password Security**: RSA ID/passport numbers are hashed using bcrypt (10 salt rounds) and stored in labourers.passwordHash field\n- **Session Isolation**: Separate middleware (isAuthenticated for staff, isLabourerAuthenticated for labourers) prevents cross-mode session interference\n  - Session augmentation with isLabourerSession flag and labourerId for type safety\n  - Explicit session.save() ensures persistence before response\n  - TypeScript module augmentation for express-session.SessionData interface\n- **Labourer Assignment**: Allows batch assignment of labourers to projects, showing availability.\n- **Streamlined Project Creation**: Supervisors can be assigned during project creation in a single step. The Add Project dialog includes an optional supervisor selector, and the POST /api/projects endpoint accepts supervisorId to automatically create the assignment. Team Management dialog displays all assigned managers and supervisors for transparency.\n- **Payment Period Management**: Comprehensive workflow (create → submit → approve/reject) for payment periods across projects, with role-based permissions. Payment period entries track open/close meters separately with detailed breakdown (openMeters, closeMeters, totalMeters columns).\n- **Project Manager Permissions** (PRD PM-001): Implements defense-in-depth security for PM role restrictions:\n  - Frontend: Separate permissions (canCreate, canAssignTeam, canEditStatus) control UI visibility\n  - Form submission: PMs send only status field, admins send all fields\n  - Backend validation: Server validates role and rejects non-status fields from PMs with 403 error\n  - UI behavior: PM edit dialog shows only status selector with \"Update project status\" description\n  - Allows PMs to close projects early without granting unauthorized admin privileges\n- **Work Log Edit Restrictions** (PRD WORK-001): Enforces today-only edit policy for work logs with dual-layer validation:\n  - Client-side: Disabled inputs, warning banner, and save guard on historical dates\n  - Server-side: POST and PUT endpoints validate workDate equals today before allowing operations\n  - Timezone-safe: Uses regex extraction for string dates and local component extraction for Date objects to prevent UTC drift\n  - Historical edits blocked: Supervisors must submit correction requests for past entries\n- **Audit Trail & Correction Requests**: Tracks all data corrections through a formal review and approval process, providing transparency.\n- **Labourer Dashboard Enhancement**: \n  - Current period metrics API (GET /api/my-current-period) calculates fortnightly earnings, days worked, next payment date, and total meters\n  - Dashboard displays 4 summary cards: Current Period Earnings (ZAR), Days Worked This Period, Next Payment Date, Total Meters This Period\n  - Each card shows current period value with all-time comparison\n- **Worker Activity Reporting**: Comprehensive reporting system with three report types:\n  - **Matrix View**: Pivot table with workers as rows, dates as columns, showing both Open and Close trenches for each day. Includes three final columns: Final Opens (total opens), Final Closes (total closes), and Total Amount (earnings in Rand based on employee type rates).\n  - **Detailed View**: Filterable activity breakdown by project, worker, date range, and grouping (daily/weekly/monthly) with CSV export.\n  - **Payroll Summary**: Aggregated worker earnings with open/close meter breakdown and grand totals.\n- **User Management**: Administrators can manage user roles with Zod schema validation.\n- **Authentication**: OpenID Connect (OIDC) integration with Replit Auth (Google OAuth), enforcing email domain restrictions and assigning roles based on domain.\n- **Session Management**: PostgreSQL-backed persistent sessions using connect-pg-simple.\n- **Authorization**: Role-based access control (RBAC) with roles like super_admin, admin, project_manager, supervisor, project_admin, and labourer. Labourers can optionally be linked to user accounts to access their personal dashboard.\n\n### Data Architecture\n\nDrizzle ORM is used for type-safe PostgreSQL queries and migrations. The schema includes tables for users, projects, employee types, work logs, payment periods, and correction requests, with Zod schemas for validation.\n\n### File Storage Architecture\n\nGoogle Cloud Storage is integrated for object storage of files (e.g., labourer photos), utilizing custom ACLs for fine-grained access control. Uppy.js provides drag-and-drop, multi-file uploads with progress tracking, and direct-to-storage uploads via pre-signed URLs.\n\n### Build and Development Architecture\n\nVite is used for frontend builds, providing fast HMR and optimized production builds. esbuild compiles the backend TypeScript to ESM. The development workflow uses tsx for direct TypeScript execution and integrates Vite dev server middleware. Path aliases are configured for consistent imports.\n\n## External Dependencies\n\n### Database\n\n- **Neon PostgreSQL**: Serverless PostgreSQL accessed via `@neondatabase/serverless` for primary data storage, with schema managed by Drizzle migrations.\n\n### Authentication Provider\n\n- **Replit Auth**: OIDC-compliant service providing Google OAuth, email domain restrictions, and token-based authentication.\n\n### Cloud Services\n\n- **Google Cloud Storage**: For object storage of files, integrated with Replit sidecar for credentials.\n\n### UI Component Libraries\n\n- **Radix UI**: Headless component primitives for accessibility.\n- **shadcn/ui**: Pre-styled Radix UI components with Tailwind CSS.\n\n### Developer Tools\n\n- **Replit Integrations**: Includes `@replit/vite-plugin-runtime-error-modal`, `@replit/vite-plugin-cartographer`, and `@replit/vite-plugin-dev-banner`.\n\n### Utility Libraries\n\n- **date-fns**: Date manipulation.\n- **zod**: Runtime schema validation.\n- **nanoid**: Unique ID generation.\n- **clsx + tailwind-merge**: CSS class utilities.\n- **lucide-react**: Icon library.","size_bytes":9036},"client/src/components/LoginPage.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport mooyaLogo from \"@assets/Mooya Logo_1761683789909.png\";\n\ninterface LoginPageProps {\n  onLogin: () => void;\n}\n\nexport default function LoginPage({ onLogin }: LoginPageProps) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-login\">\n        <CardHeader className=\"space-y-4 text-center\">\n          <div className=\"flex justify-center\">\n            <img src={mooyaLogo} alt=\"Mooya Wireless\" className=\"w-24 h-24\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl\">Mooya EMPCare</CardTitle>\n            <CardDescription className=\"mt-2\">\n              Fibre Deployment Management Tool\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button \n            className=\"w-full\" \n            size=\"lg\"\n            onClick={onLogin}\n            data-testid=\"button-google-login\"\n          >\n            <svg className=\"mr-2 h-5 w-5\" viewBox=\"0 0 24 24\">\n              <path\n                fill=\"currentColor\"\n                d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n              />\n              <path\n                fill=\"currentColor\"\n                d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n              />\n              <path\n                fill=\"currentColor\"\n                d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n              />\n              <path\n                fill=\"currentColor\"\n                d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n              />\n            </svg>\n            Sign in with Google\n          </Button>\n          <p className=\"text-sm text-center text-muted-foreground\">\n            Restricted to @mooya.co.za and @mooyawireless.co.za email addresses\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2378},"client/src/components/PaymentPeriodCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusBadge from \"./StatusBadge\";\nimport { Calendar, Users, DollarSign } from \"lucide-react\";\n\ninterface PaymentPeriodCardProps {\n  id: string;\n  startDate: string;\n  endDate: string;\n  status: \"pending\" | \"approved\" | \"paid\";\n  totalAmount: number;\n  labourerCount: number;\n  onView: (id: string) => void;\n  onApprove?: (id: string) => void;\n}\n\nexport default function PaymentPeriodCard({\n  id,\n  startDate,\n  endDate,\n  status,\n  totalAmount,\n  labourerCount,\n  onView,\n  onApprove\n}: PaymentPeriodCardProps) {\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-payment-period-${id}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div className=\"flex items-center text-sm text-muted-foreground\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          {startDate} - {endDate}\n        </div>\n        <StatusBadge status={status} />\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div>\n          <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n          <p className=\"text-2xl font-semibold font-mono\">R {totalAmount.toLocaleString()}</p>\n        </div>\n        <div className=\"flex items-center text-sm text-muted-foreground\">\n          <Users className=\"w-4 h-4 mr-2\" />\n          {labourerCount} labourers\n        </div>\n      </CardContent>\n      <CardFooter className=\"flex gap-2\">\n        <Button \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={() => onView(id)}\n          data-testid={`button-view-period-${id}`}\n        >\n          View Details\n        </Button>\n        {status === \"pending\" && onApprove && (\n          <Button \n            className=\"flex-1\"\n            onClick={() => onApprove(id)}\n            data-testid={`button-approve-period-${id}`}\n          >\n            Approve\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":2043},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { LayoutDashboard, Briefcase, Users, DollarSign, FileText, Settings, LogOut } from \"lucide-react\";\nimport RoleBadge from \"./RoleBadge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport mooyaLogo from \"@assets/Mooya Logo_1761683789909.png\";\n\ntype UserRole = \"super_admin\" | \"admin\" | \"project_manager\" | \"supervisor\" | \"project_admin\" | \"labourer\";\n\ninterface AppSidebarProps {\n  userRole: UserRole;\n  userName: string;\n  userEmail: string;\n  currentPath?: string;\n  onNavigate: (path: string) => void;\n  onLogout: () => void;\n}\n\nconst menuItems = {\n  super_admin: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Projects\", icon: Briefcase, path: \"/projects\" },\n    { title: \"Pay Rates\", icon: DollarSign, path: \"/pay-rates\" },\n    { title: \"Labourers\", icon: Users, path: \"/labourers\" },\n    { title: \"Reports\", icon: FileText, path: \"/reports\" },\n    { title: \"Payments\", icon: DollarSign, path: \"/payments\" },\n    { title: \"Audit Trail\", icon: FileText, path: \"/audit\" },\n    { title: \"Users\", icon: Users, path: \"/users\" },\n    { title: \"Employee Types\", icon: FileText, path: \"/employee-types\" },\n    { title: \"Settings\", icon: Settings, path: \"/settings\" },\n  ],\n  admin: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Projects\", icon: Briefcase, path: \"/projects\" },\n    { title: \"Pay Rates\", icon: DollarSign, path: \"/pay-rates\" },\n    { title: \"Labourers\", icon: Users, path: \"/labourers\" },\n    { title: \"Reports\", icon: FileText, path: \"/reports\" },\n    { title: \"Payments\", icon: DollarSign, path: \"/payments\" },\n    { title: \"Audit Trail\", icon: FileText, path: \"/audit\" },\n    { title: \"Daily Work\", icon: FileText, path: \"/work-log\" },\n    { title: \"Users\", icon: Users, path: \"/users\" },\n    { title: \"Employee Types\", icon: FileText, path: \"/employee-types\" },\n  ],\n  project_manager: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Projects\", icon: Briefcase, path: \"/projects\" },\n    { title: \"Pay Rates\", icon: DollarSign, path: \"/pay-rates\" },\n    { title: \"Labourers\", icon: Users, path: \"/labourers\" },\n    { title: \"Reports\", icon: FileText, path: \"/reports\" },\n    { title: \"Payments\", icon: DollarSign, path: \"/payments\" },\n    { title: \"Audit Trail\", icon: FileText, path: \"/audit\" },\n  ],\n  supervisor: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Labourers\", icon: Users, path: \"/labourers\" },\n    { title: \"Daily Work\", icon: FileText, path: \"/work-log\" },\n    { title: \"Reports\", icon: FileText, path: \"/reports\" },\n    { title: \"Payments\", icon: DollarSign, path: \"/payments\" },\n    { title: \"Audit Trail\", icon: FileText, path: \"/audit\" },\n  ],\n  project_admin: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Projects\", icon: Briefcase, path: \"/projects\" },\n    { title: \"Labourers\", icon: Users, path: \"/labourers\" },\n    { title: \"Reports\", icon: FileText, path: \"/reports\" },\n    { title: \"Payments\", icon: DollarSign, path: \"/payments\" },\n    { title: \"Audit Trail\", icon: FileText, path: \"/audit\" },\n  ],\n  labourer: [\n    { title: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\" },\n    { title: \"Work History\", icon: FileText, path: \"/work-history\" },\n  ],\n};\n\nexport default function AppSidebar({\n  userRole,\n  userName,\n  userEmail,\n  currentPath = \"/dashboard\",\n  onNavigate,\n  onLogout\n}: AppSidebarProps) {\n  const items = menuItems[userRole];\n  const initials = userName.split(' ').map(n => n[0]).join('').toUpperCase();\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-3\">\n          <img src={mooyaLogo} alt=\"Mooya Wireless\" className=\"w-10 h-10\" />\n          <div>\n            <h2 className=\"font-semibold\">Mooya EMPCare</h2>\n            <p className=\"text-xs text-muted-foreground\">Fibre Management</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.path}>\n                  <SidebarMenuButton\n                    onClick={() => onNavigate(item.path)}\n                    isActive={currentPath === item.path}\n                    data-testid={`nav-${item.path.slice(1)}`}\n                  >\n                    <item.icon />\n                    <span>{item.title}</span>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4 space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 rounded-lg bg-sidebar-accent\">\n          <Avatar className=\"w-10 h-10\">\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium text-sm truncate\">{userName}</p>\n            <p className=\"text-xs text-muted-foreground truncate\">{userEmail}</p>\n          </div>\n        </div>\n        <RoleBadge role={userRole} />\n        <SidebarMenuButton onClick={onLogout} data-testid=\"button-logout\">\n          <LogOut />\n          <span>Logout</span>\n        </SidebarMenuButton>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":5823},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/RoleBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ntype UserRole = \"super_admin\" | \"admin\" | \"project_manager\" | \"supervisor\" | \"project_admin\" | \"labourer\";\n\ninterface RoleBadgeProps {\n  role: UserRole;\n}\n\nconst roleLabels: Record<UserRole, string> = {\n  super_admin: \"Super Admin\",\n  admin: \"Admin\",\n  project_manager: \"Project Manager\",\n  supervisor: \"Supervisor\",\n  project_admin: \"Project Admin\",\n  labourer: \"Labourer\"\n};\n\nexport default function RoleBadge({ role }: RoleBadgeProps) {\n  return (\n    <Badge variant=\"secondary\" className=\"rounded-full px-3 py-1\" data-testid={`badge-role-${role}`}>\n      {roleLabels[role]}\n    </Badge>\n  );\n}","size_bytes":645},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/storage.ts":{"content":"import {\n  users,\n  employeeTypes,\n  projects,\n  labourers,\n  payRates,\n  workLogs,\n  paymentPeriods,\n  paymentPeriodEntries,\n  correctionRequests,\n  projectManagers,\n  projectSupervisors,\n  type User,\n  type UpsertUser,\n  type EmployeeType,\n  type InsertEmployeeType,\n  type Project,\n  type InsertProject,\n  type Labourer,\n  type InsertLabourer,\n  type PayRate,\n  type InsertPayRate,\n  type WorkLog,\n  type InsertWorkLog,\n  type PaymentPeriod,\n  type InsertPaymentPeriod,\n  type PaymentPeriodEntry,\n  type InsertPaymentPeriodEntry,\n  type CorrectionRequest,\n  type InsertCorrectionRequest,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, gte, lte, sql, inArray } from \"drizzle-orm\";\n\n// Storage interface\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUsersByRole(role: string): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(id: string, role: string): Promise<User>;\n  updateUser(id: string, data: Partial<{ firstName: string; lastName: string; email: string; role: string }>): Promise<User>;\n  \n  // Employee Type operations\n  getEmployeeTypes(): Promise<EmployeeType[]>;\n  getEmployeeType(id: string): Promise<EmployeeType | undefined>;\n  createEmployeeType(data: InsertEmployeeType): Promise<EmployeeType>;\n  updateEmployeeType(id: string, data: Partial<InsertEmployeeType>): Promise<EmployeeType>;\n  \n  // Project operations\n  getProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectsByManager(userId: string): Promise<Project[]>;\n  getProjectsBySupervisor(userId: string): Promise<Project[]>;\n  createProject(data: InsertProject): Promise<Project>;\n  updateProject(id: string, data: Partial<InsertProject>): Promise<Project>;\n  assignProjectManager(projectId: string, userId: string): Promise<{ success: boolean; alreadyAssigned: boolean }>;\n  assignProjectSupervisor(projectId: string, userId: string): Promise<{ success: boolean; alreadyAssigned: boolean }>;\n  getProjectManagers(projectId: string): Promise<User[]>;\n  getProjectSupervisors(projectId: string): Promise<User[]>;\n  \n  // Labourer operations\n  getLabourers(projectId: string): Promise<Labourer[]>;\n  getAvailableLabourers(): Promise<Labourer[]>;\n  getLabourer(id: string): Promise<Labourer | undefined>;\n  getLabourerByUserId(userId: string): Promise<Labourer | undefined>;\n  getLabourerByPhoneOrEmail(identifier: string): Promise<Labourer | undefined>;\n  createLabourer(data: InsertLabourer): Promise<Labourer>;\n  bulkCreateLabourers(data: InsertLabourer[]): Promise<Labourer[]>;\n  updateLabourer(id: string, data: Partial<InsertLabourer>): Promise<Labourer>;\n  assignLabourersToProject(labourerIds: string[], projectId: string): Promise<void>;\n  \n  // Pay Rate operations\n  getPayRates(projectId: string): Promise<PayRate[]>;\n  getPayRateForEmployeeType(projectId: string, employeeTypeId: string, category: string, effectiveDate: Date): Promise<PayRate | undefined>;\n  createPayRate(data: InsertPayRate): Promise<PayRate>;\n  \n  // Work Log operations\n  getWorkLogs(projectId: string, startDate?: Date, endDate?: Date): Promise<WorkLog[]>;\n  getWorkLogsByDateRange(projectId: string, startDate: string, endDate: string): Promise<WorkLog[]>;\n  getWorkLogsByLabourer(labourerId: string): Promise<WorkLog[]>;\n  getWorkLog(id: string): Promise<WorkLog | undefined>;\n  createWorkLog(data: InsertWorkLog): Promise<WorkLog>;\n  updateWorkLog(id: string, data: Partial<InsertWorkLog>): Promise<WorkLog>;\n  \n  // Payment Period operations\n  getPaymentPeriods(projectId: string): Promise<PaymentPeriod[]>;\n  getPaymentPeriod(id: string): Promise<PaymentPeriod | undefined>;\n  createPaymentPeriod(data: InsertPaymentPeriod): Promise<PaymentPeriod>;\n  updatePaymentPeriod(id: string, data: Partial<InsertPaymentPeriod>): Promise<PaymentPeriod>;\n  getPaymentPeriodEntries(periodId: string): Promise<PaymentPeriodEntry[]>;\n  createPaymentPeriodEntry(data: InsertPaymentPeriodEntry): Promise<PaymentPeriodEntry>;\n  \n  // Correction Request operations\n  getCorrectionRequests(status?: string): Promise<CorrectionRequest[]>;\n  getCorrectionRequest(id: string): Promise<CorrectionRequest | undefined>;\n  createCorrectionRequest(data: InsertCorrectionRequest): Promise<CorrectionRequest>;\n  updateCorrectionRequest(id: string, data: Partial<InsertCorrectionRequest>): Promise<CorrectionRequest>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // First, check if a user with this email already exists\n    // Note: email is required in our auth flow, but the schema allows null\n    if (!userData.email) {\n      throw new Error(\"Email is required for user upsert\");\n    }\n\n    const [existingUser] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, userData.email as string));\n\n    if (existingUser) {\n      // Update existing user (NEVER update the id - it has foreign key references!)\n      // Extract id from userData and only update the other fields\n      const { id, ...updateData } = userData;\n      const [updated] = await db\n        .update(users)\n        .set({\n          ...updateData,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.email, userData.email as string))\n        .returning();\n      return updated;\n    } else {\n      // Insert new user\n      const [newUser] = await db\n        .insert(users)\n        .values(userData)\n        .returning();\n      return newUser;\n    }\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return db.select().from(users).where(eq(users.role, role as any));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    // Exclude labourers - they are data entities, not system users\n    return db.select().from(users).where(sql`role != 'labourer'`).orderBy(desc(users.createdAt));\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role: role as any, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<{ firstName: string; lastName: string; email: string; role: string }>): Promise<User> {\n    const updateData: any = { updatedAt: new Date() };\n    if (data.firstName !== undefined) updateData.firstName = data.firstName;\n    if (data.lastName !== undefined) updateData.lastName = data.lastName;\n    if (data.email !== undefined) updateData.email = data.email;\n    if (data.role !== undefined) updateData.role = data.role;\n\n    const [user] = await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n\n  // Employee Type operations\n  async getEmployeeTypes(): Promise<EmployeeType[]> {\n    return db.select().from(employeeTypes).where(eq(employeeTypes.isActive, true));\n  }\n\n  async getEmployeeType(id: string): Promise<EmployeeType | undefined> {\n    const [type] = await db.select().from(employeeTypes).where(eq(employeeTypes.id, id));\n    return type || undefined;\n  }\n\n  async createEmployeeType(data: InsertEmployeeType): Promise<EmployeeType> {\n    const [type] = await db.insert(employeeTypes).values(data).returning();\n    return type;\n  }\n\n  async updateEmployeeType(id: string, data: Partial<InsertEmployeeType>): Promise<EmployeeType> {\n    const [type] = await db\n      .update(employeeTypes)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(employeeTypes.id, id))\n      .returning();\n    return type;\n  }\n\n  // Project operations\n  async getProjects(): Promise<Project[]> {\n    return db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project || undefined;\n  }\n\n  async getProjectsByManager(userId: string): Promise<Project[]> {\n    const results = await db\n      .select({ project: projects })\n      .from(projects)\n      .innerJoin(projectManagers, eq(projects.id, projectManagers.projectId))\n      .where(eq(projectManagers.userId, userId));\n    return results.map(r => r.project);\n  }\n\n  async getProjectsBySupervisor(userId: string): Promise<Project[]> {\n    const results = await db\n      .select({ project: projects })\n      .from(projects)\n      .innerJoin(projectSupervisors, eq(projects.id, projectSupervisors.projectId))\n      .where(eq(projectSupervisors.userId, userId));\n    return results.map(r => r.project);\n  }\n\n  async createProject(data: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values(data).returning();\n    return project;\n  }\n\n  async updateProject(id: string, data: Partial<InsertProject>): Promise<Project> {\n    const [project] = await db\n      .update(projects)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  async assignProjectManager(projectId: string, userId: string): Promise<{ success: boolean; alreadyAssigned: boolean }> {\n    // Check if already assigned\n    const [existing] = await db\n      .select()\n      .from(projectManagers)\n      .where(and(eq(projectManagers.projectId, projectId), eq(projectManagers.userId, userId)));\n    \n    if (existing) {\n      return { success: true, alreadyAssigned: true };\n    }\n\n    try {\n      await db.insert(projectManagers).values({ projectId, userId });\n      return { success: true, alreadyAssigned: false };\n    } catch (error: any) {\n      // Handle race condition: if unique constraint is violated, treat as already assigned\n      if (error.code === '23505' || error.message?.includes('duplicate key') || error.message?.includes('unique constraint')) {\n        return { success: true, alreadyAssigned: true };\n      }\n      // Re-throw unexpected errors\n      console.error(\"Error assigning project manager:\", error);\n      throw new Error(\"Failed to assign project manager\");\n    }\n  }\n\n  async assignProjectSupervisor(projectId: string, userId: string): Promise<{ success: boolean; alreadyAssigned: boolean }> {\n    // Check if already assigned\n    const [existing] = await db\n      .select()\n      .from(projectSupervisors)\n      .where(and(eq(projectSupervisors.projectId, projectId), eq(projectSupervisors.userId, userId)));\n    \n    if (existing) {\n      return { success: true, alreadyAssigned: true };\n    }\n\n    try {\n      await db.insert(projectSupervisors).values({ projectId, userId });\n      return { success: true, alreadyAssigned: false };\n    } catch (error: any) {\n      // Handle race condition: if unique constraint is violated, treat as already assigned\n      if (error.code === '23505' || error.message?.includes('duplicate key') || error.message?.includes('unique constraint')) {\n        return { success: true, alreadyAssigned: true };\n      }\n      // Re-throw unexpected errors\n      console.error(\"Error assigning project supervisor:\", error);\n      throw new Error(\"Failed to assign project supervisor\");\n    }\n  }\n\n  async getProjectManagers(projectId: string): Promise<User[]> {\n    const assignments = await db\n      .select()\n      .from(projectManagers)\n      .where(eq(projectManagers.projectId, projectId));\n    \n    if (assignments.length === 0) {\n      return [];\n    }\n    \n    const userIds = assignments.map(a => a.userId);\n    return db.select().from(users).where(inArray(users.id, userIds));\n  }\n\n  async getProjectSupervisors(projectId: string): Promise<User[]> {\n    const assignments = await db\n      .select()\n      .from(projectSupervisors)\n      .where(eq(projectSupervisors.projectId, projectId));\n    \n    if (assignments.length === 0) {\n      return [];\n    }\n    \n    const userIds = assignments.map(a => a.userId);\n    return db.select().from(users).where(inArray(users.id, userIds));\n  }\n\n  // Labourer operations\n  async getLabourers(projectId: string): Promise<Labourer[]> {\n    return db.select().from(labourers).where(eq(labourers.projectId, projectId));\n  }\n\n  async getLabourer(id: string): Promise<Labourer | undefined> {\n    const [labourer] = await db.select().from(labourers).where(eq(labourers.id, id));\n    return labourer || undefined;\n  }\n\n  async getLabourerByUserId(userId: string): Promise<Labourer | undefined> {\n    const [labourer] = await db.select().from(labourers).where(eq(labourers.userId, userId));\n    return labourer || undefined;\n  }\n\n  async getLabourerByPhoneOrEmail(identifier: string): Promise<Labourer | undefined> {\n    const [labourer] = await db\n      .select()\n      .from(labourers)\n      .where(\n        or(\n          eq(labourers.contactNumber, identifier),\n          eq(labourers.email, identifier)\n        )\n      );\n    return labourer || undefined;\n  }\n\n  async createLabourer(data: InsertLabourer): Promise<Labourer> {\n    const [labourer] = await db.insert(labourers).values(data).returning();\n    return labourer;\n  }\n\n  async bulkCreateLabourers(data: InsertLabourer[]): Promise<Labourer[]> {\n    if (data.length === 0) return [];\n    const created = await db.insert(labourers).values(data).returning();\n    return created;\n  }\n\n  async updateLabourer(id: string, data: Partial<InsertLabourer>): Promise<Labourer> {\n    const [labourer] = await db\n      .update(labourers)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(labourers.id, id))\n      .returning();\n    return labourer;\n  }\n\n  async getAvailableLabourers(): Promise<Labourer[]> {\n    // Get labourers who are either:\n    // 1. Not assigned to any project (projectId references a non-existent or inactive project)\n    // 2. Assigned to a project that is not active\n    const result = await db\n      .select({\n        labourer: labourers,\n        project: projects,\n      })\n      .from(labourers)\n      .leftJoin(projects, eq(labourers.projectId, projects.id))\n      .where(\n        sql`${projects.status} IS NULL OR ${projects.status} != 'active'`\n      );\n    \n    return result.map(r => r.labourer);\n  }\n\n  async assignLabourersToProject(labourerIds: string[], projectId: string): Promise<void> {\n    if (labourerIds.length === 0) return;\n    \n    await db\n      .update(labourers)\n      .set({ \n        projectId, \n        updatedAt: new Date() \n      })\n      .where(inArray(labourers.id, labourerIds));\n  }\n\n  // Pay Rate operations\n  async getPayRates(projectId: string): Promise<PayRate[]> {\n    return db.select().from(payRates).where(eq(payRates.projectId, projectId));\n  }\n\n  async getPayRateForEmployeeType(\n    projectId: string,\n    employeeTypeId: string,\n    category: string,\n    effectiveDate: Date\n  ): Promise<PayRate | undefined> {\n    const [rate] = await db\n      .select()\n      .from(payRates)\n      .where(\n        and(\n          eq(payRates.projectId, projectId),\n          eq(payRates.employeeTypeId, employeeTypeId),\n          eq(payRates.category, category as any),\n          lte(payRates.effectiveDate, effectiveDate.toISOString().split('T')[0])\n        )\n      )\n      .orderBy(desc(payRates.effectiveDate))\n      .limit(1);\n    return rate || undefined;\n  }\n\n  async createPayRate(data: InsertPayRate): Promise<PayRate> {\n    const [rate] = await db.insert(payRates).values(data).returning();\n    return rate;\n  }\n\n  // Work Log operations\n  async getWorkLogs(projectId: string, startDate?: Date, endDate?: Date): Promise<WorkLog[]> {\n    if (startDate && endDate) {\n      return db\n        .select()\n        .from(workLogs)\n        .where(\n          and(\n            eq(workLogs.projectId, projectId),\n            gte(workLogs.workDate, startDate.toISOString().split('T')[0]),\n            lte(workLogs.workDate, endDate.toISOString().split('T')[0])\n          )\n        )\n        .orderBy(desc(workLogs.workDate));\n    }\n    \n    return db\n      .select()\n      .from(workLogs)\n      .where(eq(workLogs.projectId, projectId))\n      .orderBy(desc(workLogs.workDate));\n  }\n\n  async getWorkLogsByDateRange(projectId: string, startDate: string, endDate: string): Promise<WorkLog[]> {\n    return db\n      .select()\n      .from(workLogs)\n      .where(\n        and(\n          eq(workLogs.projectId, projectId),\n          gte(workLogs.workDate, startDate),\n          lte(workLogs.workDate, endDate)\n        )\n      )\n      .orderBy(desc(workLogs.workDate));\n  }\n\n  async getWorkLogsByLabourer(labourerId: string): Promise<WorkLog[]> {\n    return db.select().from(workLogs).where(eq(workLogs.labourerId, labourerId)).orderBy(desc(workLogs.workDate));\n  }\n\n  async getWorkLog(id: string): Promise<WorkLog | undefined> {\n    const [log] = await db.select().from(workLogs).where(eq(workLogs.id, id));\n    return log || undefined;\n  }\n\n  async createWorkLog(data: InsertWorkLog): Promise<WorkLog> {\n    const [log] = await db.insert(workLogs).values(data).returning();\n    return log;\n  }\n\n  async updateWorkLog(id: string, data: Partial<InsertWorkLog>): Promise<WorkLog> {\n    const [log] = await db\n      .update(workLogs)\n      .set(data)\n      .where(eq(workLogs.id, id))\n      .returning();\n    return log;\n  }\n\n  // Payment Period operations\n  async getPaymentPeriods(projectId: string): Promise<PaymentPeriod[]> {\n    return db.select().from(paymentPeriods).where(eq(paymentPeriods.projectId, projectId)).orderBy(desc(paymentPeriods.startDate));\n  }\n\n  async getPaymentPeriod(id: string): Promise<PaymentPeriod | undefined> {\n    const [period] = await db.select().from(paymentPeriods).where(eq(paymentPeriods.id, id));\n    return period || undefined;\n  }\n\n  async createPaymentPeriod(data: InsertPaymentPeriod): Promise<PaymentPeriod> {\n    const [period] = await db.insert(paymentPeriods).values(data).returning();\n    return period;\n  }\n\n  async updatePaymentPeriod(id: string, data: Partial<InsertPaymentPeriod>): Promise<PaymentPeriod> {\n    const [period] = await db\n      .update(paymentPeriods)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(paymentPeriods.id, id))\n      .returning();\n    return period;\n  }\n\n  async getPaymentPeriodEntries(periodId: string): Promise<PaymentPeriodEntry[]> {\n    return db.select().from(paymentPeriodEntries).where(eq(paymentPeriodEntries.periodId, periodId));\n  }\n\n  async createPaymentPeriodEntry(data: InsertPaymentPeriodEntry): Promise<PaymentPeriodEntry> {\n    const [entry] = await db.insert(paymentPeriodEntries).values(data).returning();\n    return entry;\n  }\n\n  // Correction Request operations\n  async getCorrectionRequests(status?: string): Promise<CorrectionRequest[]> {\n    if (status) {\n      return db.select().from(correctionRequests).where(eq(correctionRequests.status, status as any)).orderBy(desc(correctionRequests.requestedAt));\n    }\n    return db.select().from(correctionRequests).orderBy(desc(correctionRequests.requestedAt));\n  }\n\n  async getCorrectionRequest(id: string): Promise<CorrectionRequest | undefined> {\n    const [request] = await db.select().from(correctionRequests).where(eq(correctionRequests.id, id));\n    return request || undefined;\n  }\n\n  async createCorrectionRequest(data: InsertCorrectionRequest): Promise<CorrectionRequest> {\n    const [request] = await db.insert(correctionRequests).values(data).returning();\n    return request;\n  }\n\n  async updateCorrectionRequest(id: string, data: Partial<InsertCorrectionRequest>): Promise<CorrectionRequest> {\n    const [request] = await db\n      .update(correctionRequests)\n      .set(data)\n      .where(eq(correctionRequests.id, id))\n      .returning();\n    return request;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":20130},"client/src/pages/users.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, UserPlus, Edit, Loader2 } from \"lucide-react\";\nimport type { User, UserRole } from \"@shared/schema\";\n\nconst roleLabels: Record<UserRole, string> = {\n  super_admin: \"Super Admin\",\n  admin: \"Admin\",\n  project_manager: \"Project Manager\",\n  supervisor: \"Supervisor\",\n  project_admin: \"Project Administrator\",\n  labourer: \"Labourer\",\n};\n\nconst roleBadgeColors: Record<UserRole, string> = {\n  super_admin: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n  admin: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n  project_manager: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  supervisor: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n  project_admin: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\",\n  labourer: \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\",\n};\n\ninterface UsersPageProps {\n  user: User;\n}\n\nexport default function UsersPage({ user }: UsersPageProps) {\n  // Check authorization - only super_admin and admin can access\n  if (user.role !== \"super_admin\" && user.role !== \"admin\") {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">\n              You don't have permission to access this page.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState<string>(\"all\");\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [editForm, setEditForm] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    role: \"\" as UserRole | \"\",\n  });\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, data }: { userId: string; data: Partial<{ firstName: string; lastName: string; email: string; role: UserRole }> }) => {\n      return apiRequest(\"PUT\", `/api/users/${userId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"User updated\",\n        description: \"User details have been updated successfully.\",\n      });\n      setEditDialogOpen(false);\n      setSelectedUser(null);\n      setEditForm({ firstName: \"\", lastName: \"\", email: \"\", role: \"\" });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = users?.filter((user) => {\n    // Exclude labourers - they are data entities, not system users\n    if (user.role === \"labourer\") return false;\n    \n    const matchesSearch =\n      searchQuery === \"\" ||\n      user.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      `${user.firstName} ${user.lastName}`.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    return matchesSearch && matchesRole;\n  });\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setEditForm({\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      email: user.email || \"\",\n      role: user.role,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handleUpdateUser = () => {\n    if (selectedUser && editForm.role) {\n      const updateData: any = {};\n      if (editForm.firstName) updateData.firstName = editForm.firstName;\n      if (editForm.lastName) updateData.lastName = editForm.lastName;\n      if (editForm.email) updateData.email = editForm.email;\n      if (editForm.role) updateData.role = editForm.role;\n      \n      updateUserMutation.mutate({ userId: selectedUser.id, data: updateData });\n    }\n  };\n\n  const getInitials = (firstName: string | null, lastName: string | null) => {\n    const first = firstName?.[0] || \"\";\n    const last = lastName?.[0] || \"\";\n    return `${first}${last}`.toUpperCase() || \"?\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">User Management</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage user roles and permissions\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex-1 w-full sm:w-auto\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-user-search\"\n                />\n              </div>\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-role-filter\">\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"project_manager\">Project Manager</SelectItem>\n                <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                <SelectItem value=\"project_admin\">Project Administrator</SelectItem>\n                <SelectItem value=\"labourer\">Labourer</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers && filteredUsers.length > 0 ? (\n                    filteredUsers.map((tableUser) => (\n                      <TableRow key={tableUser.id} data-testid={`row-user-${tableUser.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-3\">\n                            <Avatar className=\"h-9 w-9\">\n                              <AvatarImage src={tableUser.profileImageUrl || undefined} />\n                              <AvatarFallback className=\"text-xs\">\n                                {getInitials(tableUser.firstName, tableUser.lastName)}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">\n                              {tableUser.firstName} {tableUser.lastName}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">{tableUser.email}</TableCell>\n                        <TableCell>\n                          <Badge className={roleBadgeColors[tableUser.role]} variant=\"secondary\">\n                            {roleLabels[tableUser.role]}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          {tableUser.id !== user.id && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditUser(tableUser)}\n                              data-testid={`button-edit-user-${tableUser.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={4} className=\"text-center py-12 text-muted-foreground\">\n                        No users found\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-user\">\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Update user details for {selectedUser?.firstName} {selectedUser?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                value={editForm.firstName}\n                onChange={(e) => setEditForm({ ...editForm, firstName: e.target.value })}\n                placeholder=\"Enter first name\"\n                data-testid=\"input-first-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                value={editForm.lastName}\n                onChange={(e) => setEditForm({ ...editForm, lastName: e.target.value })}\n                placeholder=\"Enter last name\"\n                data-testid=\"input-last-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={editForm.email}\n                onChange={(e) => setEditForm({ ...editForm, email: e.target.value })}\n                placeholder=\"Enter email address\"\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select value={editForm.role} onValueChange={(value) => setEditForm({ ...editForm, role: value as UserRole })}>\n                <SelectTrigger id=\"role\" data-testid=\"select-new-role\">\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {user.role === \"super_admin\" && (\n                    <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                  )}\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"project_manager\">Project Manager</SelectItem>\n                  <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                  <SelectItem value=\"project_admin\">Project Administrator</SelectItem>\n                  <SelectItem value=\"labourer\">Labourer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setEditDialogOpen(false)}\n              data-testid=\"button-cancel-edit\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpdateUser}\n              disabled={!editForm.role || !editForm.firstName || !editForm.lastName || !editForm.email || updateUserMutation.isPending}\n              data-testid=\"button-save-user\"\n            >\n              {updateUserMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Save Changes\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13675},"client/src/components/examples/ProjectCard.tsx":{"content":"import ProjectCard from '../ProjectCard';\n\nexport default function ProjectCardExample() {\n  const handleView = (id: string) => console.log('View project:', id);\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-6\">\n      <ProjectCard\n        id=\"1\"\n        name=\"BPM 605\"\n        location=\"Somerset East\"\n        budget={250000}\n        status=\"active\"\n        labourerCount={24}\n        supervisorCount={2}\n        onView={handleView}\n      />\n      <ProjectCard\n        id=\"2\"\n        name=\"Fibre Deployment Phase 2\"\n        location=\"Port Elizabeth\"\n        budget={180000}\n        status=\"active\"\n        labourerCount={18}\n        supervisorCount={1}\n        onView={handleView}\n      />\n      <ProjectCard\n        id=\"3\"\n        name=\"Network Extension\"\n        location=\"Grahamstown\"\n        status=\"on_hold\"\n        labourerCount={0}\n        supervisorCount={1}\n        onView={handleView}\n      />\n    </div>\n  );\n}","size_bytes":963},"client/src/components/StatCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  subtitle?: string;\n}\n\nexport default function StatCard({ title, value, icon: Icon, subtitle }: StatCardProps) {\n  return (\n    <Card data-testid={`card-stat-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-normal text-muted-foreground\">{title}</p>\n            <p className=\"text-2xl font-semibold mt-2 font-mono\">{value}</p>\n            {subtitle && (\n              <p className=\"text-sm text-muted-foreground mt-1\">{subtitle}</p>\n            )}\n          </div>\n          <div className=\"p-3 rounded-lg bg-primary/10\">\n            <Icon className=\"w-5 h-5 text-primary\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1005},"attached_assets/postcss.config_1761683200901.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { queryClient, getQueryFn } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport UsersPage from \"@/pages/users\";\nimport EmployeeTypesPage from \"@/pages/employee-types\";\nimport ProjectsPage from \"@/pages/projects\";\nimport ProjectDetails from \"@/pages/project-details\";\nimport PayRatesPage from \"@/pages/pay-rates\";\nimport LabourersPage from \"@/pages/labourers\";\nimport Reports from \"@/pages/reports\";\nimport WorkLogPage from \"@/pages/work-log\";\nimport PaymentsPage from \"@/pages/payments\";\nimport AuditPage from \"@/pages/audit\";\nimport RolesPage from \"@/pages/roles\";\nimport LabourerDashboard from \"@/pages/labourer-dashboard\";\nimport LabourerLogin from \"@/pages/labourer-login\";\nimport NotFound from \"@/pages/not-found\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Loader2, Users } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nfunction LoginPage() {\n  const [, setLocation] = useLocation();\n  \n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-3 text-center\">\n          <h1 className=\"text-3xl font-bold\">Mooya EMPCare</h1>\n          <p className=\"text-muted-foreground\">Fibre Deployment Management Tool</p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button\n            onClick={handleLogin}\n            className=\"w-full\"\n            size=\"lg\"\n            data-testid=\"button-login\"\n          >\n            Sign in with Google\n          </Button>\n          <p className=\"text-xs text-center text-muted-foreground\">\n            Access restricted to @mooya.co.za and @mooyawireless.co.za email addresses\n          </p>\n          \n          <div className=\"relative my-6\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t\"></div>\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">or</span>\n            </div>\n          </div>\n\n          <Button\n            onClick={() => setLocation(\"/labourer-login\")}\n            variant=\"outline\"\n            className=\"w-full\"\n            size=\"lg\"\n            data-testid=\"button-labourer-login\"\n          >\n            <Users className=\"mr-2 h-4 w-4\" />\n            Labourer Login\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction AuthenticatedApp({ user }: { user: User }) {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          userRole={user.role}\n          userName={`${user.firstName} ${user.lastName}`}\n          userEmail={user.email || \"\"}\n          currentPath={window.location.pathname}\n          onNavigate={(path) => (window.location.href = path)}\n          onLogout={() => {\n            window.location.href = \"/api/logout\";\n          }}\n        />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b bg-background\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              <Switch>\n                <Route path=\"/\" component={() => user.role === \"labourer\" ? <LabourerDashboard user={user} /> : <Dashboard user={user} />} />\n                <Route path=\"/dashboard\" component={() => user.role === \"labourer\" ? <LabourerDashboard user={user} /> : <Dashboard user={user} />} />\n                <Route path=\"/users\" component={() => <UsersPage user={user} />} />\n                <Route path=\"/employee-types\" component={() => <EmployeeTypesPage user={user} />} />\n                <Route path=\"/projects/:id\" component={() => <ProjectDetails user={user} />} />\n                <Route path=\"/projects\" component={() => <ProjectsPage user={user} />} />\n                <Route path=\"/pay-rates\" component={() => <PayRatesPage user={user} />} />\n                <Route path=\"/labourers\" component={LabourersPage} />\n                <Route path=\"/reports\" component={() => <Reports user={user} />} />\n                <Route path=\"/work-log\" component={() => <WorkLogPage user={user} />} />\n                <Route path=\"/payments\" component={() => <PaymentsPage user={user} />} />\n                <Route path=\"/audit\" component={() => <AuditPage user={user} />} />\n                <Route path=\"/roles\" component={RolesPage} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction AppContent() {\n  const [location] = useLocation();\n  \n  // Check if we're on labourer routes (don't query /api/user for these)\n  const isLabourerRoute = location === \"/labourer-login\" || location === \"/labourer-dashboard\";\n  \n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    enabled: !isLabourerRoute, // Only query for staff routes\n  });\n\n  // Public labourer login route\n  if (location === \"/labourer-login\") {\n    return <LabourerLogin />;\n  }\n\n  // Protected labourer dashboard route - labourer auth handled by backend APIs\n  if (location === \"/labourer-dashboard\") {\n    return <LabourerDashboard user={null} />;\n  }\n\n  // Staff routes - require OIDC authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return <AuthenticatedApp user={user} />;\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":6782},"client/src/components/ProjectCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusBadge from \"./StatusBadge\";\nimport { MapPin, DollarSign, Users } from \"lucide-react\";\n\ninterface ProjectCardProps {\n  id: string;\n  name: string;\n  location?: string;\n  budget?: number;\n  status: \"active\" | \"completed\" | \"on_hold\";\n  labourerCount: number;\n  supervisorCount: number;\n  onView: (id: string) => void;\n}\n\nexport default function ProjectCard({\n  id,\n  name,\n  location,\n  budget,\n  status,\n  labourerCount,\n  supervisorCount,\n  onView\n}: ProjectCardProps) {\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-project-${id}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <h3 className=\"text-lg font-semibold\">{name}</h3>\n        <StatusBadge status={status} />\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {location && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <MapPin className=\"w-4 h-4 mr-2\" />\n            {location}\n          </div>\n        )}\n        {budget && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <DollarSign className=\"w-4 h-4 mr-2\" />\n            R {budget.toLocaleString()}\n          </div>\n        )}\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div className=\"flex items-center text-muted-foreground\">\n            <Users className=\"w-4 h-4 mr-1\" />\n            {labourerCount} labourers\n          </div>\n          <div className=\"text-muted-foreground\">\n            {supervisorCount} supervisors\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button \n          variant=\"outline\" \n          className=\"w-full\" \n          onClick={() => onView(id)}\n          data-testid={`button-view-project-${id}`}\n        >\n          View Details\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":2008},"client/src/components/examples/RoleBadge.tsx":{"content":"import RoleBadge from '../RoleBadge';\n\nexport default function RoleBadgeExample() {\n  return (\n    <div className=\"flex flex-wrap gap-3 p-6\">\n      <RoleBadge role=\"super_admin\" />\n      <RoleBadge role=\"admin\" />\n      <RoleBadge role=\"project_manager\" />\n      <RoleBadge role=\"supervisor\" />\n      <RoleBadge role=\"project_admin\" />\n      <RoleBadge role=\"labourer\" />\n    </div>\n  );\n}","size_bytes":389},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/examples/StatusBadge.tsx":{"content":"import StatusBadge from '../StatusBadge';\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex flex-wrap gap-3 p-6\">\n      <StatusBadge status=\"active\" />\n      <StatusBadge status=\"pending\" />\n      <StatusBadge status=\"approved\" />\n      <StatusBadge status=\"rejected\" />\n      <StatusBadge status=\"paid\" />\n      <StatusBadge status=\"completed\" />\n      <StatusBadge status=\"on_hold\" />\n    </div>\n  );\n}","size_bytes":438},"attached_assets/drizzle.config_1761683348006.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  decimal,\n  text,\n  integer,\n  boolean,\n  date,\n  pgEnum,\n  primaryKey,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"super_admin\",\n  \"admin\",\n  \"project_manager\",\n  \"supervisor\",\n  \"project_admin\",\n  \"labourer\"\n]);\n\n// User storage table (required for Replit Auth, extended for our needs)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default(\"labourer\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  managedProjects: many(projectManagers),\n  supervisedProjects: many(projectSupervisors),\n  labourerProfiles: many(labourers),\n  correctionRequests: many(correctionRequests),\n}));\n\nexport type User = typeof users.$inferSelect;\nexport type UserRole = User[\"role\"];\n\n// Employee types table\nexport const employeeTypes = pgTable(\"employee_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const employeeTypesRelations = relations(employeeTypes, ({ many }) => ({\n  labourers: many(labourers),\n  payRates: many(payRates),\n}));\n\n// Project status enum\nexport const projectStatusEnum = pgEnum(\"project_status\", [\n  \"active\",\n  \"completed\",\n  \"on_hold\"\n]);\n\n// Payment period enum\nexport const paymentPeriodEnum = pgEnum(\"payment_period\", [\n  \"monthly\",\n  \"fortnightly\"\n]);\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  location: varchar(\"location\", { length: 500 }),\n  budget: decimal(\"budget\", { precision: 12, scale: 2 }),\n  status: projectStatusEnum(\"status\").notNull().default(\"active\"),\n  paymentPeriod: paymentPeriodEnum(\"payment_period\").notNull().default(\"fortnightly\"),\n  defaultOpenRate: decimal(\"default_open_rate\", { precision: 10, scale: 2 }),\n  defaultCloseRate: decimal(\"default_close_rate\", { precision: 10, scale: 2 }),\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [projects.createdBy],\n    references: [users.id],\n  }),\n  managers: many(projectManagers),\n  supervisors: many(projectSupervisors),\n  labourers: many(labourers),\n  payRates: many(payRates),\n  paymentPeriods: many(paymentPeriods),\n  workLogs: many(workLogs),\n}));\n\n// Project managers junction table\nexport const projectManagers = pgTable(\"project_managers\", {\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.projectId, table.userId] }),\n}));\n\nexport const projectManagersRelations = relations(projectManagers, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectManagers.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [projectManagers.userId],\n    references: [users.id],\n  }),\n}));\n\n// Project supervisors junction table\nexport const projectSupervisors = pgTable(\"project_supervisors\", {\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.projectId, table.userId] }),\n}));\n\nexport const projectSupervisorsRelations = relations(projectSupervisors, ({ one }) => ({\n  project: one(projects, {\n    fields: [projectSupervisors.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [projectSupervisors.userId],\n    references: [users.id],\n  }),\n}));\n\n// Pay rate category enum\nexport const rateCategoryEnum = pgEnum(\"rate_category\", [\n  \"open_trenching\",\n  \"close_trenching\",\n  \"custom\"\n]);\n\n// Pay rate unit enum\nexport const rateUnitEnum = pgEnum(\"rate_unit\", [\n  \"per_meter\",\n  \"per_day\",\n  \"fixed\"\n]);\n\n// Pay rates table\nexport const payRates = pgTable(\"pay_rates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  employeeTypeId: varchar(\"employee_type_id\").notNull().references(() => employeeTypes.id),\n  category: rateCategoryEnum(\"category\").notNull(),\n  categoryName: varchar(\"category_name\", { length: 255 }), // For custom categories\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  unit: rateUnitEnum(\"unit\").notNull().default(\"per_meter\"),\n  effectiveDate: date(\"effective_date\").notNull().defaultNow(),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const payRatesRelations = relations(payRates, ({ one }) => ({\n  project: one(projects, {\n    fields: [payRates.projectId],\n    references: [projects.id],\n  }),\n  employeeType: one(employeeTypes, {\n    fields: [payRates.employeeTypeId],\n    references: [employeeTypes.id],\n  }),\n  creator: one(users, {\n    fields: [payRates.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Account type enum\nexport const accountTypeEnum = pgEnum(\"account_type\", [\"cheque\", \"savings\"]);\n\n// Labourers table\nexport const labourers = pgTable(\"labourers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id), // Optional: for labourers who have app access\n  projectId: varchar(\"project_id\").references(() => projects.id, { onDelete: 'cascade' }), // Optional: labourers can be unassigned\n  employeeTypeId: varchar(\"employee_type_id\").notNull().references(() => employeeTypes.id),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  surname: varchar(\"surname\", { length: 100 }).notNull(),\n  idNumber: varchar(\"id_number\", { length: 50 }).notNull(), // SA ID or Passport\n  passwordHash: varchar(\"password_hash\", { length: 255 }), // Hashed RSA ID/Passport for login\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  gender: varchar(\"gender\", { length: 20 }),\n  contactNumber: varchar(\"contact_number\", { length: 20 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  physicalAddress: text(\"physical_address\"),\n  profilePhotoPath: varchar(\"profile_photo_path\"),\n  idDocumentPath: varchar(\"id_document_path\"),\n  // Banking details\n  bankName: varchar(\"bank_name\", { length: 100 }).notNull(),\n  accountNumber: varchar(\"account_number\", { length: 50 }).notNull(),\n  accountType: accountTypeEnum(\"account_type\").notNull(),\n  branchCode: varchar(\"branch_code\", { length: 20 }).notNull(),\n  bankingProofPath: varchar(\"banking_proof_path\"),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const labourersRelations = relations(labourers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [labourers.userId],\n    references: [users.id],\n  }),\n  project: one(projects, {\n    fields: [labourers.projectId],\n    references: [projects.id],\n  }),\n  employeeType: one(employeeTypes, {\n    fields: [labourers.employeeTypeId],\n    references: [employeeTypes.id],\n  }),\n  creator: one(users, {\n    fields: [labourers.createdBy],\n    references: [users.id],\n  }),\n  workLogs: many(workLogs),\n  paymentEntries: many(paymentPeriodEntries),\n}));\n\n// Work logs table\nexport const workLogs = pgTable(\"work_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  labourerId: varchar(\"labourer_id\").notNull().references(() => labourers.id, { onDelete: 'cascade' }),\n  workDate: date(\"work_date\").notNull(),\n  openTrenchingMeters: decimal(\"open_trenching_meters\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  closeTrenchingMeters: decimal(\"close_trenching_meters\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  additionalItems: jsonb(\"additional_items\"), // For custom rate items\n  totalEarnings: decimal(\"total_earnings\", { precision: 10, scale: 2 }).notNull(),\n  recordedBy: varchar(\"recorded_by\").notNull().references(() => users.id),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_work_logs_date\").on(table.workDate),\n  index(\"idx_work_logs_labourer\").on(table.labourerId),\n]);\n\nexport const workLogsRelations = relations(workLogs, ({ one }) => ({\n  project: one(projects, {\n    fields: [workLogs.projectId],\n    references: [projects.id],\n  }),\n  labourer: one(labourers, {\n    fields: [workLogs.labourerId],\n    references: [labourers.id],\n  }),\n  recorder: one(users, {\n    fields: [workLogs.recordedBy],\n    references: [users.id],\n  }),\n}));\n\n// Payment period status enum\nexport const paymentPeriodStatusEnum = pgEnum(\"payment_period_status\", [\n  \"open\",\n  \"submitted\",\n  \"approved\",\n  \"rejected\",\n  \"paid\"\n]);\n\n// Payment periods table\nexport const paymentPeriods = pgTable(\"payment_periods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id, { onDelete: 'cascade' }),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  status: paymentPeriodStatusEnum(\"status\").notNull().default(\"open\"),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull().default(\"0\"),\n  submittedBy: varchar(\"submitted_by\").references(() => users.id),\n  submittedAt: timestamp(\"submitted_at\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_payment_periods_dates\").on(table.startDate, table.endDate),\n]);\n\nexport const paymentPeriodsRelations = relations(paymentPeriods, ({ one, many }) => ({\n  project: one(projects, {\n    fields: [paymentPeriods.projectId],\n    references: [projects.id],\n  }),\n  submitter: one(users, {\n    fields: [paymentPeriods.submittedBy],\n    references: [users.id],\n  }),\n  approver: one(users, {\n    fields: [paymentPeriods.approvedBy],\n    references: [users.id],\n  }),\n  entries: many(paymentPeriodEntries),\n}));\n\n// Payment period entries table\nexport const paymentPeriodEntries = pgTable(\"payment_period_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  periodId: varchar(\"period_id\").notNull().references(() => paymentPeriods.id, { onDelete: 'cascade' }),\n  labourerId: varchar(\"labourer_id\").notNull().references(() => labourers.id, { onDelete: 'cascade' }),\n  daysWorked: integer(\"days_worked\").notNull().default(0),\n  openMeters: decimal(\"open_meters\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  closeMeters: decimal(\"close_meters\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  totalMeters: decimal(\"total_meters\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  totalEarnings: decimal(\"total_earnings\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const paymentPeriodEntriesRelations = relations(paymentPeriodEntries, ({ one }) => ({\n  period: one(paymentPeriods, {\n    fields: [paymentPeriodEntries.periodId],\n    references: [paymentPeriods.id],\n  }),\n  labourer: one(labourers, {\n    fields: [paymentPeriodEntries.labourerId],\n    references: [labourers.id],\n  }),\n}));\n\n// Correction request status enum\nexport const correctionStatusEnum = pgEnum(\"correction_status\", [\n  \"pending\",\n  \"approved\",\n  \"rejected\"\n]);\n\n// Correction requests table (audit trail)\nexport const correctionRequests = pgTable(\"correction_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(), // e.g., \"work_log\", \"labourer\"\n  entityId: varchar(\"entity_id\").notNull(),\n  fieldName: varchar(\"field_name\", { length: 100 }).notNull(),\n  oldValue: text(\"old_value\"),\n  newValue: text(\"new_value\").notNull(),\n  reason: text(\"reason\").notNull(),\n  status: correctionStatusEnum(\"status\").notNull().default(\"pending\"),\n  requestedBy: varchar(\"requested_by\").notNull().references(() => users.id),\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n}, (table) => [\n  index(\"idx_correction_requests_status\").on(table.status),\n  index(\"idx_correction_requests_entity\").on(table.entityType, table.entityId),\n]);\n\nexport const correctionRequestsRelations = relations(correctionRequests, ({ one }) => ({\n  requester: one(users, {\n    fields: [correctionRequests.requestedBy],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [correctionRequests.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\n// Type exports\nexport type UpsertUser = typeof users.$inferInsert;\n\nexport type InsertEmployeeType = typeof employeeTypes.$inferInsert;\nexport type EmployeeType = typeof employeeTypes.$inferSelect;\n\nexport type InsertProject = typeof projects.$inferInsert;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertPayRate = typeof payRates.$inferInsert;\nexport type PayRate = typeof payRates.$inferSelect;\n\nexport type InsertLabourer = typeof labourers.$inferInsert;\nexport type Labourer = typeof labourers.$inferSelect;\n\nexport type InsertWorkLog = typeof workLogs.$inferInsert;\nexport type WorkLog = typeof workLogs.$inferSelect;\n\nexport type InsertPaymentPeriod = typeof paymentPeriods.$inferInsert;\nexport type PaymentPeriod = typeof paymentPeriods.$inferSelect;\n\nexport type InsertPaymentPeriodEntry = typeof paymentPeriodEntries.$inferInsert;\nexport type PaymentPeriodEntry = typeof paymentPeriodEntries.$inferSelect;\n\nexport type InsertCorrectionRequest = typeof correctionRequests.$inferInsert;\nexport type CorrectionRequest = typeof correctionRequests.$inferSelect;\n\n// Zod schemas for validation\nexport const insertEmployeeTypeSchema = createInsertSchema(employeeTypes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  startDate: true,\n  defaultOpenRate: true,\n  defaultCloseRate: true,\n});\n\nexport const insertPayRateSchema = createInsertSchema(payRates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLabourerSchema = createInsertSchema(labourers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // South African ID validation: 13 digits\n  idNumber: z.string().regex(/^[0-9]{13}$|^[A-Z0-9]{6-9}$/, \"Must be valid SA ID (13 digits) or Passport (6-9 characters)\"),\n  // South African phone number validation\n  contactNumber: z.string().regex(/^(\\+27|0)[0-9]{9}$/, \"Must be valid SA phone number\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  // Transform empty string to null for optional project assignment\n  projectId: z.preprocess(\n    val => val === \"\" || val === undefined || val === null ? null : val,\n    z.string().nullable()\n  ),\n});\n\nexport const insertWorkLogSchema = createInsertSchema(workLogs).omit({\n  id: true,\n  recordedAt: true,\n});\n\nexport const insertPaymentPeriodSchema = createInsertSchema(paymentPeriods).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  submittedAt: true,\n  approvedAt: true,\n});\n\nexport const insertCorrectionRequestSchema = createInsertSchema(correctionRequests).omit({\n  id: true,\n  requestedAt: true,\n  reviewedAt: true,\n});\n\nexport const updateUserRoleSchema = z.object({\n  role: z.enum([\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\", \"labourer\"]),\n});\n\nexport const updateUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\").optional(),\n  lastName: z.string().min(1, \"Last name is required\").optional(),\n  email: z.string().email(\"Invalid email address\").optional(),\n  role: z.enum([\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\", \"labourer\"]).optional(),\n});","size_bytes":17541},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ProjectManagerDashboard.tsx":{"content":"import StatCard from \"./StatCard\";\nimport ProjectCard from \"./ProjectCard\";\nimport PaymentPeriodCard from \"./PaymentPeriodCard\";\nimport { Briefcase, Users, DollarSign, Clock } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Project {\n  id: string;\n  name: string;\n  location?: string;\n  budget?: number;\n  status: \"active\" | \"completed\" | \"on_hold\";\n  labourerCount: number;\n  supervisorCount: number;\n}\n\ninterface PaymentPeriod {\n  id: string;\n  startDate: string;\n  endDate: string;\n  status: \"pending\" | \"approved\" | \"paid\";\n  totalAmount: number;\n  labourerCount: number;\n}\n\ninterface ProjectManagerDashboardProps {\n  projects: Project[];\n  paymentPeriods: PaymentPeriod[];\n  stats: {\n    totalProjects: number;\n    pendingApprovals: number;\n    totalBudget: number;\n    activeSupervisors: number;\n  };\n}\n\nexport default function ProjectManagerDashboard({\n  projects,\n  paymentPeriods,\n  stats\n}: ProjectManagerDashboardProps) {\n  const handleViewProject = (id: string) => console.log('View project:', id);\n  const handleViewPeriod = (id: string) => console.log('View period:', id);\n  const handleApprovePeriod = (id: string) => console.log('Approve period:', id);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-project-manager\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Project Manager Dashboard</h1>\n        <p className=\"text-muted-foreground\">Manage projects and approve payments</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatCard\n          title=\"Projects Managed\"\n          value={stats.totalProjects}\n          icon={Briefcase}\n        />\n        <StatCard\n          title=\"Pending Approvals\"\n          value={stats.pendingApprovals}\n          icon={Clock}\n        />\n        <StatCard\n          title=\"Total Budget\"\n          value={`R ${stats.totalBudget.toLocaleString()}`}\n          icon={DollarSign}\n        />\n        <StatCard\n          title=\"Active Supervisors\"\n          value={stats.activeSupervisors}\n          icon={Users}\n        />\n      </div>\n\n      <Tabs defaultValue=\"projects\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"projects\" data-testid=\"tab-projects\">Projects</TabsTrigger>\n          <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">Payment Requests</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"projects\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {projects.map(project => (\n              <ProjectCard\n                key={project.id}\n                {...project}\n                onView={handleViewProject}\n              />\n            ))}\n          </div>\n        </TabsContent>\n        <TabsContent value=\"payments\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {paymentPeriods.map(period => (\n              <PaymentPeriodCard\n                key={period.id}\n                {...period}\n                onView={handleViewPeriod}\n                onApprove={period.status === 'pending' ? handleApprovePeriod : undefined}\n              />\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":3323},"client/src/components/examples/ProjectManagerDashboard.tsx":{"content":"import ProjectManagerDashboard from '../ProjectManagerDashboard';\n\nexport default function ProjectManagerDashboardExample() {\n  const projects = [\n    {\n      id: '1',\n      name: 'BPM 605',\n      location: 'Somerset East',\n      budget: 250000,\n      status: 'active' as const,\n      labourerCount: 24,\n      supervisorCount: 2\n    },\n    {\n      id: '2',\n      name: 'Fibre Deployment Phase 2',\n      location: 'Port Elizabeth',\n      budget: 180000,\n      status: 'active' as const,\n      labourerCount: 18,\n      supervisorCount: 1\n    },\n    {\n      id: '3',\n      name: 'Network Extension',\n      location: 'Grahamstown',\n      status: 'on_hold' as const,\n      labourerCount: 0,\n      supervisorCount: 1\n    }\n  ];\n\n  const paymentPeriods = [\n    {\n      id: '1',\n      startDate: 'Dec 1',\n      endDate: 'Dec 14',\n      status: 'pending' as const,\n      totalAmount: 45230,\n      labourerCount: 24\n    },\n    {\n      id: '2',\n      startDate: 'Nov 15',\n      endDate: 'Nov 28',\n      status: 'approved' as const,\n      totalAmount: 38750,\n      labourerCount: 22\n    }\n  ];\n\n  const stats = {\n    totalProjects: 8,\n    pendingApprovals: 2,\n    totalBudget: 1250000,\n    activeSupervisors: 5\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <ProjectManagerDashboard\n        projects={projects}\n        paymentPeriods={paymentPeriods}\n        stats={stats}\n      />\n    </div>\n  );\n}","size_bytes":1407},"attached_assets/tailwind.config_1761683348008.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/examples/DailyWorkSheet.tsx":{"content":"import DailyWorkSheet from '../DailyWorkSheet';\n\nexport default function DailyWorkSheetExample() {\n  const labourers = [\n    {\n      labourerId: '1',\n      labourerName: 'Thabo Mthembu',\n      openMeters: 15.5,\n      closeMeters: 12.0,\n      openRate: 25,\n      closeRate: 20\n    },\n    {\n      labourerId: '2',\n      labourerName: 'Sipho Ndlovu',\n      openMeters: 18.0,\n      closeMeters: 15.5,\n      openRate: 25,\n      closeRate: 20\n    },\n    {\n      labourerId: '3',\n      labourerName: 'Mandla Khumalo',\n      openMeters: 14.0,\n      closeMeters: 11.0,\n      openRate: 25,\n      closeRate: 20\n    }\n  ];\n\n  const handleSave = (date: Date, entries: any[]) => {\n    console.log('Saved work sheet:', date, entries);\n  };\n\n  return (\n    <div className=\"p-6 max-w-4xl\">\n      <DailyWorkSheet\n        projectName=\"BPM 605\"\n        labourers={labourers}\n        onSave={handleSave}\n      />\n    </div>\n  );\n}","size_bytes":909},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"attached_assets/vite.config_1761683348009.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isLabourerAuthenticated, requireRole } from \"./replitAuth\";\nimport bcrypt from \"bcrypt\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport {\n  insertEmployeeTypeSchema,\n  insertProjectSchema,\n  insertLabourerSchema,\n  insertPayRateSchema,\n  insertWorkLogSchema,\n  insertPaymentPeriodSchema,\n  insertCorrectionRequestSchema,\n  updateUserRoleSchema,\n  updateUserSchema,\n  paymentPeriodEntries,\n  paymentPeriods,\n  projects,\n  labourers,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // ============= Authentication Routes =============\n  app.get('/api/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // Look up by email (not sub) to handle OIDC sub rotation\n      const userEmail = req.user.claims.email;\n      const user = await storage.getUserByEmail(userEmail);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // Look up by email (not sub) to handle OIDC sub rotation\n      const userEmail = req.user.claims.email;\n      const user = await storage.getUserByEmail(userEmail);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // ============= User Management Routes =============\n  app.get('/api/users', isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/users/:id', isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req: any, res) => {\n    try {\n      const updateData = updateUserSchema.parse(req.body);\n      \n      // Users cannot edit themselves\n      if (req.params.id === req.dbUser.id) {\n        return res.status(403).json({ \n          message: \"You cannot edit your own user account\" \n        });\n      }\n      \n      // Admins cannot assign super_admin role - only super_admin can do that\n      if (req.dbUser.role === \"admin\" && updateData.role === \"super_admin\") {\n        return res.status(403).json({ \n          message: \"Only Super Admins can assign the Super Admin role\" \n        });\n      }\n      \n      const user = await storage.updateUser(req.params.id, updateData);\n      res.json(user);\n    } catch (error: any) {\n      console.error(\"Error updating user:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update user\" });\n    }\n  });\n\n  // ============= Object Storage Routes =============\n  // Serve public objects\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Serve private objects with ACL check\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n      });\n      if (!canAccess) {\n        return res.sendStatus(403);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  // Update object ACL after upload\n  app.put(\"/api/objects/acl\", isAuthenticated, async (req: any, res) => {\n    if (!req.body.objectURL) {\n      return res.status(400).json({ error: \"objectURL is required\" });\n    }\n\n    // Validate visibility - default to private for security\n    const visibility = req.body.visibility || \"private\";\n    if (visibility !== \"public\" && visibility !== \"private\") {\n      return res.status(400).json({ error: \"visibility must be 'public' or 'private'\" });\n    }\n\n    // Only admins, project managers, and super admins can set visibility to public\n    const userId = req.user?.claims?.sub;\n    const user = await storage.getUser(userId);\n    \n    if (visibility === \"public\") {\n      const allowedRoles = [\"super_admin\", \"admin\", \"project_manager\"];\n      if (!user || !allowedRoles.includes(user.role)) {\n        return res.status(403).json({ error: \"Insufficient permissions to set public visibility\" });\n      }\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.objectURL,\n        {\n          owner: userId,\n          visibility: visibility,\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error setting object ACL:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // ============= Employee Type Routes =============\n  app.get(\"/api/employee-types\", isAuthenticated, async (req, res) => {\n    try {\n      const types = await storage.getEmployeeTypes();\n      res.json(types);\n    } catch (error) {\n      console.error(\"Error fetching employee types:\", error);\n      res.status(500).json({ message: \"Failed to fetch employee types\" });\n    }\n  });\n\n  app.post(\"/api/employee-types\", isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req: any, res) => {\n    try {\n      const data = insertEmployeeTypeSchema.parse(req.body);\n      const type = await storage.createEmployeeType(data);\n      res.status(201).json(type);\n    } catch (error: any) {\n      console.error(\"Error creating employee type:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create employee type\" });\n    }\n  });\n\n  app.put(\"/api/employee-types/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req: any, res) => {\n    try {\n      const data = insertEmployeeTypeSchema.partial().parse(req.body);\n      const type = await storage.updateEmployeeType(req.params.id, data);\n      res.json(type);\n    } catch (error: any) {\n      console.error(\"Error updating employee type:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update employee type\" });\n    }\n  });\n\n  app.delete(\"/api/employee-types/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req: any, res) => {\n    try {\n      const existingType = await storage.getEmployeeType(req.params.id);\n      if (!existingType) {\n        return res.status(404).json({ message: \"Employee type not found\" });\n      }\n      if (!existingType.isActive) {\n        // Already inactive - idempotent response\n        return res.json({ message: \"Employee type already deactivated\" });\n      }\n      await storage.updateEmployeeType(req.params.id, { isActive: false });\n      res.json({ message: \"Employee type deactivated successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deactivating employee type:\", error);\n      res.status(500).json({ message: error.message || \"Failed to deactivate employee type\" });\n    }\n  });\n\n  // ============= Project Routes =============\n  app.get(\"/api/projects\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Look up by email (not sub) to handle OIDC sub rotation\n      const userEmail = req.user.claims.email;\n      const user = await storage.getUserByEmail(userEmail);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      let projects: any[] = [];\n      if (user.role === \"super_admin\" || user.role === \"admin\") {\n        projects = await storage.getProjects();\n      } else if (user.role === \"project_manager\") {\n        projects = await storage.getProjectsByManager(user.id);\n      } else if (user.role === \"supervisor\") {\n        projects = await storage.getProjectsBySupervisor(user.id);\n      } else {\n        // Labourers can only see their assigned project\n        const labourer = await storage.getLabourerByUserId(user.id);\n        if (labourer && labourer.projectId) {\n          const project = await storage.getProject(labourer.projectId);\n          projects = project ? [project] : [];\n        }\n      }\n      \n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id/managers\", isAuthenticated, async (req, res) => {\n    try {\n      const managers = await storage.getProjectManagers(req.params.id);\n      res.json(managers);\n    } catch (error) {\n      console.error(\"Error fetching project managers:\", error);\n      res.status(500).json({ message: \"Failed to fetch project managers\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id/supervisors\", isAuthenticated, async (req, res) => {\n    try {\n      const supervisors = await storage.getProjectSupervisors(req.params.id);\n      res.json(supervisors);\n    } catch (error) {\n      console.error(\"Error fetching project supervisors:\", error);\n      res.status(500).json({ message: \"Failed to fetch project supervisors\" });\n    }\n  });\n\n  app.post(\"/api/projects\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const { supervisorId, ...projectData } = req.body;\n      const data = insertProjectSchema.parse({ ...projectData, createdBy: userId });\n      const project = await storage.createProject(data);\n      \n      // If supervisorId is provided, assign them to the project\n      if (supervisorId) {\n        await storage.assignProjectSupervisor(project.id, supervisorId);\n      }\n      \n      res.status(201).json(project);\n    } catch (error: any) {\n      console.error(\"Error creating project:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create project\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req: any, res) => {\n    try {\n      const data = insertProjectSchema.partial().parse(req.body);\n      \n      // Project managers can only update status, not other fields\n      if (req.dbUser.role === \"project_manager\") {\n        const allowedFields = [\"status\"];\n        const submittedFields = Object.keys(data);\n        const unauthorizedFields = submittedFields.filter(field => !allowedFields.includes(field));\n        \n        if (unauthorizedFields.length > 0) {\n          return res.status(403).json({ \n            message: `Project managers can only update status. Unauthorized fields: ${unauthorizedFields.join(\", \")}` \n          });\n        }\n      }\n      \n      const project = await storage.updateProject(req.params.id, data);\n      res.json(project);\n    } catch (error: any) {\n      console.error(\"Error updating project:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update project\" });\n    }\n  });\n\n  // Assign project manager\n  app.post(\"/api/projects/:id/managers\", isAuthenticated, requireRole(\"super_admin\", \"admin\"), async (req, res) => {\n    try {\n      if (!req.body.userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      \n      const result = await storage.assignProjectManager(req.params.id, req.body.userId);\n      \n      if (result.alreadyAssigned) {\n        return res.status(200).json({ message: \"Manager already assigned\", alreadyAssigned: true });\n      }\n      \n      res.status(201).json({ message: \"Manager assigned successfully\", alreadyAssigned: false });\n    } catch (error) {\n      console.error(\"Error assigning manager:\", error);\n      res.status(500).json({ message: \"Failed to assign manager\" });\n    }\n  });\n\n  // Assign project supervisor\n  app.post(\"/api/projects/:id/supervisors\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req, res) => {\n    try {\n      if (!req.body.userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      \n      const result = await storage.assignProjectSupervisor(req.params.id, req.body.userId);\n      \n      if (result.alreadyAssigned) {\n        return res.status(200).json({ message: \"Supervisor already assigned\", alreadyAssigned: true });\n      }\n      \n      res.status(201).json({ message: \"Supervisor assigned successfully\", alreadyAssigned: false });\n    } catch (error) {\n      console.error(\"Error assigning supervisor:\", error);\n      res.status(500).json({ message: \"Failed to assign supervisor\" });\n    }\n  });\n\n  // ============= Labourer Routes =============\n  app.get(\"/api/projects/:projectId/labourers\", isAuthenticated, async (req, res) => {\n    try {\n      const labourers = await storage.getLabourers(req.params.projectId);\n      res.json(labourers);\n    } catch (error) {\n      console.error(\"Error fetching labourers:\", error);\n      res.status(500).json({ message: \"Failed to fetch labourers\" });\n    }\n  });\n\n  app.get(\"/api/labourers/available\", isAuthenticated, async (req, res) => {\n    try {\n      const labourers = await storage.getAvailableLabourers();\n      res.json(labourers);\n    } catch (error) {\n      console.error(\"Error fetching available labourers:\", error);\n      res.status(500).json({ message: \"Failed to fetch available labourers\" });\n    }\n  });\n\n  app.get(\"/api/labourers/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const labourer = await storage.getLabourer(req.params.id);\n      if (!labourer) {\n        return res.status(404).json({ message: \"Labourer not found\" });\n      }\n      res.json(labourer);\n    } catch (error) {\n      console.error(\"Error fetching labourer:\", error);\n      res.status(500).json({ message: \"Failed to fetch labourer\" });\n    }\n  });\n\n  app.post(\"/api/labourers\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const data = insertLabourerSchema.parse({ ...req.body, createdBy: userId });\n      \n      // Hash the ID number for password authentication (only if idNumber exists and is non-empty)\n      if (data.idNumber && data.idNumber.trim()) {\n        const passwordHash = await bcrypt.hash(data.idNumber.trim(), 10);\n        data.passwordHash = passwordHash;\n      }\n      \n      const labourer = await storage.createLabourer(data);\n      res.status(201).json(labourer);\n    } catch (error: any) {\n      console.error(\"Error creating labourer:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create labourer\" });\n    }\n  });\n\n  app.post(\"/api/labourers/bulk\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const { labourers: labourersData } = req.body;\n      \n      if (!labourersData || !Array.isArray(labourersData) || labourersData.length === 0) {\n        return res.status(400).json({ message: \"labourers array is required and must not be empty\" });\n      }\n\n      // Validate, add createdBy, and hash passwords for each labourer\n      const validatedData = await Promise.all(\n        labourersData.map(async (labourer) => {\n          const data = insertLabourerSchema.parse({ ...labourer, createdBy: userId });\n          \n          // Hash the ID number for password authentication (only if idNumber exists and is non-empty)\n          if (data.idNumber && data.idNumber.trim()) {\n            data.passwordHash = await bcrypt.hash(data.idNumber.trim(), 10);\n          }\n          \n          return data;\n        })\n      );\n      \n      const created = await storage.bulkCreateLabourers(validatedData);\n      res.status(201).json({ \n        message: `Successfully created ${created.length} labourers`,\n        labourers: created \n      });\n    } catch (error: any) {\n      console.error(\"Error bulk creating labourers:\", error);\n      res.status(400).json({ message: error.message || \"Failed to bulk create labourers\" });\n    }\n  });\n\n  app.put(\"/api/labourers/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"), async (req, res) => {\n    try {\n      const data = insertLabourerSchema.partial().parse(req.body);\n      const labourer = await storage.updateLabourer(req.params.id, data);\n      res.json(labourer);\n    } catch (error: any) {\n      console.error(\"Error updating labourer:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update labourer\" });\n    }\n  });\n\n  app.post(\"/api/projects/:projectId/labourers\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"), async (req, res) => {\n    try {\n      const { labourerIds } = req.body;\n      \n      if (!labourerIds || !Array.isArray(labourerIds) || labourerIds.length === 0) {\n        return res.status(400).json({ message: \"labourerIds array is required\" });\n      }\n      \n      await storage.assignLabourersToProject(labourerIds, req.params.projectId);\n      res.status(200).json({ message: \"Labourers assigned successfully\" });\n    } catch (error: any) {\n      console.error(\"Error assigning labourers:\", error);\n      res.status(400).json({ message: error.message || \"Failed to assign labourers\" });\n    }\n  });\n\n  // ============= Labourer Portal Routes (for labourer authentication via phone/email) =============\n  // Get labourer's own profile\n  app.get(\"/api/my-labourer-profile\", isLabourerAuthenticated, async (req: any, res) => {\n    try {\n      res.json(req.labourer);\n    } catch (error) {\n      console.error(\"Error fetching labourer profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  // Get labourer's own work logs\n  app.get(\"/api/my-work-logs\", isLabourerAuthenticated, async (req: any, res) => {\n    try {\n      const workLogs = await storage.getWorkLogsByLabourer(req.labourer.id);\n      res.json(workLogs);\n    } catch (error) {\n      console.error(\"Error fetching work logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch work logs\" });\n    }\n  });\n\n  // Get labourer's payment entries across all payment periods\n  app.get(\"/api/my-payments\", isLabourerAuthenticated, async (req: any, res) => {\n    try {\n      // Get all payment period entries for this labourer\n      const entries = await db\n        .select({\n          entry: paymentPeriodEntries,\n          period: paymentPeriods,\n          project: projects,\n        })\n        .from(paymentPeriodEntries)\n        .innerJoin(paymentPeriods, eq(paymentPeriodEntries.periodId, paymentPeriods.id))\n        .innerJoin(projects, eq(paymentPeriods.projectId, projects.id))\n        .where(eq(paymentPeriodEntries.labourerId, req.labourer.id))\n        .orderBy(desc(paymentPeriods.endDate));\n      \n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching payment entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment information\" });\n    }\n  });\n\n  // Get labourer's current period summary (for dashboard)\n  app.get(\"/api/my-current-period\", isLabourerAuthenticated, async (req: any, res) => {\n    try {\n      const labourerId = req.labourer.id;\n      const today = new Date();\n      \n      // Get all work logs for this labourer\n      const workLogs = await storage.getWorkLogsByLabourer(labourerId);\n      \n      // Get the labourer's current project\n      const labourer = req.labourer;\n      \n      // Find the current open or submitted payment period for the labourer's project\n      let currentPeriod: any = null;\n      let nextPaymentDate: string | null = null;\n      let currentPeriodEarnings = 0;\n      let daysWorkedThisPeriod = 0;\n      let totalMetersThisPeriod = 0;\n      \n      if (labourer.projectId) {\n        const periods = await db\n          .select()\n          .from(paymentPeriods)\n          .where(eq(paymentPeriods.projectId, labourer.projectId))\n          .orderBy(desc(paymentPeriods.endDate));\n        \n        // Find the current period (open or submitted)\n        currentPeriod = periods.find(p => p.status === 'open' || p.status === 'submitted');\n        \n        if (currentPeriod) {\n          nextPaymentDate = currentPeriod.endDate;\n          \n          // Calculate metrics for current period\n          const periodWorkLogs = workLogs.filter(log => {\n            const logDate = new Date(log.workDate);\n            return logDate >= new Date(currentPeriod.startDate) && \n                   logDate <= new Date(currentPeriod.endDate);\n          });\n          \n          currentPeriodEarnings = periodWorkLogs.reduce((sum, log) => \n            sum + (Number(log.totalEarnings) || 0), 0);\n          daysWorkedThisPeriod = periodWorkLogs.length;\n          totalMetersThisPeriod = periodWorkLogs.reduce((sum, log) => \n            sum + (Number(log.openTrenchingMeters) || 0) + (Number(log.closeTrenchingMeters) || 0), 0);\n        }\n      }\n      \n      res.json({\n        currentPeriodEarnings,\n        daysWorkedThisPeriod,\n        totalMetersThisPeriod,\n        nextPaymentDate,\n      });\n    } catch (error) {\n      console.error(\"Error fetching current period:\", error);\n      res.status(500).json({ message: \"Failed to fetch current period data\" });\n    }\n  });\n\n  // ============= Reports Routes =============\n  app.get(\"/api/reports/payroll\", isAuthenticated, async (req, res) => {\n    try {\n      const { projectId, startDate, endDate } = req.query;\n\n      if (!projectId || !startDate || !endDate) {\n        return res.status(400).json({ message: \"projectId, startDate, and endDate are required\" });\n      }\n\n      const project = await storage.getProject(projectId as string);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Get all work logs for the project within the date range\n      const workLogs = await storage.getWorkLogsByDateRange(\n        projectId as string,\n        startDate as string,\n        endDate as string\n      );\n\n      // Get all labourers in the project\n      const labourers = await storage.getLabourers(projectId as string);\n\n      // Get pay rates for the project\n      const payRates = await storage.getPayRates(projectId as string);\n\n      // Aggregate work logs by labourer\n      const labourerTotals = new Map<string, {\n        labourerId: string;\n        labourerName: string;\n        idNumber: string;\n        totalOpenMeters: number;\n        totalCloseMeters: number;\n        totalEarnings: number;\n      }>();\n\n      workLogs.forEach((log: any) => {\n        const existing = labourerTotals.get(log.labourerId) || {\n          labourerId: log.labourerId,\n          labourerName: \"\",\n          idNumber: \"\",\n          totalOpenMeters: 0,\n          totalCloseMeters: 0,\n          totalEarnings: 0,\n        };\n\n        existing.totalOpenMeters += parseFloat(log.openTrenchingMeters || \"0\");\n        existing.totalCloseMeters += parseFloat(log.closeTrenchingMeters || \"0\");\n        existing.totalEarnings += parseFloat(log.totalEarnings || \"0\");\n\n        labourerTotals.set(log.labourerId, existing);\n      });\n\n      // Enrich with labourer details\n      const entries = Array.from(labourerTotals.values()).map(entry => {\n        const labourer = labourers.find((l: any) => l.id === entry.labourerId);\n        return {\n          ...entry,\n          labourerName: labourer ? `${labourer.firstName} ${labourer.surname}` : \"Unknown\",\n          idNumber: labourer?.idNumber || \"\",\n        };\n      });\n\n      // Calculate grand total\n      const grandTotal = entries.reduce((sum, entry) => sum + entry.totalEarnings, 0);\n\n      // Get average rates (simplified - using first rate found for each category)\n      const openRate = payRates.find((r: any) => r.category === \"open_trenching\");\n      const closeRate = payRates.find((r: any) => r.category === \"close_trenching\");\n\n      const report = {\n        projectId: project.id,\n        projectName: project.name,\n        startDate,\n        endDate,\n        paymentPeriod: project.paymentPeriod,\n        openRate: openRate ? parseFloat(openRate.amount) : 0,\n        closeRate: closeRate ? parseFloat(closeRate.amount) : 0,\n        entries,\n        grandTotal,\n      };\n\n      res.json(report);\n    } catch (error: any) {\n      console.error(\"Error generating payroll report:\", error);\n      res.status(500).json({ message: error.message || \"Failed to generate report\" });\n    }\n  });\n\n  // Worker Activity Report - detailed daily breakdown\n  app.get(\"/api/reports/worker-activity\", isAuthenticated, async (req, res) => {\n    try {\n      const { projectId, labourerId, startDate, endDate, groupBy = 'daily' } = req.query;\n\n      if (!projectId || !startDate || !endDate) {\n        return res.status(400).json({ message: \"projectId, startDate, and endDate are required\" });\n      }\n\n      const project = await storage.getProject(projectId as string);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Get work logs for the date range\n      let workLogs = await storage.getWorkLogsByDateRange(\n        projectId as string,\n        startDate as string,\n        endDate as string\n      );\n\n      // Filter by labourer if specified\n      if (labourerId && labourerId !== 'all') {\n        workLogs = workLogs.filter(log => log.labourerId === labourerId);\n      }\n\n      // Get all labourers to enrich data\n      const labourers = await storage.getLabourers(projectId as string);\n      const labourerMap = new Map(labourers.map((l: any) => [l.id, l]));\n\n      // Enrich work logs with labourer details\n      const enrichedLogs = workLogs.map(log => {\n        const labourer = labourerMap.get(log.labourerId);\n        return {\n          workDate: log.workDate,\n          labourerId: log.labourerId,\n          labourerName: labourer ? `${labourer.firstName} ${labourer.surname}` : \"Unknown\",\n          idNumber: labourer?.idNumber || \"\",\n          openMeters: parseFloat(log.openTrenchingMeters || \"0\"),\n          closeMeters: parseFloat(log.closeTrenchingMeters || \"0\"),\n          totalMeters: parseFloat(log.openTrenchingMeters || \"0\") + parseFloat(log.closeTrenchingMeters || \"0\"),\n          earnings: parseFloat(log.totalEarnings || \"0\"),\n        };\n      });\n\n      // Group by requested period\n      let groupedData: any[] = [];\n      \n      if (groupBy === 'daily') {\n        // Already daily - just return enriched logs\n        groupedData = enrichedLogs;\n      } else if (groupBy === 'weekly') {\n        // Group by week\n        const weeklyMap = new Map<string, any>();\n        enrichedLogs.forEach(log => {\n          const date = new Date(log.workDate);\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay()); // Start of week (Sunday)\n          const weekKey = `${log.labourerId}-${weekStart.toISOString().split('T')[0]}`;\n          \n          const existing = weeklyMap.get(weekKey) || {\n            weekStart: weekStart.toISOString().split('T')[0],\n            labourerId: log.labourerId,\n            labourerName: log.labourerName,\n            idNumber: log.idNumber,\n            openMeters: 0,\n            closeMeters: 0,\n            totalMeters: 0,\n            earnings: 0,\n            daysWorked: 0,\n          };\n          \n          existing.openMeters += log.openMeters;\n          existing.closeMeters += log.closeMeters;\n          existing.totalMeters += log.totalMeters;\n          existing.earnings += log.earnings;\n          existing.daysWorked += 1;\n          \n          weeklyMap.set(weekKey, existing);\n        });\n        groupedData = Array.from(weeklyMap.values());\n      } else if (groupBy === 'monthly') {\n        // Group by month\n        const monthlyMap = new Map<string, any>();\n        enrichedLogs.forEach(log => {\n          const date = new Date(log.workDate);\n          const monthKey = `${log.labourerId}-${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          \n          const existing = monthlyMap.get(monthKey) || {\n            month: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,\n            labourerId: log.labourerId,\n            labourerName: log.labourerName,\n            idNumber: log.idNumber,\n            openMeters: 0,\n            closeMeters: 0,\n            totalMeters: 0,\n            earnings: 0,\n            daysWorked: 0,\n          };\n          \n          existing.openMeters += log.openMeters;\n          existing.closeMeters += log.closeMeters;\n          existing.totalMeters += log.totalMeters;\n          existing.earnings += log.earnings;\n          existing.daysWorked += 1;\n          \n          monthlyMap.set(monthKey, existing);\n        });\n        groupedData = Array.from(monthlyMap.values());\n      }\n\n      // Calculate totals\n      const totalOpenMeters = groupedData.reduce((sum, row) => sum + row.openMeters, 0);\n      const totalCloseMeters = groupedData.reduce((sum, row) => sum + row.closeMeters, 0);\n      const totalMeters = groupedData.reduce((sum, row) => sum + row.totalMeters, 0);\n      const totalEarnings = groupedData.reduce((sum, row) => sum + row.earnings, 0);\n\n      res.json({\n        projectId: project.id,\n        projectName: project.name,\n        startDate,\n        endDate,\n        groupBy,\n        data: groupedData,\n        totals: {\n          openMeters: totalOpenMeters,\n          closeMeters: totalCloseMeters,\n          totalMeters,\n          earnings: totalEarnings,\n        },\n      });\n    } catch (error: any) {\n      console.error(\"Error generating worker activity report:\", error);\n      res.status(500).json({ message: error.message || \"Failed to generate worker activity report\" });\n    }\n  });\n\n  // Worker Activity Matrix - pivot table with workers as rows, dates as columns\n  app.get(\"/api/reports/worker-activity-matrix\", isAuthenticated, async (req, res) => {\n    try {\n      const { projectId, startDate, endDate, metricType = 'total' } = req.query;\n\n      if (!projectId || !startDate || !endDate) {\n        return res.status(400).json({ message: \"projectId, startDate, and endDate are required\" });\n      }\n\n      const project = await storage.getProject(projectId as string);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Get work logs for the date range\n      const workLogs = await storage.getWorkLogsByDateRange(\n        projectId as string,\n        startDate as string,\n        endDate as string\n      );\n\n      // Get all labourers for the project\n      const labourers = await storage.getLabourers(projectId as string);\n      const labourerMap = new Map(labourers.map((l: any) => [l.id, l]));\n\n      // Generate all dates in the range\n      const start = new Date(startDate as string);\n      const end = new Date(endDate as string);\n      const dates: string[] = [];\n      for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n        dates.push(d.toISOString().split('T')[0]);\n      }\n\n      // Build matrix data structure\n      // Map: labourerId -> Map: date -> { opens, closes, total, earnings }\n      const matrixData = new Map<string, Map<string, { opens: number; closes: number; total: number; earnings: number }>>();\n\n      workLogs.forEach((log: any) => {\n        if (!matrixData.has(log.labourerId)) {\n          matrixData.set(log.labourerId, new Map());\n        }\n        \n        const labourerDates = matrixData.get(log.labourerId)!;\n        const opens = parseFloat(log.openTrenchingMeters || \"0\");\n        const closes = parseFloat(log.closeTrenchingMeters || \"0\");\n        const earnings = parseFloat(log.totalEarnings || \"0\");\n        \n        labourerDates.set(log.workDate, {\n          opens,\n          closes,\n          total: opens + closes,\n          earnings\n        });\n      });\n\n      // Convert to array format for frontend\n      const rows = Array.from(matrixData.entries()).map(([labourerId, dateMap]) => {\n        const labourer = labourerMap.get(labourerId);\n        const labourerName = labourer ? `${labourer.firstName} ${labourer.surname}` : \"Unknown\";\n        const idNumber = labourer?.idNumber || \"\";\n        \n        // Build daily values array\n        const dailyValues = dates.map(date => {\n          const work = dateMap.get(date);\n          return work ? {\n            opens: work.opens,\n            closes: work.closes,\n            total: work.total\n          } : {\n            opens: 0,\n            closes: 0,\n            total: 0\n          };\n        });\n\n        // Calculate row totals\n        const opens = dailyValues.reduce((sum, day) => sum + day.opens, 0);\n        const closes = dailyValues.reduce((sum, day) => sum + day.closes, 0);\n        const total = dailyValues.reduce((sum, day) => sum + day.total, 0);\n        \n        // Calculate total earnings by summing from work logs\n        let totalAmount = 0;\n        for (const date of dates) {\n          const dayWork = dateMap.get(date);\n          if (dayWork) {\n            totalAmount += dayWork.earnings;\n          }\n        }\n\n        return {\n          labourerId,\n          labourerName,\n          idNumber,\n          dailyValues,\n          rowTotals: {\n            opens,\n            closes,\n            total,\n            totalAmount\n          }\n        };\n      });\n\n      // Sort by labourer name\n      rows.sort((a, b) => a.labourerName.localeCompare(b.labourerName));\n\n      res.json({\n        projectId: project.id,\n        projectName: project.name,\n        startDate,\n        endDate,\n        dates,\n        rows,\n      });\n    } catch (error: any) {\n      console.error(\"Error generating worker activity matrix:\", error);\n      res.status(500).json({ message: error.message || \"Failed to generate worker activity matrix\" });\n    }\n  });\n\n  // ============= Pay Rate Routes =============\n  app.get(\"/api/projects/:projectId/pay-rates\", isAuthenticated, async (req, res) => {\n    try {\n      const rates = await storage.getPayRates(req.params.projectId);\n      res.json(rates);\n    } catch (error) {\n      console.error(\"Error fetching pay rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch pay rates\" });\n    }\n  });\n\n  app.post(\"/api/pay-rates\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const data = insertPayRateSchema.parse({ ...req.body, createdBy: userId });\n      const rate = await storage.createPayRate(data);\n      res.status(201).json(rate);\n    } catch (error: any) {\n      console.error(\"Error creating pay rate:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create pay rate\" });\n    }\n  });\n\n  // ============= Work Log Routes =============\n  app.get(\"/api/projects/:projectId/work-logs\", isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const logs = await storage.getWorkLogs(\n        req.params.projectId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching work logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch work logs\" });\n    }\n  });\n\n  app.get(\"/api/labourers/:labourerId/work-logs\", isAuthenticated, async (req, res) => {\n    try {\n      const logs = await storage.getWorkLogsByLabourer(req.params.labourerId);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching work logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch work logs\" });\n    }\n  });\n\n  app.post(\"/api/work-logs\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const data = insertWorkLogSchema.parse({ ...req.body, recordedBy: userId });\n      \n      // Helper to extract yyyy-MM-dd from any date value without UTC drift\n      const toLocalDateString = (dateValue: any): string => {\n        if (!dateValue) return '';\n        \n        // If string, extract yyyy-MM-dd part only (handles \"2024-01-01\" and \"2024-01-01T...\" formats)\n        if (typeof dateValue === 'string') {\n          const match = dateValue.match(/^(\\d{4})-(\\d{2})-(\\d{2})/);\n          return match ? `${match[1]}-${match[2]}-${match[3]}` : '';\n        }\n        \n        // For Date objects, extract local components (server's \"today\")\n        if (dateValue instanceof Date) {\n          return `${dateValue.getFullYear()}-${String(dateValue.getMonth() + 1).padStart(2, '0')}-${String(dateValue.getDate()).padStart(2, '0')}`;\n        }\n        \n        // Reject all other types (numbers, objects, etc.) to prevent drift\n        return '';\n      };\n      \n      // Server-side validation: Only allow today's date for new work logs (PRD requirement)\n      const today = toLocalDateString(new Date());\n      const workDate = toLocalDateString(data.workDate);\n      \n      if (!workDate) {\n        return res.status(400).json({ message: \"Invalid work date format\" });\n      }\n      \n      if (workDate !== today) {\n        return res.status(400).json({ \n          message: \"Can only create work logs for today. To modify historical data, submit a correction request.\" \n        });\n      }\n      \n      const log = await storage.createWorkLog(data);\n      res.status(201).json(log);\n    } catch (error: any) {\n      console.error(\"Error creating work log:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create work log\" });\n    }\n  });\n\n  app.put(\"/api/work-logs/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req, res) => {\n    try {\n      const data = insertWorkLogSchema.partial().parse(req.body);\n      \n      // Helper to extract yyyy-MM-dd from any date value without UTC drift\n      const toLocalDateString = (dateValue: any): string => {\n        if (!dateValue) return '';\n        \n        // If string, extract yyyy-MM-dd part only (handles \"2024-01-01\" and \"2024-01-01T...\" formats)\n        if (typeof dateValue === 'string') {\n          const match = dateValue.match(/^(\\d{4})-(\\d{2})-(\\d{2})/);\n          return match ? `${match[1]}-${match[2]}-${match[3]}` : '';\n        }\n        \n        // For Date objects, extract local components (server's \"today\")\n        if (dateValue instanceof Date) {\n          return `${dateValue.getFullYear()}-${String(dateValue.getMonth() + 1).padStart(2, '0')}-${String(dateValue.getDate()).padStart(2, '0')}`;\n        }\n        \n        // Reject all other types (numbers, objects, etc.) to prevent drift\n        return '';\n      };\n      \n      // Get today's date in local timezone\n      const today = toLocalDateString(new Date());\n      \n      // Fetch existing work log to validate its date (PRD requirement: only today's logs can be edited)\n      const existingLog = await storage.getWorkLog(req.params.id);\n      if (!existingLog) {\n        return res.status(404).json({ message: \"Work log not found\" });\n      }\n      \n      // Check existing log's workDate is today\n      const existingWorkDate = toLocalDateString(existingLog.workDate);\n      if (existingWorkDate !== today) {\n        return res.status(400).json({ \n          message: \"Can only update today's work logs. To modify historical data, submit a correction request.\" \n        });\n      }\n      \n      // If payload includes workDate, validate it's also today (prevent changing date to historical)\n      if (data.workDate) {\n        const payloadWorkDate = toLocalDateString(data.workDate);\n        if (!payloadWorkDate) {\n          return res.status(400).json({ message: \"Invalid work date format in payload\" });\n        }\n        if (payloadWorkDate !== today) {\n          return res.status(400).json({ \n            message: \"Can only set work date to today. To modify historical data, submit a correction request.\" \n          });\n        }\n      }\n      \n      const log = await storage.updateWorkLog(req.params.id, data);\n      res.json(log);\n    } catch (error: any) {\n      console.error(\"Error updating work log:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update work log\" });\n    }\n  });\n\n  // ============= Payment Period Routes =============\n  app.get(\"/api/projects/:projectId/payment-periods\", isAuthenticated, async (req, res) => {\n    try {\n      const periods = await storage.getPaymentPeriods(req.params.projectId);\n      res.json(periods);\n    } catch (error) {\n      console.error(\"Error fetching payment periods:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment periods\" });\n    }\n  });\n\n  app.get(\"/api/payment-periods/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const period = await storage.getPaymentPeriod(req.params.id);\n      if (!period) {\n        return res.status(404).json({ message: \"Payment period not found\" });\n      }\n      res.json(period);\n    } catch (error) {\n      console.error(\"Error fetching payment period:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment period\" });\n    }\n  });\n\n  app.get(\"/api/payment-periods/:id/entries\", isAuthenticated, async (req, res) => {\n    try {\n      const entries = await storage.getPaymentPeriodEntries(req.params.id);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching payment entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment entries\" });\n    }\n  });\n\n  app.get(\"/api/payment-periods/:id/payment-file\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req: any, res) => {\n    try {\n      // Fetch payment period\n      const period = await storage.getPaymentPeriod(req.params.id);\n      if (!period) {\n        return res.status(404).json({ message: \"Payment period not found\" });\n      }\n\n      // Fetch project for naming\n      const project = await storage.getProject(period.projectId);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n\n      // Check project-level authorization (unless admin/super_admin)\n      const user = req.dbUser;\n      if (user.role === \"project_manager\") {\n        const assignedProjects = await storage.getProjectsByManager(user.id);\n        const hasAccess = assignedProjects.some((p: any) => p.id === period.projectId);\n        if (!hasAccess) {\n          return res.status(403).json({ message: \"Forbidden: You do not have access to this project\" });\n        }\n      }\n\n      // Fetch entries with full labourer details\n      const entries = await db\n        .select({\n          entry: paymentPeriodEntries,\n          labourer: labourers,\n        })\n        .from(paymentPeriodEntries)\n        .innerJoin(labourers, eq(paymentPeriodEntries.labourerId, labourers.id))\n        .where(eq(paymentPeriodEntries.periodId, req.params.id));\n\n      // Validation checks\n      const validationErrors: string[] = [];\n      const accountNumbers = new Set<string>();\n      let totalAmount = 0;\n\n      for (const { entry, labourer } of entries) {\n        // Check all amounts are positive\n        const amount = parseFloat(entry.totalEarnings);\n        if (amount <= 0) {\n          validationErrors.push(`Entry for ${labourer.firstName} ${labourer.surname} has non-positive amount: ${amount}`);\n        }\n        totalAmount += amount;\n\n        // Check all banking details present\n        if (!labourer.accountNumber || !labourer.accountType || !labourer.branchCode) {\n          validationErrors.push(`Missing banking details for ${labourer.firstName} ${labourer.surname}`);\n        }\n\n        // Check for duplicate account numbers\n        if (accountNumbers.has(labourer.accountNumber)) {\n          validationErrors.push(`Duplicate account number: ${labourer.accountNumber}`);\n        }\n        accountNumbers.add(labourer.accountNumber);\n      }\n\n      // Check total matches period total\n      const periodTotal = parseFloat(period.totalAmount);\n      if (Math.abs(totalAmount - periodTotal) > 0.01) {\n        validationErrors.push(`Total amount mismatch: Entries sum to ${totalAmount.toFixed(2)}, period total is ${periodTotal.toFixed(2)}`);\n      }\n\n      if (validationErrors.length > 0) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: validationErrors \n        });\n      }\n\n      // Generate CSV content\n      const csvRows: string[] = [];\n      // CSV Header\n      csvRows.push('Account Number,Account Type,Branch Code,Amount,Reference,Beneficiary Name');\n\n      // Format date for reference and filename\n      const endDate = typeof period.endDate === 'string' \n        ? period.endDate.split('T')[0].replace(/-/g, '')\n        : new Date(period.endDate).toISOString().split('T')[0].replace(/-/g, '');\n      \n      // Add data rows\n      for (const { entry, labourer } of entries) {\n        const amount = parseFloat(entry.totalEarnings).toFixed(2);\n        const reference = `PAY-${project.name.replace(/[^A-Z0-9]/gi, '').toUpperCase()}-${endDate}`;\n        const beneficiaryName = `${labourer.firstName} ${labourer.surname}`;\n        \n        csvRows.push(\n          `${labourer.accountNumber},${labourer.accountType},${labourer.branchCode},${amount},${reference},${beneficiaryName}`\n        );\n      }\n\n      // Join with Windows line endings (CRLF)\n      const csvContent = csvRows.join('\\r\\n');\n\n      // Set headers for file download\n      const filename = `PAYMENT_${project.name.replace(/[^A-Z0-9]/gi, '_').toUpperCase()}_${endDate}.csv`;\n      res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      \n      // Send CSV\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Error generating payment file:\", error);\n      res.status(500).json({ message: \"Failed to generate payment file\" });\n    }\n  });\n\n  app.post(\"/api/payment-periods\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req, res) => {\n    try {\n      const data = insertPaymentPeriodSchema.parse(req.body);\n      \n      // Auto-calculate total amount from work logs in the date range\n      // Convert dates to yyyy-MM-dd strings\n      const startDateStr = typeof data.startDate === 'string' \n        ? data.startDate.split('T')[0]\n        : (data.startDate as Date).toISOString().split('T')[0];\n      const endDateStr = typeof data.endDate === 'string'\n        ? data.endDate.split('T')[0]\n        : (data.endDate as Date).toISOString().split('T')[0];\n      \n      // Fetch all work logs for this project in the date range\n      const workLogs = await storage.getWorkLogsByDateRange(\n        data.projectId,\n        startDateStr,\n        endDateStr\n      );\n      \n      // Calculate total earnings from work logs\n      const totalAmount = workLogs.reduce((sum, log) => sum + Number(log.totalEarnings || 0), 0);\n      \n      // Set the calculated total amount\n      data.totalAmount = totalAmount.toString();\n      \n      const period = await storage.createPaymentPeriod(data);\n      res.status(201).json(period);\n    } catch (error: any) {\n      console.error(\"Error creating payment period:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create payment period\" });\n    }\n  });\n\n  app.put(\"/api/payment-periods/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req, res) => {\n    try {\n      const data = insertPaymentPeriodSchema.partial().parse(req.body);\n      \n      // If status is being changed to \"submitted\", generate payment entries from work logs\n      if (data.status === \"submitted\") {\n        const period = await storage.getPaymentPeriod(req.params.id);\n        if (period) {\n          // Check if entries already exist (idempotency - don't recreate if already submitted)\n          const existingEntries = await storage.getPaymentPeriodEntries(req.params.id);\n          \n          if (existingEntries.length === 0) {\n            // No entries exist yet - create them from work logs\n            // Convert dates to strings (handle both Date objects and strings from DB)\n            const startDate: any = period.startDate;\n            const endDate: any = period.endDate;\n            const startDateStr = startDate instanceof Date \n              ? startDate.toISOString().split('T')[0]\n              : String(startDate).split('T')[0];\n            const endDateStr = endDate instanceof Date\n              ? endDate.toISOString().split('T')[0]\n              : String(endDate).split('T')[0];\n            \n            // Fetch all work logs for this project in the date range\n            const workLogs = await storage.getWorkLogsByDateRange(\n              period.projectId,\n              startDateStr,\n              endDateStr\n            );\n            \n            // Aggregate work logs by labourer\n            const labourerData = new Map<string, {\n              openMeters: number;\n              closeMeters: number;\n              totalEarnings: number;\n              daysWorked: Set<string>;\n            }>();\n            \n            for (const log of workLogs) {\n              const current = labourerData.get(log.labourerId) || {\n                openMeters: 0,\n                closeMeters: 0,\n                totalEarnings: 0,\n                daysWorked: new Set<string>(),\n              };\n              \n              current.openMeters += Number(log.openTrenchingMeters || 0);\n              current.closeMeters += Number(log.closeTrenchingMeters || 0);\n              current.totalEarnings += Number(log.totalEarnings || 0);\n              current.daysWorked.add(log.workDate);\n              \n              labourerData.set(log.labourerId, current);\n            }\n            \n            // Create payment period entries for each labourer\n            let totalAmount = 0;\n            for (const [labourerId, data] of Array.from(labourerData.entries())) {\n              const totalMeters = data.openMeters + data.closeMeters;\n              await storage.createPaymentPeriodEntry({\n                periodId: req.params.id,\n                labourerId,\n                daysWorked: data.daysWorked.size,\n                openMeters: data.openMeters.toString(),\n                closeMeters: data.closeMeters.toString(),\n                totalMeters: totalMeters.toString(),\n                totalEarnings: data.totalEarnings.toString(),\n              });\n              totalAmount += data.totalEarnings;\n            }\n            \n            // Update the payment period's totalAmount field\n            if (totalAmount > 0) {\n              data.totalAmount = totalAmount.toString();\n            }\n          } else {\n            // Entries already exist - calculate total from existing entries\n            const totalAmount = existingEntries.reduce((sum, e) => sum + Number(e.totalEarnings), 0);\n            data.totalAmount = totalAmount.toString();\n          }\n        }\n      }\n      \n      const period = await storage.updatePaymentPeriod(req.params.id, data);\n      res.json(period);\n    } catch (error: any) {\n      console.error(\"Error updating payment period:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update payment period\" });\n    }\n  });\n\n  // ============= Correction Request Routes =============\n  app.get(\"/api/correction-requests\", isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.query;\n      const requests = await storage.getCorrectionRequests(status as string | undefined);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching correction requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch correction requests\" });\n    }\n  });\n\n  app.get(\"/api/correction-requests/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const request = await storage.getCorrectionRequest(req.params.id);\n      if (!request) {\n        return res.status(404).json({ message: \"Correction request not found\" });\n      }\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error fetching correction request:\", error);\n      res.status(500).json({ message: \"Failed to fetch correction request\" });\n    }\n  });\n\n  app.post(\"/api/correction-requests\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Look up by email (not sub) to handle OIDC sub rotation\n      const userEmail = req.user.claims.email;\n      const user = await storage.getUserByEmail(userEmail);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const data = insertCorrectionRequestSchema.parse({ ...req.body, requestedBy: user.id });\n      const request = await storage.createCorrectionRequest(data);\n      res.status(201).json(request);\n    } catch (error: any) {\n      console.error(\"Error creating correction request:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create correction request\" });\n    }\n  });\n\n  app.put(\"/api/correction-requests/:id\", isAuthenticated, requireRole(\"super_admin\", \"admin\", \"project_manager\"), async (req: any, res) => {\n    try {\n      // Use dbUser.id (attached by requireRole middleware)\n      const userId = req.dbUser.id;\n      const data = insertCorrectionRequestSchema.partial().parse({ \n        ...req.body, \n        reviewedBy: userId,\n        reviewedAt: new Date()\n      });\n      const request = await storage.updateCorrectionRequest(req.params.id, data);\n      res.json(request);\n    } catch (error: any) {\n      console.error(\"Error updating correction request:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update correction request\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":56170},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/examples/LabourerCard.tsx":{"content":"import LabourerCard from '../LabourerCard';\n\nexport default function LabourerCardExample() {\n  const handleEdit = (id: string) => console.log('Edit labourer:', id);\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-6 max-w-4xl\">\n      <LabourerCard\n        id=\"1\"\n        firstName=\"Thabo\"\n        surname=\"Mthembu\"\n        idNumber=\"9012155678901\"\n        employeeType=\"Civil Worker - Trenching\"\n        contactNumber=\"+27 82 345 6789\"\n        email=\"thabo.m@example.com\"\n        onEdit={handleEdit}\n      />\n      <LabourerCard\n        id=\"2\"\n        firstName=\"Sipho\"\n        surname=\"Ndlovu\"\n        idNumber=\"8506123456789\"\n        employeeType=\"Flagman\"\n        contactNumber=\"+27 71 234 5678\"\n        onEdit={handleEdit}\n      />\n    </div>\n  );\n}","size_bytes":778},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"attached_assets/tailwind.config_1761683200902.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/SupervisorDashboard.tsx":{"content":"import StatCard from \"./StatCard\";\nimport LabourerCard from \"./LabourerCard\";\nimport { Users, Calendar, DollarSign, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Labourer {\n  id: string;\n  firstName: string;\n  surname: string;\n  idNumber: string;\n  employeeType: string;\n  contactNumber: string;\n  email?: string;\n  profilePhoto?: string;\n}\n\ninterface SupervisorDashboardProps {\n  projectName: string;\n  labourers: Labourer[];\n  stats: {\n    totalLabourers: number;\n    daysInPeriod: number;\n    periodEarnings: number;\n  };\n  onAddLabourer: () => void;\n  onEditLabourer: (id: string) => void;\n  onRecordWork: () => void;\n}\n\nexport default function SupervisorDashboard({\n  projectName,\n  labourers,\n  stats,\n  onAddLabourer,\n  onEditLabourer,\n  onRecordWork\n}: SupervisorDashboardProps) {\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-supervisor\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">{projectName}</h1>\n          <p className=\"text-muted-foreground\">Supervisor Dashboard</p>\n        </div>\n        <Button onClick={onRecordWork} data-testid=\"button-record-work\">\n          <Calendar className=\"mr-2 h-4 w-4\" />\n          Record Today's Work\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <StatCard\n          title=\"Total Labourers\"\n          value={stats.totalLabourers}\n          icon={Users}\n        />\n        <StatCard\n          title=\"Days in Period\"\n          value={stats.daysInPeriod}\n          icon={Calendar}\n        />\n        <StatCard\n          title=\"Period Earnings\"\n          value={`R ${stats.periodEarnings.toLocaleString()}`}\n          icon={DollarSign}\n        />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold\">Labourers</h2>\n        <Button onClick={onAddLabourer} data-testid=\"button-add-labourer\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Labourer\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {labourers.map(labourer => (\n          <LabourerCard\n            key={labourer.id}\n            {...labourer}\n            onEdit={onEditLabourer}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":2458},"design_guidelines.md":{"content":"# Mooya EMPCare Design Guidelines\n## Fibre Deployment Management Tool\n\n### Design Approach\n\n**Selected System: Carbon Design System**\n\nRationale: This enterprise-grade management tool demands clarity, efficiency, and data-density handling. Carbon Design System (IBM) excels at complex data displays, multi-step workflows, and role-based interfaces - perfect for our 6-role architecture with extensive form handling, tables, and approval workflows.\n\n---\n\n## Typography\n\n**Font Family:**\n- Primary: 'IBM Plex Sans' (via Google Fonts)\n- Monospace: 'IBM Plex Mono' (for data/numbers in tables)\n\n**Hierarchy:**\n- Page Titles: 2xl (24px), font-semibold\n- Section Headings: xl (20px), font-semibold  \n- Card/Panel Titles: lg (18px), font-medium\n- Body Text: base (16px), font-normal\n- Helper/Meta Text: sm (14px), font-normal\n- Table Headers: sm (14px), font-semibold, uppercase tracking\n- Table Data: sm (14px), font-normal\n- Numerical Data: Monospace font for alignment\n\n---\n\n## Layout System\n\n**Spacing Scale:**\nPrimary units: 2, 3, 4, 6, 8, 12, 16\n- Component padding: p-4, p-6\n- Section spacing: space-y-6, space-y-8\n- Card gaps: gap-4, gap-6\n- Form field spacing: space-y-4\n- Table cell padding: px-4 py-3\n\n**Grid Structure:**\n- Container: max-w-7xl mx-auto px-4\n- Dashboard Cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-4\n- Data Tables: Full width within container\n- Forms: max-w-3xl for optimal readability\n- Two-column layouts: grid-cols-1 lg:grid-cols-2 gap-6\n\n---\n\n## Component Library\n\n### Navigation\n\n**Top Navigation Bar:**\n- Fixed header with logo left, user profile/role indicator right\n- Project selector dropdown (for users assigned to multiple projects)\n- Role badge displayed prominently\n- Notification bell icon with count indicator\n- Mobile: Hamburger menu for role-based navigation\n\n**Sidebar Navigation (Desktop):**\n- Left sidebar, width: w-64\n- Collapsible on tablet (w-16 icon-only mode)\n- Icons + labels for each menu item\n- Active state: subtle background with border-left accent\n- Role-based menu items (different for each user role)\n\n### Dashboard Components\n\n**Stat Cards (Summary Metrics):**\n- Grid layout: 4 columns desktop, 2 tablet, 1 mobile\n- Each card: rounded-lg border with p-6\n- Structure: Icon/graphic top, large number (2xl), label below (sm)\n- Examples: \"Current Period Earnings\", \"Days Worked\", \"Total Labourers\", \"Active Projects\"\n\n**Recent Activity Feed:**\n- Timeline-style layout with avatar/icon left\n- Timestamp in small text\n- Action description\n- \"View All\" link at bottom\n\n### Data Tables\n\n**Standard Table Pattern:**\n- Full-width responsive tables with horizontal scroll on mobile\n- Alternating row backgrounds for readability\n- Sortable column headers (up/down arrow icons)\n- Row actions: Icon buttons (edit, delete, view) aligned right\n- Pagination: Bottom center with page numbers + prev/next\n- Density options: Compact/comfortable/relaxed (user preference)\n\n**Specialized Tables:**\n- Daily Work Log: Editable inline cells for meter entry\n- Payment Summary: Expandable rows for detailed breakdowns\n- Labourer List: Avatar + name column, status badges\n- Audit Trail: Timestamp, user, action, before/after values\n\n### Forms\n\n**Multi-Step Form Pattern (Labourer Onboarding):**\n- Stepper component at top showing: Personal Info → Documents → Banking Details\n- Current step highlighted, completed steps with checkmarks\n- Previous steps clickable for editing\n- Progress saved between steps\n- Navigation: Back/Next buttons bottom right\n\n**Single-Section Forms (Project Creation, Rate Config):**\n- Clear field labels above inputs\n- Required field indicator (asterisk)\n- Helper text below fields in smaller font\n- Input widths: Full-width for text/textarea, constrained for numbers/dates\n- Field groups with subtle borders and spacing\n\n**Form Inputs:**\n- Text fields: border rounded with focus state indication\n- Dropdowns: Chevron icon, searchable for long lists\n- Date pickers: Calendar popup\n- Number inputs: Stepper buttons for increments\n- File uploads: Drag-drop zone with file preview thumbnails\n- Radio/checkbox groups: Vertical stacking with adequate spacing\n\n### Cards & Panels\n\n**Project Card:**\n- Rounded corners, border, shadow on hover\n- Header: Project name + status badge\n- Body: Location, budget, team count\n- Footer: Action buttons or last updated info\n\n**Labourer Profile Card:**\n- Avatar (large, circular) top center or left\n- Name, ID/Passport number\n- Employee type badge\n- Contact info\n- Banking status indicator\n- Action buttons (Edit, View Details)\n\n**Payment Period Card:**\n- Period dates prominently displayed\n- Total amount (large, bold)\n- Labourer count\n- Status badge (Open/Submitted/Approved)\n- Action buttons based on role and status\n\n### Badges & Status Indicators\n\n**Status Types:**\n- Active/Approved: Subtle background, small text, rounded-full\n- Pending: Different styling\n- Rejected/Inactive: Different styling\n- Paid: Different styling\n\n**Role Badges:**\n- Displayed in navigation header\n- Small, rounded-full, px-3 py-1\n\n### Buttons\n\n**Primary Actions:**\n- Rounded corners, px-6 py-2.5\n- Medium font weight\n- Icons optional (left-aligned with mr-2)\n\n**Secondary Actions:**\n- Border style with transparent background\n- Same padding as primary\n\n**Icon Buttons:**\n- Square or circular, p-2\n- Tooltip on hover\n- Used in table rows, headers\n\n**Button Groups:**\n- Horizontally aligned with gap-3\n- Primary action right-aligned, secondary left\n\n### Modals & Dialogs\n\n**Confirmation Dialogs:**\n- Centered overlay with backdrop blur\n- Max width: max-w-md\n- Header with title + close button\n- Body with clear message\n- Footer with Cancel (secondary) + Confirm (primary)\n\n**Detail Modals (View Labourer, Payment Breakdown):**\n- Larger: max-w-2xl or max-w-4xl\n- Scrollable content area\n- Structured with sections and dividers\n- Close button top-right\n\n### Notifications\n\n**In-App Notifications (Labourer Dashboard):**\n- Toast-style: Fixed top-right\n- Auto-dismiss after 5 seconds\n- Icon + message + timestamp\n- Close button\n\n**Notification Panel:**\n- Dropdown from bell icon\n- List of recent notifications\n- Unread indicator\n- Mark all as read option\n\n### Empty States\n\n**No Data Illustrations:**\n- Center-aligned with icon or simple illustration\n- Helpful message\n- Call-to-action button (e.g., \"Add First Labourer\")\n\n---\n\n## Page-Specific Layouts\n\n### Super Admin Dashboard\n- 4-column stat cards: Total Users, Active Projects, Total Labourers, System Status\n- Project list table\n- Recent activity timeline\n- User management quick access\n\n### Project Manager Dashboard\n- Stats: Projects Managed, Pending Approvals, Total Budget, Active Supervisors\n- Projects grid/table with filters\n- Pending payment requests table\n- Correction requests notification\n\n### Supervisor Dashboard (Mobile-Optimized)\n- Large, touch-friendly daily work entry interface\n- Labourer cards in single column on mobile\n- Quick-add labourer button (floating action button)\n- Today's work summary at top\n\n### Labourer Dashboard\n- Earnings summary (large, prominent)\n- Calendar view of worked days\n- Work history table\n- Payment history accordion\n- Notification feed\n\n### Project Details Page\n- Tabbed interface: Overview, Team, Pay Rates, Labourers, Work Logs, Payments\n- Breadcrumb navigation\n- Edit button (conditional on role)\n\n### Daily Work Sheet\n- Date selector at top\n- Table with labourer rows\n- Inline editable meter inputs\n- Real-time calculation of daily totals\n- Save button (sticky footer on mobile)\n\n### Payment Request Review\n- Period selector\n- Summary cards: Total Amount, Labourer Count, Work Days\n- Expandable labourer list with per-person breakdown\n- Download CSV button\n- Approve/Reject buttons (large, prominent)\n\n---\n\n## Responsive Behavior\n\n**Breakpoints:**\n- Mobile: < 768px (stack all columns, full-width cards, hamburger menu)\n- Tablet: 768px - 1024px (2-column grids, collapsible sidebar)\n- Desktop: > 1024px (full layout)\n\n**Mobile-First Priorities:**\n- Touch targets minimum 44px × 44px\n- Sticky headers for tables\n- Bottom navigation for supervisors\n- Simplified forms with one field per row\n- Floating action buttons for primary actions\n\n---\n\n## Accessibility\n\n- All form inputs with proper labels and aria-labels\n- Keyboard navigation support (tab order, enter to submit)\n- Focus indicators clearly visible\n- Error messages announced and visible\n- Sufficient contrast ratios throughout\n- Screen reader-friendly table markup\n- Alt text for all images and icons\n\n---\n\n## Images\n\n**Profile Photos:**\n- Circular avatars: 40px (table/list), 80px (cards), 120px (detail view)\n- Fallback: Initials on background\n- Upload: Square crop recommended, min 200x200px\n\n**Document Uploads (ID, Banking Proof):**\n- Thumbnail previews: 120px × 120px in upload interface\n- Full-size viewer modal on click\n- File type indicators\n\n**Empty States:**\n- Simple line art illustrations or icons\n- Not photographic - keep functional\n- Consistent style throughout\n\n**No Hero Images:** This is a utility application - no marketing/landing pages requiring hero treatments. All interfaces are functional dashboards and data management screens.","size_bytes":9090},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Loader2 } from \"lucide-react\";\nimport type { User, Project, PaymentPeriod, Labourer, WorkLog } from \"@shared/schema\";\n\ninterface DashboardProps {\n  user: User;\n}\n\nexport default function Dashboard({ user }: DashboardProps) {\n  // Fetch user-specific data based on role - ALL HOOKS AT TOP LEVEL\n  const { data: projects, isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n    enabled: [\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"].includes(user.role),\n  });\n\n  const { data: paymentPeriods, isLoading: periodsLoading } = useQuery<PaymentPeriod[]>({\n    queryKey: [\"/api/payment-periods\"],\n    enabled: [\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"].includes(user.role),\n  });\n\n  const projectId = projects?.[0]?.id;\n  const { data: labourers, isLoading: labourersLoading } = useQuery<Labourer[]>({\n    queryKey: projectId ? [`/api/projects/${projectId}/labourers`] : [],\n    enabled: user.role === \"supervisor\" && !!projectId,\n  });\n\n  // Labourer-specific queries - hoisted to top level\n  const { data: labourerProfile } = useQuery<Labourer>({\n    queryKey: [`/api/users/${user.id}/labourer-profile`],\n    enabled: user.role === \"labourer\",\n  });\n\n  const { data: workLogs } = useQuery<WorkLog[]>({\n    queryKey: labourerProfile ? [`/api/labourers/${labourerProfile.id}/work-logs`] : [],\n    enabled: user.role === \"labourer\" && !!labourerProfile,\n  });\n\n  const isLoading = projectsLoading || periodsLoading || labourersLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  // Super Admin and Admin see Project Manager dashboard\n  if ([\"super_admin\", \"admin\", \"project_manager\"].includes(user.role)) {\n    return (\n      <Card>\n        <CardHeader className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold\">Dashboard</h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Welcome back, {user.firstName}!\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-2xl font-bold\">{projects?.length || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">Total Projects</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-2xl font-bold\">\n                  {paymentPeriods?.filter((p) => p.status === \"submitted\").length || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Pending Approvals</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-2xl font-bold\">\n                  R{\" \"}\n                  {projects\n                    ?.reduce((sum, p) => sum + (Number(p.budget) || 0), 0)\n                    .toLocaleString() || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">Total Budget</p>\n              </CardContent>\n            </Card>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (user.role === \"supervisor\") {\n    const project = projects?.[0];\n    \n    if (!project) {\n      return (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">No Project Assigned</h2>\n            <p className=\"text-muted-foreground\">\n              Please contact your administrator to be assigned to a project.\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">{project.name}</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Supervisor Dashboard - {project.location}\n          </p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">{labourers?.length || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Total Labourers</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">\n                {paymentPeriods?.filter((p) => p.status === \"open\").length || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Open Payment Periods</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">R {Number(project.budget || 0).toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">Project Budget</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {labourers && labourers.length > 0 && (\n          <Card>\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold\">Recent Labourers</h3>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {labourers.slice(0, 5).map((labourer) => (\n                  <div\n                    key={labourer.id}\n                    className=\"flex items-center justify-between p-3 rounded-md border\"\n                  >\n                    <div>\n                      <div className=\"font-medium\">\n                        {labourer.firstName} {labourer.surname}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">{labourer.contactNumber}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  if (user.role === \"labourer\") {\n    // Calculate metrics from work logs (queries hoisted to top level)\n    const totalEarnings = workLogs?.reduce((sum, log) => sum + Number(log.totalEarnings || 0), 0) || 0;\n    const daysWorked = workLogs?.length || 0;\n    const totalMeters = workLogs?.reduce((sum, log) => \n      sum + Number(log.openTrenchingMeters || 0) + Number(log.closeTrenchingMeters || 0), 0\n    ) || 0;\n\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">\n            Welcome, {user.firstName} {user.lastName}\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">Your Work Dashboard</p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">R {totalEarnings.toLocaleString()}</div>\n              <p className=\"text-xs text-muted-foreground\">Total Earnings</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">{daysWorked}</div>\n              <p className=\"text-xs text-muted-foreground\">Days Worked</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">{totalMeters.toFixed(1)} m</div>\n              <p className=\"text-xs text-muted-foreground\">Total Meters</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold\">Work History</h3>\n          </CardHeader>\n          <CardContent>\n            {workLogs && workLogs.length > 0 ? (\n              <div className=\"space-y-2\">\n                {workLogs.slice(0, 10).map((log) => (\n                  <div\n                    key={log.id}\n                    className=\"flex items-center justify-between p-3 rounded-md border\"\n                  >\n                    <div>\n                      <div className=\"font-medium\">{log.workDate}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Open: {Number(log.openTrenchingMeters || 0).toFixed(1)}m, \n                        Close: {Number(log.closeTrenchingMeters || 0).toFixed(1)}m\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">R {Number(log.totalEarnings || 0).toLocaleString()}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">\n                No work logs recorded yet\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Project Admin dashboard\n  if (user.role === \"project_admin\") {\n    const activeProjects = projects?.filter((p) => p.status === \"active\").length || 0;\n    const totalBudget = projects?.reduce((sum, p) => sum + (Number(p.budget) || 0), 0) || 0;\n\n    return (\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Project Administration</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Welcome, {user.firstName}!\n          </p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">{projects?.length || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Total Projects</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">{activeProjects}</div>\n              <p className=\"text-xs text-muted-foreground\">Active Projects</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-2xl font-bold\">\n                R {totalBudget.toLocaleString()}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Total Budget</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {projects && projects.length > 0 && (\n          <Card>\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold\">Your Projects</h3>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {projects.slice(0, 5).map((project) => (\n                  <div\n                    key={project.id}\n                    className=\"flex items-center justify-between p-3 rounded-md border\"\n                  >\n                    <div>\n                      <div className=\"font-medium\">{project.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{project.location}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">R {Number(project.budget || 0).toLocaleString()}</div>\n                      <div className=\"text-sm text-muted-foreground capitalize\">{project.status}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  // Fallback\n  return (\n    <Card>\n      <CardContent className=\"p-12\">\n        <div className=\"text-center space-y-2\">\n          <h2 className=\"text-xl font-semibold\">Welcome, {user.firstName}!</h2>\n          <p className=\"text-muted-foreground\">Your dashboard is being prepared.</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11862},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return (\n    <div className=\"p-6 space-y-4\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-2\">Theme Toggle</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Click the button to toggle between light and dark mode.\n        </p>\n        <ThemeToggle />\n      </div>\n    </div>\n  );\n}","size_bytes":410},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcrypt\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Extend session data to include labourer session properties\ndeclare module 'express-session' {\n  interface SessionData {\n    isLabourerSession?: boolean;\n    labourerId?: string;\n  }\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\n// Domain restriction check\nfunction isAllowedDomain(email: string | null | undefined): boolean {\n  if (!email) return false;\n  const allowedDomains = [\"@mooya.co.za\", \"@mooyawireless.co.za\", \"@xnext.co.za\"];\n  return allowedDomains.some(domain => email.endsWith(domain));\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Check if email is from allowed domain\n  if (!isAllowedDomain(claims[\"email\"])) {\n    throw new Error(\"Access restricted to @mooya.co.za, @mooyawireless.co.za, and @xnext.co.za email addresses\");\n  }\n\n  const userId = claims[\"sub\"];\n  // IMPORTANT: Look up user by email (not sub) to handle OIDC sub rotation\n  // This ensures existing users keep their roles when their sub changes\n  const existingUser = await storage.getUserByEmail(claims[\"email\"]);\n  \n  // Determine role priority:\n  // 1. Super Admin for kholofelo@mooya.co.za (ALWAYS - cannot be overridden)\n  // 2. Role from OIDC claims if present (ALWAYS overrides existing role - for testing)\n  // 3. Existing user role (if user exists and no OIDC role claim)\n  // 4. Default based on email domain:\n  //    - @xnext.co.za → admin\n  //    - @mooya.co.za, @mooyawireless.co.za → supervisor\n  let role: string;\n  \n  if (claims[\"email\"] === \"kholofelo@mooya.co.za\") {\n    // kholofelo is always super_admin, cannot be overridden\n    role = \"super_admin\";\n  } else if (claims[\"role\"]) {\n    // OIDC role claim ALWAYS overrides any existing role (for testing and role changes)\n    role = claims[\"role\"];\n  } else if (existingUser?.role) {\n    // Keep existing role if no OIDC role claim\n    role = existingUser.role;\n  } else {\n    // New user with no OIDC role claim - assign default based on email domain\n    if (claims[\"email\"]?.endsWith(\"@xnext.co.za\")) {\n      role = \"admin\";\n    } else {\n      role = \"supervisor\";\n    }\n  }\n  \n  await storage.upsertUser({\n    id: userId,\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    role: role as any,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    try {\n      const user = {};\n      updateUserSession(user, tokens);\n      await upsertUser(tokens.claims());\n      verified(null, user);\n    } catch (error) {\n      // If domain check fails, deny access\n      verified(error as Error, false);\n    }\n  };\n\n  // Keep track of registered strategies\n  const registeredStrategies = new Set<string>();\n\n  // Helper function to ensure strategy exists for a domain\n  const ensureStrategy = (domain: string) => {\n    const strategyName = `replitauth:${domain}`;\n    if (!registeredStrategies.has(strategyName)) {\n      const strategy = new Strategy(\n        {\n          name: strategyName,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n      registeredStrategies.add(strategyName);\n    }\n  };\n\n  // Configure local strategy for labourer authentication\n  passport.use('labourer-local', new LocalStrategy(\n    {\n      usernameField: 'identifier', // phone or email\n      passwordField: 'password', // RSA ID or passport\n    },\n    async (identifier, password, done) => {\n      try {\n        // Find labourer by phone or email\n        const labourer = await storage.getLabourerByPhoneOrEmail(identifier);\n        \n        if (!labourer) {\n          return done(null, false, { message: 'Invalid credentials' });\n        }\n\n        // Check if password hash exists\n        if (!labourer.passwordHash) {\n          return done(null, false, { message: 'Account not set up for login. Please contact your supervisor.' });\n        }\n\n        // Verify password (RSA ID or Passport)\n        const isValid = await bcrypt.compare(password, labourer.passwordHash);\n        \n        if (!isValid) {\n          return done(null, false, { message: 'Invalid credentials' });\n        }\n\n        // Return labourer info for session\n        return done(null, {\n          labourerId: labourer.id,\n          isLabourerSession: true,\n          firstName: labourer.firstName,\n          surname: labourer.surname,\n        });\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    ensureStrategy(req.hostname);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n\n  // Labourer login routes\n  app.post(\"/api/labourer/login\", (req, res, next) => {\n    passport.authenticate('labourer-local', (err: any, user: any, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || 'Invalid credentials' });\n      }\n      \n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          return next(err);\n        }\n        \n        req.login(user, (err) => {\n          if (err) {\n            return next(err);\n          }\n          \n          // Mark session as a labourer session for session isolation\n          req.session.isLabourerSession = true;\n          req.session.labourerId = user.labourerId;\n          \n          // Explicitly save session before sending response\n          req.session.save((err) => {\n            if (err) {\n              return next(err);\n            }\n            \n            return res.json({ \n              success: true, \n              labourer: {\n                id: user.labourerId,\n                firstName: user.firstName,\n                surname: user.surname,\n              }\n            });\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.get(\"/api/labourer/logout\", (req, res) => {\n    req.logout(() => {\n      res.json({ success: true });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Labourer authentication middleware\nexport const isLabourerAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  // Explicitly reject staff sessions to prevent cross-mode interference\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  if (!user.isLabourerSession) {\n    return res.status(403).json({ message: \"This endpoint is for labourers only\" });\n  }\n\n  // Fetch the full labourer record and attach to request\n  try {\n    const labourer = await storage.getLabourer(user.labourerId);\n    if (!labourer) {\n      return res.status(401).json({ message: \"Labourer not found\" });\n    }\n    (req as any).labourer = labourer;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\n// Role-based authorization middleware\nexport function requireRole(...allowedRoles: string[]): RequestHandler {\n  return async (req, res, next) => {\n    const user = req.user as any;\n    if (!user?.claims?.email) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    // Look up by email (not sub) to handle OIDC sub rotation\n    const dbUser = await storage.getUserByEmail(user.claims.email);\n    if (!dbUser || !allowedRoles.includes(dbUser.role)) {\n      return res.status(403).json({ message: \"Forbidden: Insufficient permissions\" });\n    }\n\n    // Attach db user to request for easy access\n    (req as any).dbUser = dbUser;\n    next();\n  };\n}","size_bytes":10833},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/examples/LabourerDashboard.tsx":{"content":"import LabourerDashboard from '../LabourerDashboard';\n\nexport default function LabourerDashboardExample() {\n  const workHistory = [\n    { date: 'Dec 10, 2025', openMeters: 15.5, closeMeters: 12.0, earnings: 627.50, status: 'pending' as const },\n    { date: 'Dec 9, 2025', openMeters: 18.0, closeMeters: 15.5, earnings: 760.00, status: 'pending' as const },\n    { date: 'Dec 8, 2025', openMeters: 14.0, closeMeters: 11.0, earnings: 570.00, status: 'pending' as const },\n    { date: 'Dec 5, 2025', openMeters: 16.5, closeMeters: 13.5, earnings: 682.50, status: 'approved' as const },\n    { date: 'Dec 4, 2025', openMeters: 17.0, closeMeters: 14.0, earnings: 705.00, status: 'approved' as const },\n  ];\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <LabourerDashboard\n        labourerName=\"Thabo Mthembu\"\n        currentPeriodEarnings={3345.00}\n        daysWorked={5}\n        nextPaymentDate=\"Dec 15\"\n        totalMeters={147.0}\n        workHistory={workHistory}\n      />\n    </div>\n  );\n}","size_bytes":1002},"client/src/components/DailyWorkSheet.tsx":{"content":"import { Card, CardContent, CardHeader, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Save } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useState } from \"react\";\nimport WorkLogTable from \"./WorkLogTable\";\n\ninterface DailyWorkSheetProps {\n  projectName: string;\n  labourers: Array<{\n    labourerId: string;\n    labourerName: string;\n    openMeters: number;\n    closeMeters: number;\n    openRate: number;\n    closeRate: number;\n  }>;\n  onSave: (date: Date, entries: any[]) => void;\n}\n\nexport default function DailyWorkSheet({ projectName, labourers, onSave }: DailyWorkSheetProps) {\n  const [date, setDate] = useState<Date>(new Date());\n  const [entries, setEntries] = useState(labourers);\n\n  const handleUpdate = (labourerId: string, field: 'openMeters' | 'closeMeters', value: number) => {\n    setEntries(prev =>\n      prev.map(entry =>\n        entry.labourerId === labourerId ? { ...entry, [field]: value } : entry\n      )\n    );\n  };\n\n  const handleSave = () => {\n    onSave(date, entries);\n    console.log('Saved work sheet for', format(date, 'PPP'));\n  };\n\n  const totalDaily = entries.reduce((sum, entry) => \n    sum + (entry.openMeters * entry.openRate) + (entry.closeMeters * entry.closeRate), 0\n  );\n\n  return (\n    <Card data-testid=\"card-daily-work-sheet\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">{projectName}</h2>\n          <p className=\"text-sm text-muted-foreground mt-1\">Daily Work Entry</p>\n        </div>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" data-testid=\"button-select-date\">\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {format(date, 'PPP')}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\">\n            <Calendar\n              mode=\"single\"\n              selected={date}\n              onSelect={(newDate) => newDate && setDate(newDate)}\n              disabled={(date) => date > new Date()}\n            />\n          </PopoverContent>\n        </Popover>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <WorkLogTable entries={entries} editable onUpdate={handleUpdate} />\n        <div className=\"flex justify-end\">\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Total Daily Earnings</p>\n            <p className=\"text-2xl font-semibold font-mono\">R {totalDaily.toFixed(2)}</p>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button className=\"w-full\" onClick={handleSave} data-testid=\"button-save-work-sheet\">\n          <Save className=\"mr-2 h-4 w-4\" />\n          Save Daily Sheet\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":3016},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 9%;\n\n  --border: 0 0% 89%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 0 0% 9%;\n\n  --card-border: 0 0% 93%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 9%;\n\n  --sidebar-border: 0 0% 91%;\n\n  --sidebar-primary: 210 100% 42%;\n\n  --sidebar-primary-foreground: 210 100% 98%;\n\n  --sidebar-accent: 210 15% 91%;\n\n  --sidebar-accent-foreground: 210 15% 15%;\n\n  --sidebar-ring: 210 100% 42%;\n\n  --popover: 0 0% 94%;\n\n  --popover-foreground: 0 0% 9%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 210 100% 42%;\n\n  --primary-foreground: 210 100% 98%;\n\n  --secondary: 210 12% 88%;\n\n  --secondary-foreground: 210 12% 12%;\n\n  --muted: 210 10% 90%;\n\n  --muted-foreground: 210 10% 35%;\n\n  --accent: 210 15% 92%;\n\n  --accent-foreground: 210 15% 15%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 210 100% 42%;\n  --chart-1: 210 100% 35%;\n  --chart-2: 180 80% 32%;\n  --chart-3: 30 90% 40%;\n  --chart-4: 280 75% 38%;\n  --chart-5: 150 70% 35%;\n\n  --font-sans: 'IBM Plex Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'IBM Plex Mono', 'Courier New', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.10), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.12), 0px 4px 8px -4px hsl(0 0% 0% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.15), 0px 8px 12px -6px hsl(0 0% 0% / 0.10);\n  --shadow-2xl: 0px 25px 40px -8px hsl(0 0% 0% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 7%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 0 0% 17%;\n\n  --card: 0 0% 9%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 0 0% 14%;\n\n  --sidebar: 0 0% 11%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 0 0% 16%;\n\n  --sidebar-primary: 210 100% 42%;\n\n  --sidebar-primary-foreground: 210 100% 98%;\n\n  --sidebar-accent: 210 15% 16%;\n\n  --sidebar-accent-foreground: 210 15% 92%;\n\n  --sidebar-ring: 210 100% 42%;\n\n  --popover: 0 0% 13%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 0 0% 18%;\n\n  --primary: 210 100% 42%;\n\n  --primary-foreground: 210 100% 98%;\n\n  --secondary: 210 12% 18%;\n\n  --secondary-foreground: 210 12% 96%;\n\n  --muted: 210 10% 15%;\n\n  --muted-foreground: 210 10% 70%;\n\n  --accent: 210 15% 17%;\n\n  --accent-foreground: 210 15% 92%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 0 0% 30%;\n  --ring: 210 100% 42%;\n  --chart-1: 210 100% 65%;\n  --chart-2: 180 80% 68%;\n  --chart-3: 30 90% 70%;\n  --chart-4: 280 75% 72%;\n  --chart-5: 150 70% 68%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.28), 0px 2px 4px -2px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.32), 0px 3px 6px -3px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.38), 0px 4px 8px -4px hsl(0 0% 0% / 0.28);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.45), 0px 8px 12px -6px hsl(0 0% 0% / 0.32);\n  --shadow-2xl: 0px 25px 40px -8px hsl(0 0% 0% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11198},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ntype Status = \"active\" | \"pending\" | \"approved\" | \"rejected\" | \"paid\" | \"completed\" | \"on_hold\";\n\ninterface StatusBadgeProps {\n  status: Status;\n}\n\nconst statusConfig: Record<Status, { label: string; variant: \"default\" | \"secondary\" | \"outline\" | \"destructive\" }> = {\n  active: { label: \"Active\", variant: \"default\" },\n  pending: { label: \"Pending\", variant: \"secondary\" },\n  approved: { label: \"Approved\", variant: \"default\" },\n  rejected: { label: \"Rejected\", variant: \"destructive\" },\n  paid: { label: \"Paid\", variant: \"default\" },\n  completed: { label: \"Completed\", variant: \"default\" },\n  on_hold: { label: \"On Hold\", variant: \"outline\" }\n};\n\nexport default function StatusBadge({ status }: StatusBadgeProps) {\n  const config = statusConfig[status];\n  return (\n    <Badge variant={config.variant} className=\"rounded-full\" data-testid={`badge-status-${status}`}>\n      {config.label}\n    </Badge>\n  );\n}","size_bytes":955},"client/src/components/LabourerDashboard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport StatCard from \"./StatCard\";\nimport { DollarSign, Calendar, TrendingUp, Clock } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport StatusBadge from \"./StatusBadge\";\n\ninterface WorkRecord {\n  date: string;\n  openMeters: number;\n  closeMeters: number;\n  earnings: number;\n  status: \"pending\" | \"approved\" | \"paid\";\n}\n\ninterface LabourerDashboardProps {\n  labourerName: string;\n  currentPeriodEarnings: number;\n  daysWorked: number;\n  nextPaymentDate: string;\n  totalMeters: number;\n  workHistory: WorkRecord[];\n}\n\nexport default function LabourerDashboard({\n  labourerName,\n  currentPeriodEarnings,\n  daysWorked,\n  nextPaymentDate,\n  totalMeters,\n  workHistory\n}: LabourerDashboardProps) {\n  return (\n    <div className=\"space-y-6\" data-testid=\"dashboard-labourer\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Welcome back, {labourerName}</h1>\n        <p className=\"text-muted-foreground\">Track your work and earnings</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatCard\n          title=\"Current Period Earnings\"\n          value={`R ${currentPeriodEarnings.toLocaleString()}`}\n          icon={DollarSign}\n          subtitle=\"14-day period\"\n        />\n        <StatCard\n          title=\"Days Worked\"\n          value={daysWorked}\n          icon={Calendar}\n          subtitle=\"This period\"\n        />\n        <StatCard\n          title=\"Total Meters\"\n          value={totalMeters}\n          icon={TrendingUp}\n          subtitle=\"This period\"\n        />\n        <StatCard\n          title=\"Next Payment\"\n          value={nextPaymentDate}\n          icon={Clock}\n        />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <h2 className=\"text-xl font-semibold\">Work History</h2>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead className=\"text-right\">Open (m)</TableHead>\n                  <TableHead className=\"text-right\">Close (m)</TableHead>\n                  <TableHead className=\"text-right\">Earnings</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {workHistory.map((record, index) => (\n                  <TableRow key={index} data-testid={`row-work-${index}`}>\n                    <TableCell>{record.date}</TableCell>\n                    <TableCell className=\"text-right font-mono\">{record.openMeters.toFixed(1)}</TableCell>\n                    <TableCell className=\"text-right font-mono\">{record.closeMeters.toFixed(1)}</TableCell>\n                    <TableCell className=\"text-right font-mono font-semibold\">\n                      R {record.earnings.toFixed(2)}\n                    </TableCell>\n                    <TableCell>\n                      <StatusBadge status={record.status} />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3345},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"light\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}","size_bytes":1031},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"attached_assets/design_guidelines_1761683348006.md":{"content":"# Design Guidelines: Fibre Deployment Management Tool\n\n## Design Approach\n\n**Selected System:** Material Design 3  \n**Rationale:** This is a data-intensive enterprise application requiring excellent information hierarchy, robust form patterns, and responsive data tables. Material Design excels at organizing complex information while maintaining clarity and usability across devices - critical for field supervisors using mobile devices and office staff managing workflows.\n\n**Key Design Principles:**\n1. **Data Clarity First:** Information hierarchy prioritizes critical data visibility\n2. **Role-Specific Optimization:** Interface adapts to user role workflows\n3. **Mobile-Field Ready:** Touch-friendly interfaces for supervisor daily work logging\n4. **Efficient Workflows:** Minimize clicks for repetitive tasks (daily work entry, approvals)\n5. **Trust Through Transparency:** Clear audit trails and approval states\n\n---\n\n## Typography\n\n**Font Family:** Roboto (primary), Roboto Mono (data/numbers)\n\n**Hierarchy:**\n- **Page Titles:** 32px, Medium (500) - Project names, dashboard headers\n- **Section Headers:** 24px, Medium (500) - Card titles, form sections\n- **Subsection Headers:** 20px, Medium (500) - Table headers, panel titles\n- **Body Text:** 16px, Regular (400) - Form labels, descriptions, table content\n- **Small Text:** 14px, Regular (400) - Helper text, metadata, timestamps\n- **Micro Text:** 12px, Regular (400) - Table footnotes, status badges\n- **Data/Numbers:** Roboto Mono 16px - Meters, currency, ID numbers for scanning clarity\n\n**Implementation Notes:**\n- Use Medium (500) weight for all headers to maintain hierarchy without heaviness\n- Roboto Mono for all numerical data ensures alignment and readability in tables\n- Line height 1.5 for body text, 1.2 for headers\n\n---\n\n## Layout System\n\n**Spacing Scale:** Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24 (0.5rem increments)\n\n**Common Patterns:**\n- Component padding: p-6 (cards, modals)\n- Section spacing: space-y-8 (between major sections)\n- Form field gaps: gap-6 (vertical), gap-4 (horizontal in rows)\n- Table cell padding: px-4 py-3\n- Page margins: px-6 py-8 (mobile), px-12 py-12 (desktop)\n\n**Grid Structures:**\n- Dashboard cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-4\n- Form layouts: grid-cols-1 md:grid-cols-2 (for paired inputs)\n- Data tables: Full-width with horizontal scroll on mobile\n- Project list: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n\n**Container Widths:**\n- Full-width dashboards: max-w-none with px-12\n- Forms/Details: max-w-4xl mx-auto\n- Data tables: max-w-7xl mx-auto\n- Modals: max-w-2xl (standard), max-w-4xl (multi-step forms)\n\n---\n\n## Component Library\n\n### Navigation\n**Top App Bar (Fixed):**\n- Logo + Company name (left)\n- Role indicator badge (e.g., \"Project Manager\")\n- Notification bell icon with count badge\n- User profile menu (right)\n- Height: h-16\n\n**Side Navigation (Desktop Only):**\n- Persistent drawer on desktop (w-64)\n- Collapsible on tablet\n- Hidden on mobile (replaced by hamburger menu)\n- Active state: filled background with subtle left border accent\n- Navigation groups with dividers\n\n### Dashboard Components\n**Summary Cards:**\n- Elevated cards (shadow-md) with p-6\n- Icon + label + large metric number + trend indicator\n- 4 cards in row on desktop, stack on mobile\n- Metrics use Roboto Mono for numbers\n\n**Data Tables:**\n- Striped rows for readability (alternating subtle background)\n- Sticky header on scroll\n- Sort indicators on column headers\n- Row actions (ellipsis menu) on hover/tap\n- Pagination footer with rows-per-page selector\n- Mobile: Convert to stacked cards with key data visible\n\n**Project Cards (Grid View):**\n- Card with project name (header)\n- Location, budget, dates (body)\n- Active labourers count, supervisor count (footer)\n- Status badge (top-right corner)\n- Hover: Subtle shadow elevation increase\n\n### Forms\n**Input Fields:**\n- Outlined variant (Material Design outlined text fields)\n- Floating labels\n- Helper text below field (12px)\n- Error states: red outline + error message\n- Required indicator: asterisk in label\n\n**Field Types:**\n- Text inputs: Full outlined style\n- Dropdowns: Material select with chevron icon\n- Date pickers: Calendar icon trigger\n- File uploads: Drag-drop zone OR button trigger with preview\n- Number inputs: Roboto Mono font, spinner controls\n\n**Form Layout:**\n- Two-column on desktop for paired fields (First Name | Surname)\n- Single column for complex fields (addresses, descriptions)\n- Action buttons: Right-aligned (Cancel, Save)\n- Progress indicator for multi-step forms (stepper component)\n\n### Data Entry (Daily Work Sheet)\n**Specialized Interface:**\n- Table format: Labourer name (fixed left) | Open Meters | Close Meters | Daily Total\n- Inline editing: Click to activate number input\n- Real-time calculation display\n- Mobile optimization: Swipeable cards per labourer with large input fields\n- Submit button: Fixed bottom bar on mobile\n\n### Buttons & Actions\n**Primary Action:** Filled button (high emphasis)\n**Secondary Action:** Outlined button (medium emphasis)\n**Tertiary/Cancel:** Text button (low emphasis)\n\n**Sizes:**\n- Default: h-10 px-6\n- Large: h-12 px-8 (forms, CTAs)\n- Small: h-8 px-4 (table actions)\n- Icon buttons: h-10 w-10 (circular)\n\n### Status & Badges\n**Payment Status:**\n- Pending: Amber/yellow badge\n- Approved: Green badge\n- Rejected: Red badge\n- Paid: Blue badge\n\n**Project Status:**\n- Active: Green filled badge\n- Completed: Gray filled badge\n- On Hold: Orange outlined badge\n\n**Badge Style:** Rounded-full, px-3 py-1, 12px text, medium weight\n\n### Modals & Dialogs\n**Standard Modal:**\n- Centered overlay with backdrop (semi-transparent black)\n- max-w-2xl, rounded-lg, shadow-2xl\n- Header with title + close icon\n- Content area: p-6\n- Footer with actions (right-aligned)\n\n**Confirmation Dialogs:**\n- Smaller (max-w-md)\n- Warning icon for destructive actions\n- Clear primary/secondary action buttons\n\n### File Uploads & Images\n**Profile Photo Upload:**\n- Circular preview (96px diameter)\n- Upload button overlay on hover\n- Drag-drop zone alternative\n- Format requirements displayed (max 5MB, JPG/PNG)\n\n**Document Uploads:**\n- Card-style upload zone with icon\n- File name + size display after upload\n- Replace/remove actions\n- Preview thumbnail for images\n\n### Notifications & Alerts\n**Toast Notifications:**\n- Bottom-right position\n- Success: Green with checkmark icon\n- Error: Red with alert icon\n- Info: Blue with info icon\n- Auto-dismiss after 5 seconds\n\n**In-App Notifications Panel:**\n- Dropdown from bell icon\n- Scrollable list\n- Unread state indicator\n- Group by date\n- Action buttons (View, Dismiss)\n\n### Audit Trail & History\n**Timeline Component:**\n- Vertical timeline with connector lines\n- Event cards with timestamp, user, action description\n- Before/After comparison for corrections\n- Expandable details\n\n---\n\n## Mobile Optimization\n\n**Breakpoints:**\n- Mobile: < 640px\n- Tablet: 640px - 1024px\n- Desktop: > 1024px\n\n**Mobile-Specific Patterns:**\n- Bottom navigation bar (for supervisors in field)\n- Full-screen modals instead of dialogs\n- Larger touch targets (min 44px)\n- Simplified tables (card format)\n- Sticky action buttons at bottom\n- Collapsible sections with chevron indicators\n\n---\n\n## Responsive Behavior\n\n**Dashboard:** 4 cards → 2 cards → 1 card (stacked)\n**Forms:** 2 columns → 1 column\n**Navigation:** Side drawer → Top bar + hamburger menu\n**Tables:** Horizontal scroll → Stacked cards\n**Data Entry:** Table → Swipeable cards with large inputs\n\n---\n\n## Images\n\n**No Hero Images:** This is a data application, not a marketing site. Focus remains on functional interfaces.\n\n**Functional Images:**\n- **Profile Photos:** Circular avatars throughout (user menu, labourer lists, team pages)\n- **Document Previews:** Thumbnail previews for uploaded ID documents and banking proofs\n- **Empty States:** Subtle illustrations for empty project lists, no data scenarios (simple line art style)\n- **Onboarding:** Optional welcome screen illustration if first-time user guidance is added\n\n**Image Handling:**\n- Upload progress indicators\n- Placeholder avatars (initials on colored background)\n- Lazy loading for list views with many photos\n- Image compression guidance in upload UI\n\n---\n\n## Animations\n\n**Minimal, Purposeful Motion:**\n- Page transitions: 200ms fade\n- Modal appearance: 250ms scale + fade\n- Dropdown menus: 150ms slide down\n- Card hover: 200ms shadow elevation increase\n- Loading states: Subtle skeleton screens OR spinner (not both)\n- Success confirmations: Checkmark animation (300ms)\n\n**No Distracting Animations:** Avoid carousel auto-play, parallax effects, or continuous motion that would distract from data entry tasks.","size_bytes":8679},"client/src/components/examples/SupervisorDashboard.tsx":{"content":"import SupervisorDashboard from '../SupervisorDashboard';\n\nexport default function SupervisorDashboardExample() {\n  const labourers = [\n    {\n      id: '1',\n      firstName: 'Thabo',\n      surname: 'Mthembu',\n      idNumber: '9012155678901',\n      employeeType: 'Civil Worker - Trenching',\n      contactNumber: '+27 82 345 6789',\n      email: 'thabo.m@example.com'\n    },\n    {\n      id: '2',\n      firstName: 'Sipho',\n      surname: 'Ndlovu',\n      idNumber: '8506123456789',\n      employeeType: 'Flagman',\n      contactNumber: '+27 71 234 5678'\n    },\n    {\n      id: '3',\n      firstName: 'Mandla',\n      surname: 'Khumalo',\n      idNumber: '9305087654321',\n      employeeType: 'Civil Worker - Trenching',\n      contactNumber: '+27 83 456 7890',\n      email: 'mandla.k@example.com'\n    }\n  ];\n\n  const stats = {\n    totalLabourers: 24,\n    daysInPeriod: 10,\n    periodEarnings: 45230\n  };\n\n  const handleAddLabourer = () => console.log('Add labourer');\n  const handleEditLabourer = (id: string) => console.log('Edit labourer:', id);\n  const handleRecordWork = () => console.log('Record work');\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <SupervisorDashboard\n        projectName=\"BPM 605\"\n        labourers={labourers}\n        stats={stats}\n        onAddLabourer={handleAddLabourer}\n        onEditLabourer={handleEditLabourer}\n        onRecordWork={handleRecordWork}\n      />\n    </div>\n  );\n}","size_bytes":1414},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/WorkLogTable.tsx":{"content":"import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\ninterface WorkLogEntry {\n  labourerId: string;\n  labourerName: string;\n  openMeters: number;\n  closeMeters: number;\n  openRate: number;\n  closeRate: number;\n}\n\ninterface WorkLogTableProps {\n  entries: WorkLogEntry[];\n  editable?: boolean;\n  onUpdate?: (labourerId: string, field: 'openMeters' | 'closeMeters', value: number) => void;\n}\n\nexport default function WorkLogTable({ entries, editable = false, onUpdate }: WorkLogTableProps) {\n  const [localEntries, setLocalEntries] = useState(entries);\n\n  const handleChange = (labourerId: string, field: 'openMeters' | 'closeMeters', value: string) => {\n    const numValue = parseFloat(value) || 0;\n    setLocalEntries(prev =>\n      prev.map(entry =>\n        entry.labourerId === labourerId ? { ...entry, [field]: numValue } : entry\n      )\n    );\n    onUpdate?.(labourerId, field, numValue);\n  };\n\n  const calculateEarnings = (entry: WorkLogEntry) => {\n    return (entry.openMeters * entry.openRate) + (entry.closeMeters * entry.closeRate);\n  };\n\n  return (\n    <div className=\"border rounded-md\" data-testid=\"table-work-log\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Labourer</TableHead>\n            <TableHead className=\"text-right\">Open Trenching (m)</TableHead>\n            <TableHead className=\"text-right\">Close Trenching (m)</TableHead>\n            <TableHead className=\"text-right\">Daily Earnings</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {localEntries.map((entry) => (\n            <TableRow key={entry.labourerId} data-testid={`row-labourer-${entry.labourerId}`}>\n              <TableCell className=\"font-medium\">{entry.labourerName}</TableCell>\n              <TableCell className=\"text-right\">\n                {editable ? (\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    value={entry.openMeters}\n                    onChange={(e) => handleChange(entry.labourerId, 'openMeters', e.target.value)}\n                    className=\"w-24 text-right font-mono\"\n                    data-testid={`input-open-meters-${entry.labourerId}`}\n                  />\n                ) : (\n                  <span className=\"font-mono\">{entry.openMeters.toFixed(1)}</span>\n                )}\n              </TableCell>\n              <TableCell className=\"text-right\">\n                {editable ? (\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    min=\"0\"\n                    value={entry.closeMeters}\n                    onChange={(e) => handleChange(entry.labourerId, 'closeMeters', e.target.value)}\n                    className=\"w-24 text-right font-mono\"\n                    data-testid={`input-close-meters-${entry.labourerId}`}\n                  />\n                ) : (\n                  <span className=\"font-mono\">{entry.closeMeters.toFixed(1)}</span>\n                )}\n              </TableCell>\n              <TableCell className=\"text-right font-mono font-semibold\">\n                R {calculateEarnings(entry).toFixed(2)}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}","size_bytes":3424},"attached_assets/drizzle.config_1761683200899.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/examples/PaymentPeriodCard.tsx":{"content":"import PaymentPeriodCard from '../PaymentPeriodCard';\n\nexport default function PaymentPeriodCardExample() {\n  const handleView = (id: string) => console.log('View period:', id);\n  const handleApprove = (id: string) => console.log('Approve period:', id);\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-6\">\n      <PaymentPeriodCard\n        id=\"1\"\n        startDate=\"Dec 1\"\n        endDate=\"Dec 14\"\n        status=\"pending\"\n        totalAmount={45230}\n        labourerCount={24}\n        onView={handleView}\n        onApprove={handleApprove}\n      />\n      <PaymentPeriodCard\n        id=\"2\"\n        startDate=\"Nov 15\"\n        endDate=\"Nov 28\"\n        status=\"approved\"\n        totalAmount={38750}\n        labourerCount={22}\n        onView={handleView}\n      />\n      <PaymentPeriodCard\n        id=\"3\"\n        startDate=\"Nov 1\"\n        endDate=\"Nov 14\"\n        status=\"paid\"\n        totalAmount={41200}\n        labourerCount={23}\n        onView={handleView}\n      />\n    </div>\n  );\n}","size_bytes":1021},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/LabourerCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Phone, Mail, Pencil } from \"lucide-react\";\n\ninterface LabourerCardProps {\n  id: string;\n  firstName: string;\n  surname: string;\n  idNumber: string;\n  employeeType: string;\n  contactNumber: string;\n  email?: string;\n  profilePhoto?: string;\n  onEdit: (id: string) => void;\n}\n\nexport default function LabourerCard({\n  id,\n  firstName,\n  surname,\n  idNumber,\n  employeeType,\n  contactNumber,\n  email,\n  profilePhoto,\n  onEdit\n}: LabourerCardProps) {\n  const initials = `${firstName[0]}${surname[0]}`.toUpperCase();\n  \n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-labourer-${id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"w-16 h-16\">\n            <AvatarImage src={profilePhoto} alt={`${firstName} ${surname}`} />\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold text-lg\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-2 mb-2\">\n              <div>\n                <h3 className=\"font-semibold text-lg\">{firstName} {surname}</h3>\n                <p className=\"text-sm text-muted-foreground font-mono\">{idNumber}</p>\n              </div>\n              <Button \n                size=\"icon\" \n                variant=\"ghost\"\n                onClick={() => onEdit(id)}\n                data-testid={`button-edit-labourer-${id}`}\n              >\n                <Pencil className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <Badge variant=\"secondary\" className=\"mb-3\">{employeeType}</Badge>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Phone className=\"w-3.5 h-3.5 mr-2\" />\n                {contactNumber}\n              </div>\n              {email && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Mail className=\"w-3.5 h-3.5 mr-2\" />\n                  {email}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2454},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Search, Plus, Edit, Users, Loader2, Eye } from \"lucide-react\";\nimport { insertProjectSchema } from \"@shared/schema\";\nimport type { User, Project } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\n\ninterface ProjectsPageProps {\n  user: User;\n}\n\ntype ProjectFormData = z.infer<typeof insertProjectSchema>;\n\nconst statusColors: Record<string, string> = {\n  active: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  completed: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n  on_hold: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n};\n\nconst statusLabels: Record<string, string> = {\n  active: \"Active\",\n  completed: \"Completed\",\n  on_hold: \"On Hold\",\n};\n\nexport default function ProjectsPage({ user }: ProjectsPageProps) {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [teamDialogOpen, setTeamDialogOpen] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  const [selectedManagerId, setSelectedManagerId] = useState(\"\");\n  const [selectedSupervisorId, setSelectedSupervisorId] = useState(\"\");\n  const [newProjectSupervisorId, setNewProjectSupervisorId] = useState(\"none\");\n\n  // Reset supervisor selection when Add dialog opens\n  const handleAddDialogChange = (open: boolean) => {\n    setAddDialogOpen(open);\n    if (open) {\n      setNewProjectSupervisorId(\"none\");\n    }\n  };\n\n  // Separate permissions for different operations\n  const canCreate = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\";\n  const canAssignTeam = user.role === \"super_admin\" || user.role === \"admin\";\n  const canEditStatus = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\";\n\n  const addForm = useForm<ProjectFormData>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      budget: \"\",\n      status: \"active\",\n      paymentPeriod: \"fortnightly\",\n      createdBy: \"\",\n    },\n  });\n\n  const editForm = useForm<ProjectFormData>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      budget: \"\",\n      status: \"active\",\n      createdBy: \"\",\n    },\n  });\n\n  const { data: projects, isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: (teamDialogOpen || addDialogOpen) && canAssignTeam,\n  });\n\n  const { data: projectManagers } = useQuery<User[]>({\n    queryKey: [\"/api/projects\", selectedProject?.id, \"managers\"],\n    enabled: teamDialogOpen && !!selectedProject,\n  });\n\n  const { data: projectSupervisors } = useQuery<User[]>({\n    queryKey: [\"/api/projects\", selectedProject?.id, \"supervisors\"],\n    enabled: teamDialogOpen && !!selectedProject,\n  });\n\n  const assignManagerMutation = useMutation({\n    mutationFn: async ({ projectId, userId }: { projectId: string; userId: string }) => {\n      return apiRequest(\"POST\", `/api/projects/${projectId}/managers`, { userId });\n    },\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", variables.projectId, \"managers\"] });\n      toast({\n        title: \"Manager assigned\",\n        description: \"The project manager has been assigned successfully.\",\n      });\n      setSelectedManagerId(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign manager\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignSupervisorMutation = useMutation({\n    mutationFn: async ({ projectId, userId }: { projectId: string; userId: string }) => {\n      return apiRequest(\"POST\", `/api/projects/${projectId}/supervisors`, { userId });\n    },\n    onSuccess: (_data, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", variables.projectId, \"supervisors\"] });\n      toast({\n        title: \"Supervisor assigned\",\n        description: \"The supervisor has been assigned successfully.\",\n      });\n      setSelectedSupervisorId(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign supervisor\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: Omit<ProjectFormData, \"createdBy\"> & { supervisorId?: string }) => {\n      return apiRequest(\"POST\", \"/api/projects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project created\",\n        description: \"The project has been created successfully.\",\n      });\n      setAddDialogOpen(false);\n      addForm.reset();\n      setNewProjectSupervisorId(\"none\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ProjectFormData> }) => {\n      return apiRequest(\"PUT\", `/api/projects/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project updated\",\n        description: \"The project has been updated successfully.\",\n      });\n      setEditDialogOpen(false);\n      setSelectedProject(null);\n      editForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredProjects = projects?.filter((project) => {\n    const matchesSearch = \n      project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (project.location?.toLowerCase()?.includes(searchQuery.toLowerCase()) ?? false);\n    const matchesStatus = statusFilter === \"all\" || project.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleAdd = (data: ProjectFormData) => {\n    const { createdBy, ...projectData } = data;\n    // Convert empty budget string to undefined so it's not sent to the server\n    const cleanedData = {\n      ...projectData,\n      budget: projectData.budget === \"\" ? undefined : projectData.budget,\n    };\n    createMutation.mutate({\n      ...cleanedData,\n      ...(newProjectSupervisorId && newProjectSupervisorId !== \"none\" && { supervisorId: newProjectSupervisorId }),\n    });\n  };\n\n  const handleEdit = (data: ProjectFormData) => {\n    if (!selectedProject) return;\n    const { createdBy, ...projectData } = data;\n    \n    // Convert empty budget string to undefined\n    const cleanedData = {\n      ...projectData,\n      budget: projectData.budget === \"\" ? undefined : projectData.budget,\n    };\n    \n    // PMs can only update status, admins can update all fields\n    const updateData = canCreate \n      ? cleanedData \n      : { status: cleanedData.status };\n    \n    updateMutation.mutate({\n      id: selectedProject.id,\n      data: updateData,\n    });\n  };\n\n  const openEditDialog = (project: Project) => {\n    setSelectedProject(project);\n    editForm.reset({\n      name: project.name,\n      location: project.location || \"\",\n      budget: project.budget ? String(project.budget) : \"\",\n      status: project.status,\n      paymentPeriod: project.paymentPeriod || \"fortnightly\",\n      createdBy: project.createdBy,\n    });\n    setEditDialogOpen(true);\n  };\n\n  const openTeamDialog = (project: Project) => {\n    setSelectedProject(project);\n    setTeamDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Projects</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage fibre deployment projects and teams\n          </p>\n        </div>\n        {canCreate && (\n          <Button\n            onClick={() => {\n              addForm.reset();\n              setAddDialogOpen(true);\n            }}\n            data-testid=\"button-add-project\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Project\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between gap-4\">\n            <CardTitle>All Projects ({filteredProjects?.length || 0})</CardTitle>\n            <div className=\"flex gap-4 flex-1 max-w-2xl\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search projects...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search-projects\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[180px]\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"on_hold\">On Hold</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredProjects && filteredProjects.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Project Name</TableHead>\n                  <TableHead>Location</TableHead>\n                  <TableHead>Budget</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProjects.map((project) => (\n                  <TableRow key={project.id} data-testid={`row-project-${project.id}`}>\n                    <TableCell className=\"font-medium\">{project.name}</TableCell>\n                    <TableCell className=\"text-muted-foreground\">\n                      {project.location || \"—\"}\n                    </TableCell>\n                    <TableCell>\n                      {project.budget ? `R ${Number(project.budget).toLocaleString()}` : \"—\"}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[project.status] || \"\"}>\n                        {statusLabels[project.status] || project.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => window.location.href = `/projects/${project.id}`}\n                          data-testid={`button-details-${project.id}`}\n                          title=\"View Details\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {canAssignTeam && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => openTeamDialog(project)}\n                            data-testid={`button-team-${project.id}`}\n                            title=\"Assign Team\"\n                          >\n                            <Users className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        {canEditStatus && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => openEditDialog(project)}\n                            data-testid={`button-edit-${project.id}`}\n                            title=\"Edit Project\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              {searchQuery || statusFilter !== \"all\" \n                ? \"No projects found matching your filters.\" \n                : \"No projects created yet.\"}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Add Dialog */}\n      <Dialog open={addDialogOpen} onOpenChange={handleAddDialogChange}>\n        <DialogContent data-testid=\"dialog-add-project\">\n          <DialogHeader>\n            <DialogTitle>Add Project</DialogTitle>\n            <DialogDescription>\n              Create a new fibre deployment project.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...addForm}>\n            <form onSubmit={addForm.handleSubmit(handleAdd)} className=\"space-y-4\">\n              <FormField\n                control={addForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Johannesburg Fibre Rollout Phase 1\"\n                        {...field}\n                        data-testid=\"input-project-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={addForm.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Sandton, Johannesburg\"\n                        {...field}\n                        value={field.value || \"\"}\n                        data-testid=\"input-project-location\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={addForm.control}\n                name=\"budget\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Budget (ZAR)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        placeholder=\"e.g., 5000000\"\n                        {...field}\n                        value={field.value || \"\"}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          if (value === \"\" || /^\\d*\\.?\\d*$/.test(value)) {\n                            field.onChange(value);\n                          }\n                        }}\n                        data-testid=\"input-project-budget\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={addForm.control}\n                name=\"paymentPeriod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Payment Frequency *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value || \"fortnightly\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-payment-period\">\n                          <SelectValue placeholder=\"Select payment frequency\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"fortnightly\">Fortnightly (every 2 weeks)</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      How often workers will be paid\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Assign Supervisor (Optional)</label>\n                  <Select value={newProjectSupervisorId} onValueChange={setNewProjectSupervisorId}>\n                    <SelectTrigger data-testid=\"select-new-project-supervisor\" className=\"mt-2\">\n                      <SelectValue placeholder=\"Select a supervisor to assign\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">None (assign later)</SelectItem>\n                      {users\n                        ?.filter((u) => u.role === \"supervisor\")\n                        .map((supervisor) => (\n                          <SelectItem key={supervisor.id} value={supervisor.id}>\n                            {supervisor.firstName} {supervisor.lastName} ({supervisor.email})\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    You can assign a supervisor now or later from the Team button\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"bg-muted p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">\n                  <strong>Note:</strong> Pay rates (open/close trenching rates) are managed separately via the Pay Rates page after project creation.\n                </p>\n              </div>\n              <FormField\n                control={addForm.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-project-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"on_hold\">On Hold</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setAddDialogOpen(false)}\n                  data-testid=\"button-cancel-add\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-add\"\n                >\n                  {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Dialog */}\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\n        <DialogContent data-testid=\"dialog-edit-project\">\n          <DialogHeader>\n            <DialogTitle>Edit Project</DialogTitle>\n            <DialogDescription>\n              {canCreate ? \"Update project details and settings.\" : \"Update project status.\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(handleEdit)} className=\"space-y-4\">\n              {canCreate && (\n                <>\n                  <FormField\n                    control={editForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project Name *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"e.g., Johannesburg Fibre Rollout Phase 1\"\n                            {...field}\n                            data-testid=\"input-edit-project-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"e.g., Sandton, Johannesburg\"\n                            {...field}\n                            value={field.value || \"\"}\n                            data-testid=\"input-edit-project-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"budget\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Budget (ZAR)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"text\"\n                            inputMode=\"decimal\"\n                            placeholder=\"e.g., 5000000\"\n                            {...field}\n                            value={field.value || \"\"}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\" || /^\\d*\\.?\\d*$/.test(value)) {\n                                field.onChange(value);\n                              }\n                            }}\n                            data-testid=\"input-edit-project-budget\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              )}\n              <FormField\n                control={editForm.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-edit-project-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"on_hold\">On Hold</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setEditDialogOpen(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={updateMutation.isPending}\n                  data-testid=\"button-submit-edit\"\n                >\n                  {updateMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Save Changes\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Team Management Dialog */}\n      <Dialog open={teamDialogOpen} onOpenChange={setTeamDialogOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-team-management\">\n          <DialogHeader>\n            <DialogTitle>Team Management - {selectedProject?.name}</DialogTitle>\n            <DialogDescription>\n              Assign project managers and supervisors to this project.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {canAssignTeam ? (\n            <Tabs defaultValue=\"managers\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"managers\">Project Managers</TabsTrigger>\n                <TabsTrigger value=\"supervisors\">Supervisors</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"managers\" className=\"space-y-4 mt-4\">\n                {projectManagers && projectManagers.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">Assigned Project Managers</h4>\n                    <div className=\"space-y-2\">\n                      {projectManagers.map((manager) => (\n                        <div key={manager.id} className=\"flex items-center justify-between p-2 border rounded\" data-testid={`assigned-manager-${manager.id}`}>\n                          <span className=\"text-sm\">{manager.firstName} {manager.lastName} ({manager.email})</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex gap-2\">\n                  <Select \n                    value={selectedManagerId} \n                    onValueChange={setSelectedManagerId}\n                  >\n                    <SelectTrigger className=\"flex-1\" data-testid=\"select-manager\">\n                      <SelectValue placeholder=\"Select a manager to assign\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {users?.filter(u => u.role === \"project_manager\").map((u) => (\n                        <SelectItem key={u.id} value={u.id}>\n                          {u.firstName} {u.lastName} ({u.email})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    onClick={() => {\n                      if (selectedProject && selectedManagerId) {\n                        assignManagerMutation.mutate({\n                          projectId: selectedProject.id,\n                          userId: selectedManagerId,\n                        });\n                      }\n                    }}\n                    disabled={!selectedManagerId || assignManagerMutation.isPending}\n                    data-testid=\"button-assign-manager\"\n                  >\n                    {assignManagerMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      \"Assign\"\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select a user with Project Manager role to assign to this project.\n                </p>\n              </TabsContent>\n              \n              <TabsContent value=\"supervisors\" className=\"space-y-4 mt-4\">\n                {projectSupervisors && projectSupervisors.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">Assigned Supervisors</h4>\n                    <div className=\"space-y-2\">\n                      {projectSupervisors.map((supervisor) => (\n                        <div key={supervisor.id} className=\"flex items-center justify-between p-2 border rounded\" data-testid={`assigned-supervisor-${supervisor.id}`}>\n                          <span className=\"text-sm\">{supervisor.firstName} {supervisor.lastName} ({supervisor.email})</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex gap-2\">\n                  <Select \n                    value={selectedSupervisorId} \n                    onValueChange={setSelectedSupervisorId}\n                  >\n                    <SelectTrigger className=\"flex-1\" data-testid=\"select-supervisor\">\n                      <SelectValue placeholder=\"Select a supervisor to assign\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {users?.filter(u => u.role === \"supervisor\").map((u) => (\n                        <SelectItem key={u.id} value={u.id}>\n                          {u.firstName} {u.lastName} ({u.email})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    onClick={() => {\n                      if (selectedProject && selectedSupervisorId) {\n                        assignSupervisorMutation.mutate({\n                          projectId: selectedProject.id,\n                          userId: selectedSupervisorId,\n                        });\n                      }\n                    }}\n                    disabled={!selectedSupervisorId || assignSupervisorMutation.isPending}\n                    data-testid=\"button-assign-supervisor\"\n                  >\n                    {assignSupervisorMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      \"Assign\"\n                    )}\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select a user with Supervisor role to assign to this project.\n                </p>\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <div className=\"py-6 text-center text-muted-foreground\">\n              You don't have permission to manage project team assignments.\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button\n              onClick={() => {\n                setTeamDialogOpen(false);\n                setSelectedManagerId(\"\");\n                setSelectedSupervisorId(\"\");\n              }}\n              data-testid=\"button-close-team\"\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":33499},"client/src/pages/labourers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { FileUpload } from \"@/components/file-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { validateSAId, formatDateForInput } from \"@/lib/saIdValidation\";\nimport { insertLabourerSchema, type Labourer, type Project, type EmployeeType, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { UserPlus, Search, Eye, Info, Pencil } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ntype LabourerFormData = z.infer<typeof insertLabourerSchema>;\n\n// South African Banks with Universal Branch Codes\nconst SA_BANKS = [\n  { name: \"Absa Bank\", universalBranchCode: \"632005\" },\n  { name: \"Capitec Bank\", universalBranchCode: \"470010\" },\n  { name: \"First National Bank (FNB)\", universalBranchCode: \"250655\" },\n  { name: \"Investec Bank\", universalBranchCode: \"580105\" },\n  { name: \"Nedbank\", universalBranchCode: \"198765\" },\n  { name: \"Standard Bank\", universalBranchCode: \"051001\" },\n  { name: \"African Bank\", universalBranchCode: \"430000\" },\n  { name: \"Mercantile Bank\", universalBranchCode: \"450905\" },\n  { name: \"TymeBank\", universalBranchCode: \"678910\" },\n  { name: \"Bidvest Bank\", universalBranchCode: \"679000\" },\n  { name: \"Sasfin Bank\", universalBranchCode: \"683000\" },\n  { name: \"Bank of Athens\", universalBranchCode: \"410506\" },\n  { name: \"RMB Private Bank\", universalBranchCode: \"222026\" },\n  { name: \"South African Post Bank (Post Office)\", universalBranchCode: \"460005\" },\n  { name: \"Hollard Bank\", universalBranchCode: \"585001\" },\n  { name: \"Discovery Bank\", universalBranchCode: \"679000\" },\n  { name: \"Standard Chartered Bank\", universalBranchCode: \"730020\" },\n  { name: \"Barclays Bank\", universalBranchCode: \"590000\" },\n  { name: \"Investec Bank Limited\", universalBranchCode: \"580105\" },\n  { name: \"Mercantile Bank Limited\", universalBranchCode: \"450905\" },\n] as const;\n\nexport default function LabourersPage() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterProject, setFilterProject] = useState<string>(\"all\");\n  const [filterEmployeeType, setFilterEmployeeType] = useState<string>(\"all\");\n  const [selectedLabourer, setSelectedLabourer] = useState<Labourer | null>(null);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n\n  // Get current user for authorization\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n  });\n\n  // Determine if user can create labourers\n  const canCreate = currentUser?.role && [\"super_admin\", \"admin\", \"project_manager\", \"supervisor\", \"project_admin\"].includes(currentUser.role);\n\n  // Fetch projects\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch employee types\n  const { data: employeeTypes, isLoading: isLoadingEmployeeTypes } = useQuery<EmployeeType[]>({\n    queryKey: [\"/api/employee-types\"],\n  });\n\n  // Fetch labourers for all projects AND unassigned labourers\n  const [allLabourers, setAllLabourers] = useState<Labourer[]>([]);\n  const projectsData = projects || [];\n  \n  useEffect(() => {\n    const fetchAllLabourers = async () => {\n      // Fetch labourers from all projects\n      const labourersByProject = await Promise.all(\n        projectsData.map(async (project) => {\n          try {\n            const response = await fetch(`/api/projects/${project.id}/labourers`);\n            if (response.ok) {\n              return await response.json();\n            }\n            return [];\n          } catch {\n            return [];\n          }\n        })\n      );\n      \n      // Fetch unassigned labourers (not assigned to any project)\n      let unassignedLabourers: Labourer[] = [];\n      try {\n        const response = await fetch(`/api/labourers/available`);\n        if (response.ok) {\n          unassignedLabourers = await response.json();\n        }\n      } catch {\n        // Silent fail - continue with just project-assigned labourers\n      }\n      \n      // Combine all labourers (from projects + unassigned)\n      const allCombined = [...labourersByProject.flat(), ...unassignedLabourers];\n      \n      // Remove duplicates (in case a labourer appears in both lists)\n      const uniqueLabourers = Array.from(\n        new Map(allCombined.map(l => [l.id, l])).values()\n      );\n      \n      setAllLabourers(uniqueLabourers);\n    };\n\n    fetchAllLabourers();\n  }, [projectsData.length]);\n\n  const form = useForm<LabourerFormData>({\n    resolver: zodResolver(insertLabourerSchema),\n    defaultValues: {\n      userId: undefined,\n      projectId: \"\",\n      employeeTypeId: \"\",\n      firstName: \"\",\n      surname: \"\",\n      idNumber: \"\",\n      dateOfBirth: \"\",\n      gender: \"\",\n      contactNumber: \"\",\n      email: \"\",\n      physicalAddress: \"\",\n      profilePhotoPath: undefined,\n      idDocumentPath: undefined,\n      bankName: \"\",\n      accountNumber: \"\",\n      accountType: \"cheque\",\n      branchCode: \"\",\n      bankingProofPath: undefined,\n      createdBy: currentUser?.id || \"\",\n    },\n  });\n\n  // Watch ID number for auto-population (only for SA IDs, not passports)\n  const idNumber = form.watch(\"idNumber\");\n  const bankName = form.watch(\"bankName\");\n\n  useEffect(() => {\n    if (idNumber && idNumber.length >= 6) {\n      const idInfo = validateSAId(idNumber);\n      \n      // Clear previous ID errors\n      form.clearErrors(\"idNumber\");\n      \n      if (idInfo.isValid) {\n        // Auto-populate DOB and gender only for SA IDs (not passports)\n        if (idInfo.dateOfBirth && idInfo.gender) {\n          form.setValue(\"dateOfBirth\", formatDateForInput(idInfo.dateOfBirth));\n          form.setValue(\"gender\", idInfo.gender);\n        }\n      } else if (idInfo.error && idNumber.length >= 9) {\n        // Only show error if user has entered enough characters\n        form.setError(\"idNumber\", { message: idInfo.error });\n      }\n    }\n  }, [idNumber, form]);\n\n  // Auto-populate branch code when bank is selected\n  useEffect(() => {\n    if (bankName) {\n      const selectedBank = SA_BANKS.find(bank => bank.name === bankName);\n      if (selectedBank) {\n        form.setValue(\"branchCode\", selectedBank.universalBranchCode);\n      }\n    }\n  }, [bankName, form]);\n\n  const createMutation = useMutation({\n    mutationFn: async (data: LabourerFormData) => {\n      return apiRequest(\"POST\", \"/api/labourers\", { ...data, createdBy: currentUser?.id });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Labourer onboarded successfully\",\n      });\n      form.reset();\n      setDialogOpen(false);\n      // Refetch labourers\n      const projectId = form.getValues(\"projectId\");\n      if (projectId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/projects/${projectId}/labourers`] });\n      }\n      // Refresh all labourers (both assigned and unassigned)\n      const fetchAllLabourers = async () => {\n        // Fetch labourers from all projects\n        const labourersByProject = await Promise.all(\n          projectsData.map(async (project) => {\n            try {\n              const response = await fetch(`/api/projects/${project.id}/labourers`);\n              if (response.ok) {\n                return await response.json();\n              }\n              return [];\n            } catch {\n              return [];\n            }\n          })\n        );\n        \n        // Fetch unassigned labourers\n        let unassignedLabourers: Labourer[] = [];\n        try {\n          const response = await fetch(`/api/labourers/available`);\n          if (response.ok) {\n            unassignedLabourers = await response.json();\n          }\n        } catch {\n          // Silent fail\n        }\n        \n        // Combine and deduplicate\n        const allCombined = [...labourersByProject.flat(), ...unassignedLabourers];\n        const uniqueLabourers = Array.from(\n          new Map(allCombined.map(l => [l.id, l])).values()\n        );\n        \n        setAllLabourers(uniqueLabourers);\n      };\n      fetchAllLabourers();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to onboard labourer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LabourerFormData) => {\n    createMutation.mutate(data);\n  };\n\n  // Edit form\n  const editForm = useForm<LabourerFormData>({\n    resolver: zodResolver(insertLabourerSchema.partial()),\n    defaultValues: {\n      userId: undefined,\n      projectId: \"\",\n      employeeTypeId: \"\",\n      firstName: \"\",\n      surname: \"\",\n      idNumber: \"\",\n      dateOfBirth: \"\",\n      gender: \"\",\n      contactNumber: \"\",\n      email: \"\",\n      physicalAddress: \"\",\n      profilePhotoPath: undefined,\n      idDocumentPath: undefined,\n      bankName: \"\",\n      accountNumber: \"\",\n      accountType: \"cheque\",\n      branchCode: \"\",\n      bankingProofPath: undefined,\n    },\n  });\n\n  // Watch edit form fields for auto-population\n  const editIdNumber = editForm.watch(\"idNumber\");\n  const editBankName = editForm.watch(\"bankName\");\n\n  // Auto-populate DOB and gender from ID number in edit form\n  useEffect(() => {\n    if (editIdNumber && editIdNumber.length >= 6) {\n      const idInfo = validateSAId(editIdNumber);\n      \n      editForm.clearErrors(\"idNumber\");\n      \n      if (idInfo.isValid) {\n        if (idInfo.dateOfBirth && idInfo.gender) {\n          editForm.setValue(\"dateOfBirth\", formatDateForInput(idInfo.dateOfBirth));\n          editForm.setValue(\"gender\", idInfo.gender);\n        }\n      } else if (idInfo.error && editIdNumber.length >= 9) {\n        editForm.setError(\"idNumber\", { message: idInfo.error });\n      }\n    }\n  }, [editIdNumber, editForm]);\n\n  // Auto-populate branch code in edit form\n  useEffect(() => {\n    if (editBankName) {\n      const selectedBank = SA_BANKS.find(bank => bank.name === editBankName);\n      if (selectedBank) {\n        editForm.setValue(\"branchCode\", selectedBank.universalBranchCode);\n      }\n    }\n  }, [editBankName, editForm]);\n\n  // Populate edit form when labourer is selected\n  useEffect(() => {\n    if (selectedLabourer && editDialogOpen) {\n      editForm.reset({\n        userId: selectedLabourer.userId || undefined,\n        projectId: selectedLabourer.projectId || \"\",\n        employeeTypeId: selectedLabourer.employeeTypeId,\n        firstName: selectedLabourer.firstName,\n        surname: selectedLabourer.surname,\n        idNumber: selectedLabourer.idNumber,\n        dateOfBirth: selectedLabourer.dateOfBirth || \"\",\n        gender: selectedLabourer.gender || \"\",\n        contactNumber: selectedLabourer.contactNumber,\n        email: selectedLabourer.email || \"\",\n        physicalAddress: selectedLabourer.physicalAddress || \"\",\n        profilePhotoPath: selectedLabourer.profilePhotoPath || undefined,\n        idDocumentPath: selectedLabourer.idDocumentPath || undefined,\n        bankName: selectedLabourer.bankName,\n        accountNumber: selectedLabourer.accountNumber,\n        accountType: selectedLabourer.accountType || \"cheque\",\n        branchCode: selectedLabourer.branchCode,\n        bankingProofPath: selectedLabourer.bankingProofPath || undefined,\n      });\n    }\n  }, [selectedLabourer, editDialogOpen, editForm]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<LabourerFormData>) => {\n      if (!selectedLabourer) throw new Error(\"No labourer selected\");\n      return apiRequest(\"PUT\", `/api/labourers/${selectedLabourer.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Labourer details updated successfully\",\n      });\n      setEditDialogOpen(false);\n      setSelectedLabourer(null);\n      // Refresh all labourers\n      const fetchAllLabourers = async () => {\n        const labourersByProject = await Promise.all(\n          projectsData.map(async (project) => {\n            try {\n              const response = await fetch(`/api/projects/${project.id}/labourers`);\n              if (response.ok) {\n                return await response.json();\n              }\n              return [];\n            } catch {\n              return [];\n            }\n          })\n        );\n        \n        let unassignedLabourers: Labourer[] = [];\n        try {\n          const response = await fetch(`/api/labourers/available`);\n          if (response.ok) {\n            unassignedLabourers = await response.json();\n          }\n        } catch {\n          // Silent fail\n        }\n        \n        const allCombined = [...labourersByProject.flat(), ...unassignedLabourers];\n        const uniqueLabourers = Array.from(\n          new Map(allCombined.map(l => [l.id, l])).values()\n        );\n        \n        setAllLabourers(uniqueLabourers);\n      };\n      fetchAllLabourers();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update labourer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onEditSubmit = (data: LabourerFormData) => {\n    updateMutation.mutate(data);\n  };\n\n  // Filter labourers\n  const filteredLabourers = allLabourers.filter((labourer) => {\n    const matchesSearch = \n      `${labourer.firstName} ${labourer.surname}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      labourer.idNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      labourer.contactNumber.includes(searchQuery);\n    \n    const matchesProject = filterProject === \"all\" || labourer.projectId === filterProject;\n    const matchesEmployeeType = filterEmployeeType === \"all\" || labourer.employeeTypeId === filterEmployeeType;\n    \n    return matchesSearch && matchesProject && matchesEmployeeType;\n  });\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-labourers\">Labourers</h1>\n          <p className=\"text-muted-foreground\">Manage labourer onboarding and information</p>\n        </div>\n        {canCreate && (\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-labourer\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Onboard Labourer\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Onboard New Labourer</DialogTitle>\n              </DialogHeader>\n              \n              <Alert className=\"bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                <AlertDescription className=\"text-sm text-blue-900 dark:text-blue-100\">\n                  A login account will be automatically created for this labourer. They can log in using their <strong>contact number or email</strong> as username and <strong>ID number/passport</strong> as password.\n                </AlertDescription>\n              </Alert>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {/* Project Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"projectId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || undefined}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-project\">\n                                <SelectValue placeholder=\"Select project\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {projects?.map((project) => (\n                                <SelectItem key={project.id} value={project.id}>\n                                  {project.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Employee Type */}\n                    <FormField\n                      control={form.control}\n                      name=\"employeeTypeId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Employee Type *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value} disabled={isLoadingEmployeeTypes}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-employee-type\">\n                                <SelectValue placeholder={isLoadingEmployeeTypes ? \"Loading...\" : \"Select employee type\"} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {isLoadingEmployeeTypes ? (\n                                <div className=\"p-2 text-sm text-muted-foreground\">Loading employee types...</div>\n                              ) : employeeTypes && employeeTypes.length > 0 ? (\n                                employeeTypes.map((type) => (\n                                  <SelectItem key={type.id} value={type.id}>\n                                    {type.name}\n                                  </SelectItem>\n                                ))\n                              ) : (\n                                <div className=\"p-2 text-sm text-muted-foreground\">No employee types found</div>\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* First Name */}\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-first-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Surname */}\n                    <FormField\n                      control={form.control}\n                      name=\"surname\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Surname *</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-surname\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* ID Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"idNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SA ID Number / Passport *</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"13-digit SA ID or passport\"\n                              data-testid=\"input-id-number\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Date of Birth (auto-populated) */}\n                    <FormField\n                      control={form.control}\n                      name=\"dateOfBirth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Date of Birth *</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              type=\"date\"\n                              value={field.value || \"\"}\n                              data-testid=\"input-dob\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Gender (auto-populated) */}\n                    <FormField\n                      control={form.control}\n                      name=\"gender\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Gender</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-gender\">\n                                <SelectValue placeholder=\"Select gender\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"male\">Male</SelectItem>\n                              <SelectItem value=\"female\">Female</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Contact Number */}\n                    <FormField\n                      control={form.control}\n                      name=\"contactNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Contact Number *</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder=\"+27 or 0 followed by 9 digits\"\n                              data-testid=\"input-contact\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Email */}\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email (for login)</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"email\" placeholder=\"Optional\" data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Physical Address */}\n                  <FormField\n                    control={form.control}\n                    name=\"physicalAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Physical Address</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} value={field.value || \"\"} data-testid=\"input-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Banking Details Section */}\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"font-semibold mb-4\">Banking Details</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"bankName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Bank Name *</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-bank-name\">\n                                  <SelectValue placeholder=\"Select a bank\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {SA_BANKS.map((bank) => (\n                                  <SelectItem key={bank.name} value={bank.name}>\n                                    {bank.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"accountType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Account Type *</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-account-type\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"cheque\">Cheque</SelectItem>\n                                <SelectItem value=\"savings\">Savings</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"accountNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Account Number *</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-account-number\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"branchCode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Branch Code * (Auto-filled)</FormLabel>\n                            <FormControl>\n                              <Input {...field} disabled className=\"bg-muted\" data-testid=\"input-branch-code\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* File Uploads Section */}\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"font-semibold mb-4\">Documents</h3>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"profilePhotoPath\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FileUpload\n                              label=\"Profile Photo\"\n                              accept=\"image/*\"\n                              maxFileSize={5 * 1024 * 1024}\n                              onUploadComplete={(path) => field.onChange(path || undefined)}\n                              currentFilePath={field.value || undefined}\n                              testId=\"upload-profile-photo\"\n                            />\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"idDocumentPath\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FileUpload\n                              label=\"ID Document\"\n                              accept=\"image/*,.pdf\"\n                              maxFileSize={10 * 1024 * 1024}\n                              onUploadComplete={(path) => field.onChange(path || undefined)}\n                              currentFilePath={field.value || undefined}\n                              testId=\"upload-id-document\"\n                            />\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"bankingProofPath\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FileUpload\n                              label=\"Banking Proof\"\n                              accept=\"image/*,.pdf\"\n                              maxFileSize={10 * 1024 * 1024}\n                              onUploadComplete={(path) => field.onChange(path || undefined)}\n                              currentFilePath={field.value || undefined}\n                              testId=\"upload-banking-proof\"\n                            />\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createMutation.isPending}\n                      data-testid=\"button-submit\"\n                    >\n                      {createMutation.isPending ? \"Onboarding...\" : \"Onboard Labourer\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Name, ID, or phone...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Project</label>\n              <Select value={filterProject} onValueChange={setFilterProject}>\n                <SelectTrigger data-testid=\"select-filter-project\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Projects</SelectItem>\n                  {projects?.map((project) => (\n                    <SelectItem key={project.id} value={project.id}>\n                      {project.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Employee Type</label>\n              <Select value={filterEmployeeType} onValueChange={setFilterEmployeeType}>\n                <SelectTrigger data-testid=\"select-filter-employee-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  {employeeTypes?.map((type) => (\n                    <SelectItem key={type.id} value={type.id}>\n                      {type.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Labourers Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Labourers ({filteredLabourers.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>ID Number</TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Project</TableHead>\n                <TableHead>Employee Type</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredLabourers.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                    No labourers found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredLabourers.map((labourer) => {\n                  const project = projects?.find((p) => p.id === labourer.projectId);\n                  const employeeType = employeeTypes?.find((t) => t.id === labourer.employeeTypeId);\n\n                  return (\n                    <TableRow key={labourer.id} data-testid={`row-labourer-${labourer.id}`}>\n                      <TableCell className=\"font-medium\">\n                        {labourer.firstName} {labourer.surname}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">{labourer.idNumber}</TableCell>\n                      <TableCell>{labourer.contactNumber}</TableCell>\n                      <TableCell>{project?.name || \"-\"}</TableCell>\n                      <TableCell>{employeeType?.name || \"-\"}</TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedLabourer(labourer);\n                              setViewDialogOpen(true);\n                            }}\n                            data-testid={`button-view-${labourer.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          {canCreate && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedLabourer(labourer);\n                                setEditDialogOpen(true);\n                              }}\n                              data-testid={`button-edit-${labourer.id}`}\n                            >\n                              <Pencil className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* View Labourer Dialog */}\n      {selectedLabourer && (\n        <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {selectedLabourer.firstName} {selectedLabourer.surname}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">ID Number</p>\n                  <p className=\"font-medium\">{selectedLabourer.idNumber}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Date of Birth</p>\n                  <p className=\"font-medium\">\n                    {selectedLabourer.dateOfBirth\n                      ? format(new Date(selectedLabourer.dateOfBirth), \"MMM d, yyyy\")\n                      : \"-\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Gender</p>\n                  <p className=\"font-medium capitalize\">{selectedLabourer.gender || \"-\"}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Contact</p>\n                  <p className=\"font-medium\">{selectedLabourer.contactNumber}</p>\n                </div>\n                <div className=\"col-span-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                  <p className=\"font-medium\">{selectedLabourer.email || \"-\"}</p>\n                </div>\n                <div className=\"col-span-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Physical Address</p>\n                  <p className=\"font-medium\">{selectedLabourer.physicalAddress || \"-\"}</p>\n                </div>\n              </div>\n              \n              <div className=\"border-t pt-4\">\n                <h4 className=\"font-semibold mb-2\">Banking Details</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Bank</p>\n                    <p className=\"font-medium\">{selectedLabourer.bankName}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Account Type</p>\n                    <p className=\"font-medium capitalize\">{selectedLabourer.accountType}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Account Number</p>\n                    <p className=\"font-medium\">{selectedLabourer.accountNumber}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Branch Code</p>\n                    <p className=\"font-medium\">{selectedLabourer.branchCode}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Edit Labourer Dialog */}\n      {selectedLabourer && (\n        <Dialog open={editDialogOpen} onOpenChange={(open) => {\n          setEditDialogOpen(open);\n          if (!open) setSelectedLabourer(null);\n        }}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Labourer: {selectedLabourer.firstName} {selectedLabourer.surname}</DialogTitle>\n            </DialogHeader>\n\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {/* Project Selection */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"projectId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Project *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-project\">\n                              <SelectValue placeholder=\"Select project\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {projects?.map((project) => (\n                              <SelectItem key={project.id} value={project.id}>\n                                {project.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Employee Type */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"employeeTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Employee Type *</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={isLoadingEmployeeTypes}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-employee-type\">\n                              <SelectValue placeholder={isLoadingEmployeeTypes ? \"Loading...\" : \"Select employee type\"} />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {employeeTypes?.map((type) => (\n                              <SelectItem key={type.id} value={type.id}>\n                                {type.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* First Name */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-edit-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Surname */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"surname\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Surname *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-edit-surname\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* ID Number */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SA ID Number / Passport *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"13-digit SA ID or passport\"\n                            data-testid=\"input-edit-id-number\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Date of Birth */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"date\"\n                            value={field.value || \"\"}\n                            data-testid=\"input-edit-dob\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Gender */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-gender\">\n                              <SelectValue placeholder=\"Select gender\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"male\">Male</SelectItem>\n                            <SelectItem value=\"female\">Female</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Contact Number */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"contactNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contact Number *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"+27 or 0 followed by 9 digits\"\n                            data-testid=\"input-edit-contact\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Email */}\n                  <FormField\n                    control={editForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" placeholder=\"Optional\" data-testid=\"input-edit-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Physical Address */}\n                <FormField\n                  control={editForm.control}\n                  name=\"physicalAddress\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Physical Address</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} value={field.value || \"\"} data-testid=\"input-edit-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Banking Details Section */}\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"font-semibold mb-4\">Banking Details</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={editForm.control}\n                      name=\"bankName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Bank Name *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-edit-bank-name\">\n                                <SelectValue placeholder=\"Select a bank\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {SA_BANKS.map((bank) => (\n                                <SelectItem key={bank.name} value={bank.name}>\n                                  {bank.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"accountType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Account Type *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-edit-account-type\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"cheque\">Cheque</SelectItem>\n                              <SelectItem value=\"savings\">Savings</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"accountNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Account Number *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., 1234567890\" data-testid=\"input-edit-account-number\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"branchCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Branch Code * (Auto-filled)</FormLabel>\n                          <FormControl>\n                            <Input {...field} disabled className=\"bg-muted\" data-testid=\"input-edit-branch-code\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* File Uploads Section */}\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"font-semibold mb-4\">Documents</h3>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={editForm.control}\n                      name=\"profilePhotoPath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FileUpload\n                            label=\"Profile Photo\"\n                            accept=\"image/*\"\n                            maxFileSize={5 * 1024 * 1024}\n                            onUploadComplete={(path) => field.onChange(path || undefined)}\n                            currentFilePath={field.value || undefined}\n                            testId=\"upload-edit-profile-photo\"\n                          />\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"idDocumentPath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FileUpload\n                            label=\"ID Document\"\n                            accept=\"image/*,.pdf\"\n                            maxFileSize={10 * 1024 * 1024}\n                            onUploadComplete={(path) => field.onChange(path || undefined)}\n                            currentFilePath={field.value || undefined}\n                            testId=\"upload-edit-id-document\"\n                          />\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={editForm.control}\n                      name=\"bankingProofPath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FileUpload\n                            label=\"Banking Proof\"\n                            accept=\"image/*,.pdf\"\n                            maxFileSize={10 * 1024 * 1024}\n                            onUploadComplete={(path) => field.onChange(path || undefined)}\n                            currentFilePath={field.value || undefined}\n                            testId=\"upload-edit-banking-proof\"\n                          />\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setEditDialogOpen(false);\n                      setSelectedLabourer(null);\n                    }}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateMutation.isPending}\n                    data-testid=\"button-save-edit\"\n                  >\n                    {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":56568},"client/src/components/file-upload.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FileCheck, X } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface FileUploadProps {\n  label: string;\n  accept?: string;\n  maxFileSize?: number;\n  onUploadComplete: (filePath: string) => void;\n  currentFilePath?: string;\n  testId?: string;\n}\n\nexport function FileUpload({\n  label,\n  accept = \"image/*,.pdf\",\n  maxFileSize = 5 * 1024 * 1024, // 5MB default\n  onUploadComplete,\n  currentFilePath,\n  testId,\n}: FileUploadProps) {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [uploadedPath, setUploadedPath] = useState<string | undefined>(currentFilePath);\n  const onUploadCompleteRef = useRef(onUploadComplete);\n  \n  // Keep the callback ref up to date without triggering effect re-runs\n  useEffect(() => {\n    onUploadCompleteRef.current = onUploadComplete;\n  }, [onUploadComplete]);\n\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxFileSize,\n        maxNumberOfFiles: 1,\n        allowedFileTypes: accept.split(\",\").map((type) => type.trim()),\n      },\n    }).use(AwsS3, {\n      shouldUseMultipart: false,\n      async getUploadParameters(file) {\n        const response = await fetch(\"/api/objects/upload\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Failed to get upload URL\");\n        }\n\n        const data = await response.json();\n\n        return {\n          method: \"PUT\",\n          url: data.uploadURL,\n          headers: {\n            \"Content-Type\": file.type || \"application/octet-stream\",\n          },\n        };\n      },\n    })\n  );\n\n  useEffect(() => {\n    const handleUploadSuccess = async (file: any, response: any) => {\n      if (!file || !response.uploadURL) return;\n\n      // Set ACL to private for labourer documents\n      const aclResponse = await fetch(\"/api/objects/acl\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          objectURL: response.uploadURL,\n          visibility: \"private\",\n        }),\n      });\n\n      if (!aclResponse.ok) {\n        console.error(\"Failed to set object ACL\");\n        return;\n      }\n\n      const aclData = await aclResponse.json();\n      setUploadedPath(aclData.objectPath);\n      onUploadCompleteRef.current(aclData.objectPath);\n      setModalOpen(false);\n      \n      // Clear Uppy queue for next upload\n      uppy.cancelAll();\n    };\n\n    uppy.on(\"upload-success\", handleUploadSuccess);\n\n    return () => {\n      uppy.off(\"upload-success\", handleUploadSuccess);\n    };\n  }, [uppy]);\n\n  const handleRemove = () => {\n    setUploadedPath(undefined);\n    onUploadCompleteRef.current(\"\");\n    uppy.cancelAll();\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <label className=\"text-sm font-medium\">{label}</label>\n      \n      {uploadedPath ? (\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <FileCheck className=\"h-5 w-5 text-green-600\" />\n              <span className=\"text-sm\">File uploaded successfully</span>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRemove}\n              data-testid={`${testId}-remove`}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </Card>\n      ) : (\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={() => setModalOpen(true)}\n          className=\"w-full\"\n          data-testid={testId}\n        >\n          <Upload className=\"h-4 w-4 mr-2\" />\n          Upload {label}\n        </Button>\n      )}\n\n      <DashboardModal\n        uppy={uppy}\n        open={modalOpen}\n        onRequestClose={() => setModalOpen(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":4207},"client/src/lib/saIdValidation.ts":{"content":"/**\n * South African ID Number Validation and Extraction Utility\n * \n * SA ID Format: YYMMDD SSSS C A Z (13 digits)\n * - YYMMDD: Date of birth (year, month, day)\n * - SSSS: Gender indicator (0000-4999 = female, 5000-9999 = male)\n * - C: Citizenship (0 = SA citizen, 1 = permanent resident)\n * - A: Usually 8 or 9\n * - Z: Checksum digit (Luhn algorithm)\n */\n\nexport interface SAIdInfo {\n  isValid: boolean;\n  dateOfBirth: Date | null;\n  gender: \"male\" | \"female\" | null;\n  isCitizen: boolean | null;\n  error?: string;\n}\n\n/**\n * Validates and extracts information from a South African ID number or passport\n */\nexport function validateSAId(idNumber: string): SAIdInfo {\n  // Remove any spaces or dashes\n  const cleanId = idNumber.replace(/[\\s-]/g, \"\").toUpperCase();\n\n  // Check if it's a passport (6-9 alphanumeric characters)\n  if (/^[A-Z0-9]{6,9}$/.test(cleanId) && !/^[0-9]{13}$/.test(cleanId)) {\n    // Valid passport - no SA-specific metadata available\n    return {\n      isValid: true,\n      dateOfBirth: null,\n      gender: null,\n      isCitizen: null,\n    };\n  }\n\n  // Check if it's exactly 13 digits (SA ID)\n  if (!/^[0-9]{13}$/.test(cleanId)) {\n    return {\n      isValid: false,\n      dateOfBirth: null,\n      gender: null,\n      isCitizen: null,\n      error: \"Must be a valid SA ID (13 digits) or Passport (6-9 characters)\",\n    };\n  }\n\n  // Extract components\n  const yearStr = cleanId.substring(0, 2);\n  const monthStr = cleanId.substring(2, 4);\n  const dayStr = cleanId.substring(4, 6);\n  const genderDigits = cleanId.substring(6, 10);\n  const citizenDigit = cleanId.substring(10, 11);\n  const checksumDigit = parseInt(cleanId.substring(12, 13));\n\n  // Parse date components\n  const month = parseInt(monthStr, 10);\n  const day = parseInt(dayStr, 10);\n  \n  // Determine century (assume anyone born after current year is from 1900s)\n  const currentYear = new Date().getFullYear();\n  const currentCentury = Math.floor(currentYear / 100) * 100;\n  const yearTwoDigit = parseInt(yearStr, 10);\n  let year = currentCentury + yearTwoDigit;\n  \n  // If the year is in the future, assume it's from the previous century\n  if (year > currentYear) {\n    year -= 100;\n  }\n\n  // Validate date\n  const dateOfBirth = new Date(year, month - 1, day);\n  if (\n    dateOfBirth.getFullYear() !== year ||\n    dateOfBirth.getMonth() !== month - 1 ||\n    dateOfBirth.getDate() !== day ||\n    month < 1 ||\n    month > 12 ||\n    day < 1 ||\n    day > 31\n  ) {\n    return {\n      isValid: false,\n      dateOfBirth: null,\n      gender: null,\n      isCitizen: null,\n      error: \"Invalid date in ID number\",\n    };\n  }\n\n  // Validate age (must be at least 16 years old)\n  const age = Math.floor(\n    (Date.now() - dateOfBirth.getTime()) / (365.25 * 24 * 60 * 60 * 1000)\n  );\n  if (age < 16) {\n    return {\n      isValid: false,\n      dateOfBirth,\n      gender: null,\n      isCitizen: null,\n      error: \"Person must be at least 16 years old\",\n    };\n  }\n\n  // Determine gender (0000-4999 = female, 5000-9999 = male)\n  const genderValue = parseInt(genderDigits, 10);\n  const gender = genderValue < 5000 ? \"female\" : \"male\";\n\n  // Determine citizenship\n  const isCitizen = citizenDigit === \"0\";\n\n  // Validate checksum using Luhn algorithm\n  if (!validateLuhnChecksum(cleanId)) {\n    return {\n      isValid: false,\n      dateOfBirth,\n      gender,\n      isCitizen,\n      error: \"Invalid ID number checksum\",\n    };\n  }\n\n  return {\n    isValid: true,\n    dateOfBirth,\n    gender,\n    isCitizen,\n  };\n}\n\n/**\n * Validates the checksum digit using the Luhn algorithm\n * SA IDs include the checksum in the sum and check if total % 10 == 0\n */\nfunction validateLuhnChecksum(idNumber: string): boolean {\n  let sum = 0;\n\n  // Process all 13 digits from left to right\n  for (let i = 0; i < 13; i++) {\n    let digit = parseInt(idNumber[i], 10);\n\n    // Double every second digit from the left (positions with odd index: 1, 3, 5, 7, 9, 11)\n    if (i % 2 === 1) {\n      digit *= 2;\n      // If doubling produces a number > 9, subtract 9\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n\n    sum += digit;\n  }\n\n  // Valid if sum is divisible by 10\n  return (sum % 10) === 0;\n}\n\n/**\n * Formats a date as YYYY-MM-DD for date input fields\n */\nexport function formatDateForInput(date: Date | null): string {\n  if (!date) return \"\";\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n}\n","size_bytes":4491},"client/src/pages/pay-rates.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Loader2, DollarSign, History } from \"lucide-react\";\nimport { insertPayRateSchema } from \"@shared/schema\";\nimport type { User, Project, PayRate, EmployeeType } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { format } from \"date-fns\";\n\ninterface PayRatesPageProps {\n  user: User;\n}\n\ntype PayRateFormData = z.infer<typeof insertPayRateSchema>;\n\nconst categoryLabels: Record<string, string> = {\n  open_trenching: \"Open Trenching\",\n  close_trenching: \"Close Trenching\",\n  custom: \"Custom\",\n};\n\nconst unitLabels: Record<string, string> = {\n  per_meter: \"Per Meter\",\n  per_day: \"Per Day\",\n  fixed: \"Fixed Amount\",\n};\n\nexport default function PayRatesPage({ user }: PayRatesPageProps) {\n  const { toast } = useToast();\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\");\n  const [historyDialogOpen, setHistoryDialogOpen] = useState(false);\n  const [selectedHistory, setSelectedHistory] = useState<{\n    projectName: string;\n    employeeTypeName: string;\n    category: string;\n    rates: PayRate[];\n  } | null>(null);\n\n  const canManage = \n    user.role === \"super_admin\" || \n    user.role === \"admin\" || \n    user.role === \"project_manager\";\n\n  const form = useForm<PayRateFormData>({\n    resolver: zodResolver(insertPayRateSchema),\n    defaultValues: {\n      projectId: \"\",\n      employeeTypeId: \"\",\n      category: \"open_trenching\",\n      categoryName: \"\",\n      amount: \"\",\n      unit: \"per_meter\",\n      effectiveDate: new Date().toISOString().split(\"T\")[0],\n      createdBy: \"\",\n    },\n  });\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Auto-select first project when projects load\n  useEffect(() => {\n    if (!selectedProjectId && projects && projects.length > 0) {\n      setSelectedProjectId(projects[0].id);\n    }\n  }, [projects, selectedProjectId]);\n\n  const { data: employeeTypes } = useQuery<EmployeeType[]>({\n    queryKey: [\"/api/employee-types\"],\n  });\n\n  const { data: payRates, isLoading } = useQuery<PayRate[]>({\n    queryKey: [`/api/projects/${selectedProjectId}/pay-rates`],\n    enabled: !!selectedProjectId,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: Omit<PayRateFormData, \"createdBy\">) => {\n      return apiRequest(\"POST\", \"/api/pay-rates\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/projects/${selectedProjectId}/pay-rates`] });\n      toast({\n        title: \"Pay rate created\",\n        description: \"The pay rate has been created successfully.\",\n      });\n      setAddDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create pay rate\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAdd = (data: PayRateFormData) => {\n    const { createdBy, ...rateData } = data;\n    // Ensure projectId is included (it's not bound to a form control)\n    const completeData = {\n      ...rateData,\n      projectId: selectedProjectId,\n    };\n    createMutation.mutate(completeData);\n  };\n\n  const viewHistory = (\n    projectName: string,\n    employeeTypeName: string,\n    categoryLabel: string,\n    categoryKey: string,\n    employeeTypeId: string,\n    categoryName?: string\n  ) => {\n    const filteredRates = payRates?.filter((r) => {\n      const employeeTypeMatch = r.employeeTypeId === employeeTypeId;\n      const categoryMatch = r.category === categoryKey;\n      \n      // For custom categories, also check categoryName to differentiate between different custom categories\n      if (categoryKey === \"custom\" && categoryName) {\n        return employeeTypeMatch && categoryMatch && r.categoryName === categoryName;\n      }\n      \n      return employeeTypeMatch && categoryMatch;\n    }) || [];\n    \n    setSelectedHistory({\n      projectName,\n      employeeTypeName,\n      category: categoryLabel,\n      rates: filteredRates,\n    });\n    setHistoryDialogOpen(true);\n  };\n\n  // Group pay rates by employee type and category\n  // For custom categories, also include categoryName in the key to differentiate them\n  const groupedRates = payRates?.reduce((acc, rate) => {\n    const key = rate.category === \"custom\" && rate.categoryName\n      ? `${rate.employeeTypeId}-${rate.category}-${rate.categoryName}`\n      : `${rate.employeeTypeId}-${rate.category}`;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(rate);\n    return acc;\n  }, {} as Record<string, PayRate[]>);\n\n  // Get the latest rate for each employee type/category combination\n  const latestRates = Object.entries(groupedRates || {}).map(([key, rates]) => {\n    const sorted = rates.sort((a, b) => \n      new Date(b.effectiveDate).getTime() - new Date(a.effectiveDate).getTime()\n    );\n    return {\n      key,\n      latest: sorted[0],\n      historyCount: sorted.length,\n    };\n  });\n\n  const selectedProject = projects?.find(p => p.id === selectedProjectId);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Pay Rates</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Configure pay rates per project and employee type\n          </p>\n        </div>\n        {canManage && selectedProjectId && (\n          <Button\n            onClick={() => {\n              form.reset({\n                projectId: selectedProjectId,\n                employeeTypeId: \"\",\n                category: \"open_trenching\",\n                categoryName: \"\",\n                amount: \"\",\n                unit: \"per_meter\",\n                effectiveDate: new Date().toISOString().split(\"T\")[0],\n                createdBy: \"\",\n              });\n              setAddDialogOpen(true);\n            }}\n            data-testid=\"button-add-rate\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Pay Rate\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Project</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n            <SelectTrigger data-testid=\"select-project\">\n              <SelectValue placeholder=\"Choose a project to view pay rates\" />\n            </SelectTrigger>\n            <SelectContent>\n              {projects?.map((project) => (\n                <SelectItem key={project.id} value={project.id}>\n                  {project.name} - {project.location || \"No location\"}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {selectedProjectId && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                Pay Rates - {selectedProject?.name}\n              </CardTitle>\n              <Badge variant=\"outline\">\n                <DollarSign className=\"h-3 w-3 mr-1\" />\n                {latestRates.length} Active Rate{latestRates.length !== 1 ? \"s\" : \"\"}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : latestRates.length > 0 ? (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Employee Type</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Unit</TableHead>\n                    <TableHead>Effective Date</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {latestRates.map(({ key, latest, historyCount }) => {\n                    const employeeType = employeeTypes?.find(\n                      (et) => et.id === latest.employeeTypeId\n                    );\n                    return (\n                      <TableRow key={key} data-testid={`row-rate-${latest.id}`}>\n                        <TableCell className=\"font-medium\">\n                          {employeeType?.name || \"Unknown\"}\n                        </TableCell>\n                        <TableCell>\n                          {latest.category === \"custom\" && latest.categoryName\n                            ? latest.categoryName\n                            : categoryLabels[latest.category] || latest.category}\n                        </TableCell>\n                        <TableCell className=\"font-mono\">\n                          R {Number(latest.amount).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">\n                            {unitLabels[latest.unit] || latest.unit}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {format(new Date(latest.effectiveDate), \"MMM d, yyyy\")}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          {historyCount > 1 && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                const categoryLabel = latest.category === \"custom\" && latest.categoryName\n                                  ? latest.categoryName\n                                  : categoryLabels[latest.category] || latest.category;\n                                viewHistory(\n                                  selectedProject?.name || \"\",\n                                  employeeType?.name || \"\",\n                                  categoryLabel,\n                                  latest.category,\n                                  latest.employeeTypeId,\n                                  latest.categoryName || undefined\n                                );\n                              }}\n                              data-testid={`button-history-${latest.id}`}\n                            >\n                              <History className=\"h-4 w-4 mr-2\" />\n                              History ({historyCount})\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            ) : (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                No pay rates configured for this project yet.\n                {canManage && \" Click 'Add Pay Rate' to get started.\"}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add Pay Rate Dialog */}\n      <Dialog open={addDialogOpen} onOpenChange={setAddDialogOpen}>\n        <DialogContent data-testid=\"dialog-add-rate\">\n          <DialogHeader>\n            <DialogTitle>Add Pay Rate</DialogTitle>\n            <DialogDescription>\n              Create a new pay rate for {selectedProject?.name}. You can add historical rates by setting an effective date.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleAdd)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"employeeTypeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee Type *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-employee-type\">\n                          <SelectValue placeholder=\"Select employee type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {employeeTypes?.filter(et => et.isActive).map((type) => (\n                          <SelectItem key={type.id} value={type.id}>\n                            {type.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"open_trenching\">Open Trenching</SelectItem>\n                        <SelectItem value=\"close_trenching\">Close Trenching</SelectItem>\n                        <SelectItem value=\"custom\">Custom</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              {form.watch(\"category\") === \"custom\" && (\n                <FormField\n                  control={form.control}\n                  name=\"categoryName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Custom Category Name *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., Cable Installation\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-category-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Amount (ZAR) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        inputMode=\"decimal\"\n                        placeholder=\"e.g., 25.50\"\n                        {...field}\n                        value={field.value || \"\"}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          if (value === \"\" || /^\\d*\\.?\\d*$/.test(value)) {\n                            field.onChange(value);\n                          }\n                        }}\n                        data-testid=\"input-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Unit *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-unit\">\n                          <SelectValue placeholder=\"Select unit\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"per_meter\">Per Meter</SelectItem>\n                        <SelectItem value=\"per_day\">Per Day</SelectItem>\n                        <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"effectiveDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Effective Date *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        data-testid=\"input-effective-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setAddDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create Rate\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Rate History Dialog */}\n      <Dialog open={historyDialogOpen} onOpenChange={setHistoryDialogOpen}>\n        <DialogContent className=\"max-w-3xl\" data-testid=\"dialog-history\">\n          <DialogHeader>\n            <DialogTitle>\n              Rate History: {selectedHistory?.employeeTypeName} - {selectedHistory?.category}\n            </DialogTitle>\n            <DialogDescription>\n              Historical pay rates for {selectedHistory?.projectName}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"max-h-96 overflow-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Effective Date</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Unit</TableHead>\n                  <TableHead>Created</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {selectedHistory?.rates\n                  .sort((a, b) => \n                    new Date(b.effectiveDate).getTime() - new Date(a.effectiveDate).getTime()\n                  )\n                  .map((rate, index) => (\n                    <TableRow key={rate.id} data-testid={`history-row-${index}`}>\n                      <TableCell className=\"font-medium\">\n                        {format(new Date(rate.effectiveDate), \"MMM d, yyyy\")}\n                        {index === 0 && (\n                          <Badge variant=\"default\" className=\"ml-2\">Current</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-mono\">\n                        R {Number(rate.amount).toFixed(2)}\n                      </TableCell>\n                      <TableCell>\n                        {unitLabels[rate.unit] || rate.unit}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {rate.createdAt ? format(new Date(rate.createdAt), \"MMM d, yyyy HH:mm\") : \"—\"}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n              </TableBody>\n            </Table>\n          </div>\n          <DialogFooter>\n            <Button\n              onClick={() => setHistoryDialogOpen(false)}\n              data-testid=\"button-close-history\"\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":21271},"client/src/pages/work-log.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Save, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Project, Labourer, PayRate, User } from \"@shared/schema\";\n\ninterface WorkLogEntry {\n  labourerId: string;\n  labourerName: string;\n  employeeTypeId: string;\n  openMeters: string;\n  closeMeters: string;\n  openRate: number;\n  closeRate: number;\n}\n\ninterface WorkLogPageProps {\n  user: User;\n}\n\nexport default function WorkLogPage({ user }: WorkLogPageProps) {\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\");\n  const [workEntries, setWorkEntries] = useState<WorkLogEntry[]>([]);\n  \n  // Track which project we've initialized entries for (prevents refetch resets)\n  const initializedProjectRef = useRef<string>(\"\");\n  \n  // Check if selected date is today (for edit restrictions)\n  const isToday = selectedDate.toDateString() === new Date().toDateString();\n\n  // Fetch user's supervised projects\n  const { data: projects, isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch labourers for selected project\n  const { data: labourers, isLoading: labourersLoading } = useQuery<Labourer[]>({\n    queryKey: selectedProjectId ? [`/api/projects/${selectedProjectId}/labourers`] : [],\n    enabled: !!selectedProjectId,\n  });\n\n  // Fetch pay rates for selected project\n  const { data: payRates } = useQuery<PayRate[]>({\n    queryKey: selectedProjectId ? [`/api/projects/${selectedProjectId}/pay-rates`] : [],\n    enabled: !!selectedProjectId,\n  });\n\n  // Initialize/update work entries when project data changes\n  useEffect(() => {\n    if (!selectedProjectId) {\n      // Clear entries when no project selected\n      setWorkEntries([]);\n      initializedProjectRef.current = \"\";\n      return;\n    }\n\n    if (!labourers || !payRates) {\n      return;\n    }\n\n    // Check if this is a new project\n    const isNewProject = initializedProjectRef.current !== selectedProjectId;\n    \n    if (isNewProject) {\n      // Initialize fresh entries for new project\n      const entries = labourers.map(labourer => {\n        const openRate = payRates.find(\n          rate => rate.employeeTypeId === labourer.employeeTypeId && rate.category === \"open_trenching\"\n        );\n        const closeRate = payRates.find(\n          rate => rate.employeeTypeId === labourer.employeeTypeId && rate.category === \"close_trenching\"\n        );\n\n        return {\n          labourerId: labourer.id,\n          labourerName: `${labourer.firstName} ${labourer.surname}`,\n          employeeTypeId: labourer.employeeTypeId,\n          openMeters: \"0\",\n          closeMeters: \"0\",\n          openRate: openRate ? parseFloat(openRate.amount) : 0,\n          closeRate: closeRate ? parseFloat(closeRate.amount) : 0,\n        };\n      });\n      setWorkEntries(entries);\n      initializedProjectRef.current = selectedProjectId;\n    } else {\n      // Merge: preserve meter inputs, update rates, add new labourers\n      setWorkEntries(prevEntries => {\n        const entryMap = new Map(prevEntries.map(e => [e.labourerId, e]));\n        \n        return labourers.map(labourer => {\n          const existing = entryMap.get(labourer.id);\n          const openRate = payRates.find(\n            rate => rate.employeeTypeId === labourer.employeeTypeId && rate.category === \"open_trenching\"\n          );\n          const closeRate = payRates.find(\n            rate => rate.employeeTypeId === labourer.employeeTypeId && rate.category === \"close_trenching\"\n          );\n\n          return {\n            labourerId: labourer.id,\n            labourerName: `${labourer.firstName} ${labourer.surname}`,\n            employeeTypeId: labourer.employeeTypeId,\n            // Preserve existing meter inputs or default to \"0\" for new labourers\n            openMeters: existing?.openMeters ?? \"0\",\n            closeMeters: existing?.closeMeters ?? \"0\",\n            // Always use latest pay rates\n            openRate: openRate ? parseFloat(openRate.amount) : 0,\n            closeRate: closeRate ? parseFloat(closeRate.amount) : 0,\n          };\n        });\n      });\n    }\n  }, [labourers, payRates, selectedProjectId]);\n\n  const saveWorkLogsMutation = useMutation({\n    mutationFn: async (entries: WorkLogEntry[]) => {\n      const promises = entries\n        .filter(entry => parseFloat(entry.openMeters) > 0 || parseFloat(entry.closeMeters) > 0)\n        .map(entry => {\n          const openMeters = parseFloat(entry.openMeters) || 0;\n          const closeMeters = parseFloat(entry.closeMeters) || 0;\n          const totalEarnings = (openMeters * entry.openRate) + (closeMeters * entry.closeRate);\n\n          return apiRequest(\"POST\", \"/api/work-logs\", {\n            projectId: selectedProjectId,\n            labourerId: entry.labourerId,\n            workDate: format(selectedDate, \"yyyy-MM-dd\"),\n            openTrenchingMeters: openMeters.toString(),\n            closeTrenchingMeters: closeMeters.toString(),\n            totalEarnings: totalEarnings.toString(),\n          });\n        });\n\n      return Promise.all(promises);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Work logs saved\",\n        description: `Successfully saved work logs for ${format(selectedDate, \"PPP\")}`,\n      });\n      // Reset entries\n      setWorkEntries(prev => prev.map(entry => ({ ...entry, openMeters: \"0\", closeMeters: \"0\" })));\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save work logs\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMeterChange = (labourerId: string, field: \"openMeters\" | \"closeMeters\", value: string) => {\n    setWorkEntries(prev =>\n      prev.map(entry =>\n        entry.labourerId === labourerId ? { ...entry, [field]: value } : entry\n      )\n    );\n  };\n\n  const calculateEarnings = (entry: WorkLogEntry) => {\n    const openMeters = parseFloat(entry.openMeters) || 0;\n    const closeMeters = parseFloat(entry.closeMeters) || 0;\n    return (openMeters * entry.openRate) + (closeMeters * entry.closeRate);\n  };\n\n  const totalDailyEarnings = workEntries.reduce((sum, entry) => sum + calculateEarnings(entry), 0);\n\n  const handleSave = () => {\n    if (!selectedProjectId) {\n      toast({\n        title: \"No project selected\",\n        description: \"Please select a project first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Enforce that only today's work can be saved (client-side guard)\n    if (!isToday) {\n      toast({\n        title: \"Cannot Edit Historical Date\",\n        description: \"You can only edit today's work logs. Please submit a correction request to modify historical data.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (workEntries.every(e => parseFloat(e.openMeters) === 0 && parseFloat(e.closeMeters) === 0)) {\n      toast({\n        title: \"No work entered\",\n        description: \"Please enter at least one meter reading\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveWorkLogsMutation.mutate(workEntries);\n  };\n\n  const selectedProject = projects?.find(p => p.id === selectedProjectId);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Daily Work Log</h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Record daily opening and closing trench meters for labourers\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Work Entry</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"project\">Project</Label>\n              <Select value={selectedProjectId} onValueChange={(value) => {\n                setSelectedProjectId(value);\n                setWorkEntries([]);\n              }} disabled={projectsLoading}>\n                <SelectTrigger id=\"project\" data-testid=\"select-project\">\n                  <SelectValue placeholder={projectsLoading ? \"Loading projects...\" : \"Select a project\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {projects?.map((project) => (\n                    <SelectItem key={project.id} value={project.id}>\n                      {project.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Work Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-select-date\">\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {format(selectedDate, \"PPP\")}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={(date) => date && setSelectedDate(date)}\n                    disabled={(date) => date > new Date()}\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n\n          {selectedProjectId && (\n            <>\n              {labourersLoading ? (\n                <div className=\"flex items-center justify-center py-12\">\n                  <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                </div>\n              ) : workEntries.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {!isToday && (\n                    <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-md p-4\">\n                      <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                        <strong>Historical Date Selected:</strong> You can only edit today's work logs. To modify historical data, please submit a correction request via the Audit Trail page.\n                      </p>\n                    </div>\n                  )}\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Labourer</TableHead>\n                          <TableHead className=\"text-right\">Open Trenching (m)</TableHead>\n                          <TableHead className=\"text-right\">Close Trenching (m)</TableHead>\n                          <TableHead className=\"text-right\">Daily Earnings</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {workEntries.map((entry) => (\n                          <TableRow key={entry.labourerId} data-testid={`row-labourer-${entry.labourerId}`}>\n                            <TableCell className=\"font-medium\">{entry.labourerName}</TableCell>\n                            <TableCell className=\"text-right\">\n                              <Input\n                                type=\"number\"\n                                step=\"0.1\"\n                                min=\"0\"\n                                value={entry.openMeters}\n                                onChange={(e) => handleMeterChange(entry.labourerId, \"openMeters\", e.target.value)}\n                                className=\"w-28 text-right font-mono\"\n                                data-testid={`input-open-meters-${entry.labourerId}`}\n                                disabled={!isToday}\n                              />\n                            </TableCell>\n                            <TableCell className=\"text-right\">\n                              <Input\n                                type=\"number\"\n                                step=\"0.1\"\n                                min=\"0\"\n                                value={entry.closeMeters}\n                                onChange={(e) => handleMeterChange(entry.labourerId, \"closeMeters\", e.target.value)}\n                                className=\"w-28 text-right font-mono\"\n                                data-testid={`input-close-meters-${entry.labourerId}`}\n                                disabled={!isToday}\n                              />\n                            </TableCell>\n                            <TableCell className=\"text-right font-mono text-green-600 dark:text-green-400\">\n                              R {calculateEarnings(entry).toFixed(2)}\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                        <TableRow className=\"bg-muted/50\">\n                          <TableCell colSpan={3} className=\"font-semibold text-right\">Total Daily Earnings:</TableCell>\n                          <TableCell className=\"text-right font-mono font-semibold text-green-600 dark:text-green-400\">\n                            R {totalDailyEarnings.toFixed(2)}\n                          </TableCell>\n                        </TableRow>\n                      </TableBody>\n                    </Table>\n                  </div>\n\n                  <div className=\"flex justify-end\">\n                    <Button\n                      onClick={handleSave}\n                      disabled={!isToday || saveWorkLogsMutation.isPending}\n                      data-testid=\"button-save-work-log\"\n                    >\n                      {saveWorkLogsMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      <Save className=\"mr-2 h-4 w-4\" />\n                      {isToday ? \"Save Work Log\" : \"Cannot Edit Historical Date\"}\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  No labourers found for this project\n                </div>\n              )}\n            </>\n          )}\n\n          {!selectedProjectId && (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              Select a project to start logging daily work\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {selectedProject && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Project Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Project Name</p>\n              <p className=\"font-medium\">{selectedProject.name}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Location</p>\n              <p className=\"font-medium\">{selectedProject.location || \"N/A\"}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Labourers</p>\n              <p className=\"font-medium\">{workEntries.length}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Work Date</p>\n              <p className=\"font-medium\">{format(selectedDate, \"PPP\")}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16154},"client/src/pages/project-details.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, ArrowLeft, UserPlus, MapPin, Calendar, DollarSign, TrendingUp, AlertTriangle, FileEdit, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Project, User, Labourer, EmployeeType } from \"@shared/schema\";\nimport { format, startOfDay, isSameDay } from \"date-fns\";\nimport CorrectionRequestDialog from \"@/components/CorrectionRequestDialog\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\n\ninterface ProjectDetailsProps {\n  user: User;\n}\n\nexport default function ProjectDetails({ user }: ProjectDetailsProps) {\n  const params = useParams();\n  const projectId = params.id as string;\n  const { toast } = useToast();\n  const [addLabourerDialogOpen, setAddLabourerDialogOpen] = useState(false);\n  const [selectedLabourerIds, setSelectedLabourerIds] = useState<string[]>([]);\n  const [correctionDialogOpen, setCorrectionDialogOpen] = useState(false);\n  const [selectedEntity, setSelectedEntity] = useState<{ type: \"labourer\" | \"work_log\"; id: string; data: any; displayName?: string } | null>(null);\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 15;\n\n  const { data: project, isLoading: projectLoading } = useQuery<Project>({\n    queryKey: [`/api/projects/${projectId}`],\n  });\n\n  const { data: labourers = [], isLoading: labourersLoading } = useQuery<Labourer[]>({\n    queryKey: [`/api/projects/${projectId}/labourers`],\n    enabled: !!projectId,\n  });\n\n  const { data: availableLabourers = [] } = useQuery<Labourer[]>({\n    queryKey: [\"/api/labourers/available\"],\n    enabled: addLabourerDialogOpen,\n  });\n\n  const { data: employeeTypes = [] } = useQuery<EmployeeType[]>({\n    queryKey: [\"/api/employee-types\"],\n  });\n\n  const { data: projectManagers = [] } = useQuery<User[]>({\n    queryKey: [`/api/projects/${projectId}/managers`],\n    enabled: !!projectId,\n  });\n\n  const { data: projectSupervisors = [] } = useQuery<User[]>({\n    queryKey: [`/api/projects/${projectId}/supervisors`],\n    enabled: !!projectId,\n  });\n\n  const { data: workLogs = [] } = useQuery<any[]>({\n    queryKey: [`/api/projects/${projectId}/work-logs`],\n    enabled: !!projectId,\n  });\n\n  const handleAssignLabourers = async () => {\n    if (selectedLabourerIds.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select at least one labourer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\"POST\", `/api/projects/${projectId}/labourers`, {\n        labourerIds: selectedLabourerIds,\n      });\n\n      toast({\n        title: \"Success\",\n        description: `${selectedLabourerIds.length} labourer${selectedLabourerIds.length > 1 ? 's' : ''} assigned successfully`,\n      });\n\n      queryClient.invalidateQueries({ queryKey: [`/api/projects/${projectId}/labourers`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/labourers/available\"] });\n      setAddLabourerDialogOpen(false);\n      setSelectedLabourerIds([]);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign labourers\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleLabourerSelection = (labourerId: string) => {\n    setSelectedLabourerIds(prev =>\n      prev.includes(labourerId)\n        ? prev.filter(id => id !== labourerId)\n        : [...prev, labourerId]\n    );\n  };\n\n  if (projectLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (!project) {\n    return (\n      <div className=\"space-y-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() => (window.location.href = \"/projects\")}\n          data-testid=\"button-back-to-projects\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Projects\n        </Button>\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-muted-foreground\">Project not found</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const canManage = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\" || user.role === \"project_admin\";\n\n  const totalMetersOpened = workLogs.reduce((sum: number, log: any) => sum + (Number(log.openTrenchingMeters) || 0), 0);\n  const totalMetersClosed = workLogs.reduce((sum: number, log: any) => sum + (Number(log.closeTrenchingMeters) || 0), 0);\n  const totalEarnings = workLogs.reduce((sum: number, log: any) => sum + (Number(log.totalEarnings) || 0), 0);\n  \n  // Budget tracking calculations\n  const budget = project.budget ? Number(project.budget) : 0;\n  const remainingBudget = budget - totalEarnings;\n  const budgetUsedPercentage = budget > 0 ? (totalEarnings / budget) * 100 : 0;\n  const isOverBudget = totalEarnings > budget && budget > 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={() => (window.location.href = \"/projects\")}\n          data-testid=\"button-back-to-projects\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Projects\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl\" data-testid=\"text-project-name\">\n                {project.name}\n              </CardTitle>\n              <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                {project.location && (\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span data-testid=\"text-project-location\">{project.location}</span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Created {format(new Date(project.createdAt!), \"MMM d, yyyy\")}</span>\n                </div>\n                {project.budget && (\n                  <div className=\"flex items-center gap-1\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span>R{Number(project.budget).toLocaleString()}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <Badge\n              variant={project.status === \"active\" ? \"default\" : \"secondary\"}\n              data-testid=\"badge-project-status\"\n            >\n              {project.status}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold mb-3\">Payment Details</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Payment Frequency:</span>\n                  <span className=\"font-medium capitalize\">{project.paymentPeriod || \"fortnightly\"}</span>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-3\">Team</h3>\n              <div className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Project Managers:</span>\n                  <div className=\"mt-1\">\n                    {projectManagers.length > 0 ? (\n                      projectManagers.map((pm: User) => (\n                        <Badge key={pm.id} variant=\"outline\" className=\"mr-2\">\n                          {pm.firstName} {pm.lastName}\n                        </Badge>\n                      ))\n                    ) : (\n                      <span className=\"text-muted-foreground text-xs\">None assigned</span>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Supervisors:</span>\n                  <div className=\"mt-1\">\n                    {projectSupervisors.length > 0 ? (\n                      projectSupervisors.map((sup: User) => (\n                        <Badge key={sup.id} variant=\"outline\" className=\"mr-2\">\n                          {sup.firstName} {sup.lastName}\n                        </Badge>\n                      ))\n                    ) : (\n                      <span className=\"text-muted-foreground text-xs\">None assigned</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"labourers\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"labourers\" data-testid=\"tab-labourers\">\n            Labourers ({labourers.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"work-logs\" data-testid=\"tab-work-logs\">\n            Work Log History ({workLogs.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"progress\" data-testid=\"tab-progress\">\n            Progress Summary\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"labourers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n              <CardTitle>Labourers</CardTitle>\n              {canManage && (\n                <Button\n                  onClick={() => setAddLabourerDialogOpen(true)}\n                  data-testid=\"button-add-labourer\"\n                >\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\n                  Add Labourer\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              {labourersLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                </div>\n              ) : labourers.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No labourers assigned to this project yet\n                </p>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>ID Number</TableHead>\n                      <TableHead>Employee Type</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Bank Details</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {labourers.map((labourer) => {\n                      const empType = employeeTypes.find(et => et.id === labourer.employeeTypeId);\n                      return (\n                        <TableRow key={labourer.id} data-testid={`row-labourer-${labourer.id}`}>\n                          <TableCell className=\"font-medium\">\n                            {labourer.firstName} {labourer.surname}\n                          </TableCell>\n                          <TableCell>{labourer.idNumber}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{empType?.name || \"Unknown\"}</Badge>\n                          </TableCell>\n                          <TableCell>{labourer.contactNumber}</TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <div>{labourer.bankName}</div>\n                              <div className=\"text-muted-foreground\">\n                                {labourer.accountNumber}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"text-right\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedEntity({\n                                  type: \"labourer\",\n                                  id: labourer.id,\n                                  data: labourer,\n                                  displayName: `${labourer.firstName} ${labourer.surname}`\n                                });\n                                setCorrectionDialogOpen(true);\n                              }}\n                              data-testid={`button-request-correction-${labourer.id}`}\n                            >\n                              <FileEdit className=\"h-4 w-4 mr-2\" />\n                              Request Correction\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"work-logs\" className=\"space-y-4\">\n          {(() => {\n            const filteredWorkLogs = workLogs.filter((log: any) => \n              isSameDay(new Date(log.workDate), selectedDate)\n            );\n            \n            const totalPages = Math.ceil(filteredWorkLogs.length / itemsPerPage);\n            const startIndex = (currentPage - 1) * itemsPerPage;\n            const paginatedWorkLogs = filteredWorkLogs.slice(startIndex, startIndex + itemsPerPage);\n            \n            const dateStats = {\n              totalOpenMeters: filteredWorkLogs.reduce((sum: number, log: any) => \n                sum + (Number(log.openTrenchingMeters) || 0), 0),\n              totalCloseMeters: filteredWorkLogs.reduce((sum: number, log: any) => \n                sum + (Number(log.closeTrenchingMeters) || 0), 0),\n              totalEarnings: filteredWorkLogs.reduce((sum: number, log: any) => \n                sum + (Number(log.totalEarnings) || 0), 0),\n              workersCount: new Set(filteredWorkLogs.map((log: any) => log.labourerId)).size,\n            };\n\n            return (\n              <>\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n                    <CardTitle>Work Log History</CardTitle>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          data-testid=\"button-select-work-log-date\"\n                        >\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          {format(selectedDate, \"MMM d, yyyy\")}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"end\">\n                        <CalendarComponent\n                          mode=\"single\"\n                          selected={selectedDate}\n                          onSelect={(date) => {\n                            if (date) {\n                              setSelectedDate(date);\n                              setCurrentPage(1);\n                            }\n                          }}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <Card>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                            Workers\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\" data-testid=\"text-date-workers-count\">\n                            {dateStats.workersCount}\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                            Open Meters\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\" data-testid=\"text-date-open-meters\">\n                            {dateStats.totalOpenMeters.toFixed(1)} m\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                            Close Meters\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold\" data-testid=\"text-date-close-meters\">\n                            {dateStats.totalCloseMeters.toFixed(1)} m\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <Card>\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                            Total Earnings\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-date-total-earnings\">\n                            R{dateStats.totalEarnings.toFixed(2)}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    {filteredWorkLogs.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\">\n                        No work logs recorded for {format(selectedDate, \"MMM d, yyyy\")}\n                      </p>\n                    ) : (\n                      <>\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              <TableHead>Labourer</TableHead>\n                              <TableHead className=\"text-right\">Open Trenching (m)</TableHead>\n                              <TableHead className=\"text-right\">Close Trenching (m)</TableHead>\n                              <TableHead className=\"text-right\">Total Earnings</TableHead>\n                              <TableHead className=\"text-right\">Actions</TableHead>\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {paginatedWorkLogs.map((log: any) => {\n                              const labourer = labourers.find(l => l.id === log.labourerId);\n                              return (\n                                <TableRow key={log.id} data-testid={`row-work-log-${log.id}`}>\n                                  <TableCell className=\"font-medium\">\n                                    {labourer ? `${labourer.firstName} ${labourer.surname}` : \"Unknown\"}\n                                  </TableCell>\n                                  <TableCell className=\"text-right font-mono\">\n                                    {(Number(log.openTrenchingMeters) || 0).toFixed(1)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right font-mono\">\n                                    {(Number(log.closeTrenchingMeters) || 0).toFixed(1)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right font-mono text-green-600 dark:text-green-400\">\n                                    R{(Number(log.totalEarnings) || 0).toFixed(2)}\n                                  </TableCell>\n                                  <TableCell className=\"text-right\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        setSelectedEntity({\n                                          type: \"work_log\",\n                                          id: log.id,\n                                          data: {\n                                            ...log,\n                                            workDate: format(new Date(log.workDate), \"yyyy-MM-dd\")\n                                          },\n                                          displayName: `${labourer ? `${labourer.firstName} ${labourer.surname}` : \"Unknown\"} - ${format(new Date(log.workDate), \"MMM d, yyyy\")}`\n                                        });\n                                        setCorrectionDialogOpen(true);\n                                      }}\n                                      data-testid={`button-request-correction-work-log-${log.id}`}\n                                    >\n                                      <FileEdit className=\"h-4 w-4 mr-2\" />\n                                      Request Correction\n                                    </Button>\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })}\n                          </TableBody>\n                        </Table>\n\n                        {totalPages > 1 && (\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm text-muted-foreground\">\n                              Showing {startIndex + 1}-{Math.min(startIndex + itemsPerPage, filteredWorkLogs.length)} of {filteredWorkLogs.length} entries\n                            </p>\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                                disabled={currentPage === 1}\n                                data-testid=\"button-previous-page\"\n                              >\n                                <ChevronLeft className=\"h-4 w-4\" />\n                                Previous\n                              </Button>\n                              <span className=\"text-sm\" data-testid=\"text-page-info\">\n                                Page {currentPage} of {totalPages}\n                              </span>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                                disabled={currentPage === totalPages}\n                                data-testid=\"button-next-page\"\n                              >\n                                Next\n                                <ChevronRight className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n              </>\n            );\n          })()}\n        </TabsContent>\n\n        <TabsContent value=\"progress\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Total Meters Opened\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-meters-opened\">\n                  {totalMetersOpened.toFixed(2)} m\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Total Meters Closed\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-meters-closed\">\n                  {totalMetersClosed.toFixed(2)} m\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Total Earnings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-earnings\">\n                  R{totalEarnings.toFixed(2)}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {budget > 0 && (\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Budget Tracking\n                </CardTitle>\n                {isOverBudget && (\n                  <Badge variant=\"destructive\" className=\"gap-1\" data-testid=\"badge-over-budget\">\n                    <AlertTriangle className=\"h-3 w-3\" />\n                    Over Budget\n                  </Badge>\n                )}\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <div className=\"text-sm text-muted-foreground mb-1\">Budget Allocated</div>\n                    <div className=\"text-lg font-semibold\" data-testid=\"text-budget-allocated\">\n                      R{budget.toLocaleString()}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground mb-1\">Total Spending</div>\n                    <div className=\"text-lg font-semibold\" data-testid=\"text-total-spending\">\n                      R{totalEarnings.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-muted-foreground mb-1\">Remaining</div>\n                    <div \n                      className={`text-lg font-semibold ${isOverBudget ? 'text-destructive' : 'text-foreground'}`}\n                      data-testid=\"text-remaining-budget\"\n                    >\n                      {isOverBudget ? '-' : ''}R{Math.abs(remainingBudget).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Budget Used</span>\n                    <span className=\"font-medium\" data-testid=\"text-budget-percentage\">\n                      {budgetUsedPercentage.toFixed(1)}%\n                    </span>\n                  </div>\n                  <Progress \n                    value={Math.min(budgetUsedPercentage, 100)} \n                    className=\"h-2\"\n                    data-testid=\"progress-budget\"\n                  />\n                </div>\n\n                {isOverBudget && (\n                  <div className=\"bg-destructive/10 border border-destructive/20 rounded-md p-3\">\n                    <p className=\"text-sm text-destructive font-medium\">\n                      Project has exceeded budget by R{Math.abs(remainingBudget).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Work Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Total Work Days Logged:</span>\n                  <span className=\"font-medium\">{workLogs.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Active Labourers:</span>\n                  <span className=\"font-medium\">{labourers.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Completion Rate:</span>\n                  <span className=\"font-medium\">\n                    {totalMetersOpened > 0\n                      ? ((totalMetersClosed / totalMetersOpened) * 100).toFixed(1)\n                      : 0}%\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <Dialog open={addLabourerDialogOpen} onOpenChange={(open) => {\n        setAddLabourerDialogOpen(open);\n        if (!open) setSelectedLabourerIds([]);\n      }}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Assign Labourers to Project</DialogTitle>\n            <DialogDescription>\n              Select labourers who are not currently assigned to any active project\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"flex-1 overflow-y-auto space-y-2 pr-2\">{availableLabourers.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No available labourers to assign\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {availableLabourers.map((labourer) => {\n                  const employeeType = employeeTypes.find(t => t.id === labourer.employeeTypeId);\n                  return (\n                    <div\n                      key={labourer.id}\n                      className=\"flex items-start space-x-3 p-3 rounded-md border hover-elevate\"\n                      data-testid={`labourer-item-${labourer.id}`}\n                    >\n                      <Checkbox\n                        id={labourer.id}\n                        checked={selectedLabourerIds.includes(labourer.id)}\n                        onCheckedChange={() => toggleLabourerSelection(labourer.id)}\n                        data-testid={`checkbox-labourer-${labourer.id}`}\n                      />\n                      <label\n                        htmlFor={labourer.id}\n                        className=\"flex-1 cursor-pointer text-sm\"\n                      >\n                        <div className=\"font-medium\">\n                          {labourer.firstName} {labourer.surname}\n                        </div>\n                        <div className=\"text-muted-foreground space-y-1 mt-1\">\n                          <div>ID: {labourer.idNumber}</div>\n                          <div>Type: {employeeType?.name || 'Unknown'}</div>\n                          <div>Contact: {labourer.contactNumber}</div>\n                        </div>\n                      </label>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          <DialogFooter className=\"mt-4\">\n            <div className=\"flex items-center justify-between w-full\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedLabourerIds.length} selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setAddLabourerDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleAssignLabourers}\n                  disabled={selectedLabourerIds.length === 0}\n                  data-testid=\"button-assign-labourers\"\n                >\n                  Assign {selectedLabourerIds.length > 0 && `(${selectedLabourerIds.length})`}\n                </Button>\n              </div>\n            </div>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {selectedEntity && (\n        <CorrectionRequestDialog\n          open={correctionDialogOpen}\n          onOpenChange={setCorrectionDialogOpen}\n          entityType={selectedEntity.type}\n          entityId={selectedEntity.id}\n          entityData={selectedEntity.data}\n          user={user}\n          entityDisplayName={selectedEntity.displayName}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":34543},"client/src/pages/bulk-labourers.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, Trash2, Upload } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Project, EmployeeType, User } from \"@shared/schema\";\n\ninterface BulkLabourersProps {\n  user: User;\n}\n\ninterface LabourerRow {\n  firstName: string;\n  surname: string;\n  idNumber: string;\n  dateOfBirth: string;\n  contactNumber: string;\n  employeeTypeId: string;\n  email: string;\n  gender: string;\n  physicalAddress: string;\n  bankName: string;\n  accountNumber: string;\n  accountType: string;\n  branchCode: string;\n}\n\nexport default function BulkLabourers({ user }: BulkLabourersProps) {\n  const { toast } = useToast();\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\");\n  const [labourers, setLabourers] = useState<LabourerRow[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [csvText, setCsvText] = useState(\"\");\n\n  const { data: projects = [], isLoading: loadingProjects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: employeeTypes = [], isLoading: loadingTypes } = useQuery<EmployeeType[]>({\n    queryKey: [\"/api/employee-types\"],\n  });\n\n  const activeProjects = projects.filter((p) => p.status === \"active\");\n\n  const addEmptyRow = () => {\n    setLabourers([\n      ...labourers,\n      {\n        firstName: \"\",\n        surname: \"\",\n        idNumber: \"\",\n        dateOfBirth: \"\",\n        contactNumber: \"\",\n        employeeTypeId: \"\",\n        email: \"\",\n        gender: \"\",\n        physicalAddress: \"\",\n        bankName: \"\",\n        accountNumber: \"\",\n        accountType: \"savings\",\n        branchCode: \"\",\n      },\n    ]);\n  };\n\n  const removeRow = (index: number) => {\n    setLabourers(labourers.filter((_, i) => i !== index));\n  };\n\n  const updateRow = (index: number, field: keyof LabourerRow, value: string) => {\n    const updated = [...labourers];\n    updated[index][field] = value;\n    setLabourers(updated);\n  };\n\n  const parseCsv = () => {\n    if (!csvText.trim()) {\n      toast({\n        title: \"No data\",\n        description: \"Please paste CSV data first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const lines = csvText.trim().split(\"\\n\");\n    const parsed: LabourerRow[] = [];\n\n    lines.forEach((line, idx) => {\n      if (idx === 0) return; // Skip header row\n      const parts = line.split(/[,\\t]/).map((p) => p.trim());\n      \n      if (parts.length >= 11) {\n        parsed.push({\n          firstName: parts[0] || \"\",\n          surname: parts[1] || \"\",\n          idNumber: parts[2] || \"\",\n          dateOfBirth: parts[3] || \"\",\n          contactNumber: parts[4] || \"\",\n          employeeTypeId: parts[5] || \"\",\n          email: parts[6] || \"\",\n          gender: parts[7] || \"\",\n          physicalAddress: parts[8] || \"\",\n          bankName: parts[9] || \"\",\n          accountNumber: parts[10] || \"\",\n          accountType: parts[11] || \"savings\",\n          branchCode: parts[12] || \"\",\n        });\n      }\n    });\n\n    if (parsed.length === 0) {\n      toast({\n        title: \"No valid rows\",\n        description: \"Could not parse any valid labourer rows from CSV\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLabourers(parsed);\n    setCsvText(\"\");\n    toast({\n      title: \"CSV Parsed\",\n      description: `Loaded ${parsed.length} labourers from CSV`,\n    });\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedProjectId) {\n      toast({\n        title: \"Select a project\",\n        description: \"Please select a project before submitting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (labourers.length === 0) {\n      toast({\n        title: \"No labourers\",\n        description: \"Please add at least one labourer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate required fields\n    for (let i = 0; i < labourers.length; i++) {\n      const l = labourers[i];\n      if (!l.firstName || !l.surname || !l.idNumber || !l.dateOfBirth || !l.contactNumber || !l.employeeTypeId || !l.bankName || !l.accountNumber || !l.branchCode) {\n        toast({\n          title: \"Missing required fields\",\n          description: `Row ${i + 1} is missing required fields`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setIsSubmitting(true);\n    try {\n      const labourersData = labourers.map((l) => ({\n        ...l,\n        projectId: selectedProjectId,\n      }));\n\n      await apiRequest(\"POST\", \"/api/labourers/bulk\", { labourers: labourersData });\n\n      const count = labourers.length;\n      const projectId = selectedProjectId;\n      \n      // Clear form first\n      setLabourers([]);\n      setSelectedProjectId(\"\");\n\n      toast({\n        title: \"Success\",\n        description: `Successfully created ${count} labourers`,\n      });\n      \n      // Invalidate queries\n      await queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      await queryClient.invalidateQueries({ queryKey: [`/api/projects/${projectId}/labourers`] });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create labourers\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (loadingProjects || loadingTypes) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\" data-testid=\"loading-bulk-labourers\">\n        <Loader2 className=\"w-8 h-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold\" data-testid=\"heading-bulk-labourers\">Bulk Labourer Entry</h1>\n        <p className=\"text-muted-foreground\">Add multiple labourers to a project at once</p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Project Selection</CardTitle>\n            <CardDescription>Select the project to add labourers to</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"project-select\">Project</Label>\n              <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n                <SelectTrigger id=\"project-select\" data-testid=\"select-project\">\n                  <SelectValue placeholder=\"Select a project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeProjects.map((project) => (\n                    <SelectItem key={project.id} value={project.id}>\n                      {project.name} - {project.location}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>CSV Import</CardTitle>\n            <CardDescription>\n              Paste CSV data with columns: First Name, Surname, ID Number, Date of Birth (YYYY-MM-DD), Contact Number, Employee Type ID, Email, Gender, Address, Bank Name, Account Number, Account Type, Branch Code\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Paste your CSV data here...\"\n              value={csvText}\n              onChange={(e) => setCsvText(e.target.value)}\n              rows={6}\n              data-testid=\"textarea-csv\"\n            />\n            <Button onClick={parseCsv} variant=\"outline\" data-testid=\"button-parse-csv\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Parse CSV\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <div>\n              <CardTitle>Labourers ({labourers.length})</CardTitle>\n              <CardDescription>Enter labourer details or use CSV import above</CardDescription>\n            </div>\n            <Button onClick={addEmptyRow} size=\"sm\" data-testid=\"button-add-row\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Row\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 max-h-[600px] overflow-y-auto\">\n              {labourers.length === 0 && (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No labourers added yet. Click \"Add Row\" or use CSV import.\n                </p>\n              )}\n              {labourers.map((labourer, index) => (\n                <div key={index} className=\"p-4 border rounded-lg space-y-3\" data-testid={`labourer-row-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold\">Labourer {index + 1}</h3>\n                    <Button onClick={() => removeRow(index)} variant=\"ghost\" size=\"sm\" data-testid={`button-remove-${index}`}>\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                    <div>\n                      <Label>First Name *</Label>\n                      <Input\n                        value={labourer.firstName}\n                        onChange={(e) => updateRow(index, \"firstName\", e.target.value)}\n                        placeholder=\"John\"\n                        data-testid={`input-firstName-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Surname *</Label>\n                      <Input\n                        value={labourer.surname}\n                        onChange={(e) => updateRow(index, \"surname\", e.target.value)}\n                        placeholder=\"Doe\"\n                        data-testid={`input-surname-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>ID Number *</Label>\n                      <Input\n                        value={labourer.idNumber}\n                        onChange={(e) => updateRow(index, \"idNumber\", e.target.value)}\n                        placeholder=\"9001015000000\"\n                        data-testid={`input-idNumber-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Date of Birth *</Label>\n                      <Input\n                        type=\"date\"\n                        value={labourer.dateOfBirth}\n                        onChange={(e) => updateRow(index, \"dateOfBirth\", e.target.value)}\n                        data-testid={`input-dateOfBirth-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Contact Number *</Label>\n                      <Input\n                        value={labourer.contactNumber}\n                        onChange={(e) => updateRow(index, \"contactNumber\", e.target.value)}\n                        placeholder=\"0123456789\"\n                        data-testid={`input-contactNumber-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Employee Type *</Label>\n                      <Select\n                        value={labourer.employeeTypeId}\n                        onValueChange={(value) => updateRow(index, \"employeeTypeId\", value)}\n                      >\n                        <SelectTrigger data-testid={`select-employeeType-${index}`}>\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {employeeTypes.map((type) => (\n                            <SelectItem key={type.id} value={type.id}>\n                              {type.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>Email</Label>\n                      <Input\n                        type=\"email\"\n                        value={labourer.email}\n                        onChange={(e) => updateRow(index, \"email\", e.target.value)}\n                        placeholder=\"john@example.com\"\n                        data-testid={`input-email-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Gender</Label>\n                      <Select\n                        value={labourer.gender}\n                        onValueChange={(value) => updateRow(index, \"gender\", value)}\n                      >\n                        <SelectTrigger data-testid={`select-gender-${index}`}>\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Male\">Male</SelectItem>\n                          <SelectItem value=\"Female\">Female</SelectItem>\n                          <SelectItem value=\"Other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>Physical Address</Label>\n                      <Input\n                        value={labourer.physicalAddress}\n                        onChange={(e) => updateRow(index, \"physicalAddress\", e.target.value)}\n                        placeholder=\"123 Main St\"\n                        data-testid={`input-physicalAddress-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Bank Name *</Label>\n                      <Input\n                        value={labourer.bankName}\n                        onChange={(e) => updateRow(index, \"bankName\", e.target.value)}\n                        placeholder=\"FNB\"\n                        data-testid={`input-bankName-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Account Number *</Label>\n                      <Input\n                        value={labourer.accountNumber}\n                        onChange={(e) => updateRow(index, \"accountNumber\", e.target.value)}\n                        placeholder=\"1234567890\"\n                        data-testid={`input-accountNumber-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Account Type *</Label>\n                      <Select\n                        value={labourer.accountType}\n                        onValueChange={(value) => updateRow(index, \"accountType\", value)}\n                      >\n                        <SelectTrigger data-testid={`select-accountType-${index}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"savings\">Savings</SelectItem>\n                          <SelectItem value=\"current\">Current</SelectItem>\n                          <SelectItem value=\"transmission\">Transmission</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>Branch Code *</Label>\n                      <Input\n                        value={labourer.branchCode}\n                        onChange={(e) => updateRow(index, \"branchCode\", e.target.value)}\n                        placeholder=\"250655\"\n                        data-testid={`input-branchCode-${index}`}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end gap-4\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || !selectedProjectId || labourers.length === 0}\n            data-testid=\"button-submit-bulk\"\n          >\n            {isSubmitting && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n            Create {labourers.length} Labourer{labourers.length !== 1 ? \"s\" : \"\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16901},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, FileText, Loader2, TrendingUp } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Project, User, Labourer } from \"@shared/schema\";\n\ninterface ReportsProps {\n  user: User;\n}\n\ninterface PayrollReportEntry {\n  labourerId: string;\n  labourerName: string;\n  idNumber: string;\n  totalOpenMeters: number;\n  totalCloseMeters: number;\n  totalEarnings: number;\n}\n\ninterface PayrollReport {\n  projectId: string;\n  projectName: string;\n  startDate: string;\n  endDate: string;\n  paymentPeriod: string;\n  openRate: number;\n  closeRate: number;\n  entries: PayrollReportEntry[];\n  grandTotal: number;\n}\n\ninterface WorkerActivityRow {\n  workDate?: string;\n  weekStart?: string;\n  month?: string;\n  labourerId: string;\n  labourerName: string;\n  idNumber: string;\n  openMeters: number;\n  closeMeters: number;\n  totalMeters: number;\n  earnings: number;\n  daysWorked?: number;\n}\n\ninterface WorkerActivityReport {\n  projectId: string;\n  projectName: string;\n  startDate: string;\n  endDate: string;\n  groupBy: string;\n  data: WorkerActivityRow[];\n  totals: {\n    openMeters: number;\n    closeMeters: number;\n    totalMeters: number;\n    earnings: number;\n  };\n}\n\ninterface WorkerMatrixRow {\n  labourerId: string;\n  labourerName: string;\n  idNumber: string;\n  dailyValues: Array<{\n    opens: number;\n    closes: number;\n    total: number;\n  }>;\n  rowTotals: {\n    opens: number;\n    closes: number;\n    total: number;\n    totalAmount: number;\n  };\n}\n\ninterface WorkerMatrixReport {\n  projectId: string;\n  projectName: string;\n  startDate: string;\n  endDate: string;\n  dates: string[];\n  rows: WorkerMatrixRow[];\n}\n\nexport default function Reports({ user }: ReportsProps) {\n  const { toast } = useToast();\n  \n  // Payroll Report State\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"\");\n  const [startDate, setStartDate] = useState<string>(\"\");\n  const [endDate, setEndDate] = useState<string>(\"\");\n  const [report, setReport] = useState<PayrollReport | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  // Worker Activity Report State\n  const [activityProjectId, setActivityProjectId] = useState<string>(\"\");\n  const [activityLabourerId, setActivityLabourerId] = useState<string>(\"all\");\n  const [activityStartDate, setActivityStartDate] = useState<string>(\"\");\n  const [activityEndDate, setActivityEndDate] = useState<string>(\"\");\n  const [activityGroupBy, setActivityGroupBy] = useState<string>(\"daily\");\n  const [activityReport, setActivityReport] = useState<WorkerActivityReport | null>(null);\n  const [isGeneratingActivity, setIsGeneratingActivity] = useState(false);\n\n  // Worker Matrix Report State\n  const [matrixProjectId, setMatrixProjectId] = useState<string>(\"\");\n  const [matrixStartDate, setMatrixStartDate] = useState<string>(\"\");\n  const [matrixEndDate, setMatrixEndDate] = useState<string>(\"\");\n  const [matrixReport, setMatrixReport] = useState<WorkerMatrixReport | null>(null);\n  const [isGeneratingMatrix, setIsGeneratingMatrix] = useState(false);\n\n  const { data: projects = [], isLoading: loadingProjects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const activeProjects = projects.filter((p) => p.status === \"active\" || p.status === \"completed\");\n  \n  const selectedProject = projects.find(p => p.id === selectedProjectId);\n  const selectedActivityProject = projects.find(p => p.id === activityProjectId);\n\n  // Fetch labourers for the selected activity project\n  const { data: labourers = [] } = useQuery<Labourer[]>({\n    queryKey: [\"/api/projects\", activityProjectId, \"labourers\"],\n    enabled: !!activityProjectId,\n  });\n\n  const generateReport = async () => {\n    if (!selectedProjectId || !startDate || !endDate) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a project and date range\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(endDate) < new Date(startDate)) {\n      toast({\n        title: \"Invalid Date Range\",\n        description: \"End date must be after start date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsGenerating(true);\n      const response = await fetch(\n        `/api/reports/payroll?projectId=${selectedProjectId}&startDate=${startDate}&endDate=${endDate}`\n      );\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to generate report\");\n      }\n      \n      const data: PayrollReport = await response.json();\n      setReport(data);\n      toast({\n        title: \"Report Generated\",\n        description: `Found ${data.entries.length} workers with total earnings of R ${data.grandTotal.toFixed(2)}`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const generateActivityReport = async () => {\n    // CRITICAL: Dates are mandatory for accurate reporting\n    if (!activityProjectId || !activityStartDate || !activityEndDate) {\n      toast({\n        title: \"Missing Required Information\",\n        description: \"Project and date range are required for accurate reporting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(activityEndDate) < new Date(activityStartDate)) {\n      toast({\n        title: \"Invalid Date Range\",\n        description: \"End date must be after start date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsGeneratingActivity(true);\n      const params = new URLSearchParams({\n        projectId: activityProjectId,\n        startDate: activityStartDate,\n        endDate: activityEndDate,\n        groupBy: activityGroupBy,\n      });\n      \n      if (activityLabourerId && activityLabourerId !== 'all') {\n        params.append('labourerId', activityLabourerId);\n      }\n      \n      const response = await fetch(`/api/reports/worker-activity?${params.toString()}`);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to generate worker activity report\");\n      }\n      \n      const data: WorkerActivityReport = await response.json();\n      setActivityReport(data);\n      toast({\n        title: \"Report Generated\",\n        description: `Found ${data.data.length} ${activityGroupBy} records for the selected period`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate worker activity report\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGeneratingActivity(false);\n    }\n  };\n\n  const exportToCSV = () => {\n    if (!report) return;\n\n    const headers = [\"Worker Name\", \"ID Number\", \"Open Trenches (m)\", \"Close Trenches (m)\", \"Earnings\"];\n    const rows = report.entries.map(entry => [\n      entry.labourerName,\n      entry.idNumber,\n      entry.totalOpenMeters.toFixed(2),\n      entry.totalCloseMeters.toFixed(2),\n      `R ${entry.totalEarnings.toFixed(2)}`,\n    ]);\n    rows.push([\"\", \"\", \"\", \"Total\", `R ${report.grandTotal.toFixed(2)}`]);\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...rows.map(row => row.join(\",\")),\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `payroll_${report.projectName}_${report.startDate}_to_${report.endDate}.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const generateMatrixReport = async () => {\n    // CRITICAL: Dates are mandatory for accurate reporting\n    if (!matrixProjectId || !matrixStartDate || !matrixEndDate) {\n      toast({\n        title: \"Missing Required Information\",\n        description: \"Project and date range are required for matrix view\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(matrixEndDate) < new Date(matrixStartDate)) {\n      toast({\n        title: \"Invalid Date Range\",\n        description: \"End date must be after start date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setIsGeneratingMatrix(true);\n      const params = new URLSearchParams({\n        projectId: matrixProjectId,\n        startDate: matrixStartDate,\n        endDate: matrixEndDate,\n      });\n      \n      const response = await fetch(`/api/reports/worker-activity-matrix?${params.toString()}`);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to generate worker activity matrix\");\n      }\n      \n      const data: WorkerMatrixReport = await response.json();\n      setMatrixReport(data);\n      toast({\n        title: \"Matrix Generated\",\n        description: `Showing ${data.rows.length} workers across ${data.dates.length} days`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate worker activity matrix\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGeneratingMatrix(false);\n    }\n  };\n\n  const exportActivityToCSV = () => {\n    if (!activityReport) return;\n\n    let headers: string[];\n    let rows: string[][];\n\n    if (activityGroupBy === 'daily') {\n      headers = [\"Date\", \"Worker Name\", \"ID Number\", \"Open Trenches (m)\", \"Close Trenches (m)\", \"Total Trenches (m)\", \"Earnings\"];\n      rows = activityReport.data.map(row => [\n        row.workDate || \"\",\n        row.labourerName,\n        row.idNumber,\n        row.openMeters.toFixed(2),\n        row.closeMeters.toFixed(2),\n        row.totalMeters.toFixed(2),\n        `R ${row.earnings.toFixed(2)}`,\n      ]);\n    } else if (activityGroupBy === 'weekly') {\n      headers = [\"Week Start\", \"Worker Name\", \"ID Number\", \"Days Worked\", \"Open Trenches (m)\", \"Close Trenches (m)\", \"Total Trenches (m)\", \"Earnings\"];\n      rows = activityReport.data.map(row => [\n        row.weekStart || \"\",\n        row.labourerName,\n        row.idNumber,\n        (row.daysWorked || 0).toString(),\n        row.openMeters.toFixed(2),\n        row.closeMeters.toFixed(2),\n        row.totalMeters.toFixed(2),\n        `R ${row.earnings.toFixed(2)}`,\n      ]);\n    } else {\n      headers = [\"Month\", \"Worker Name\", \"ID Number\", \"Days Worked\", \"Open Trenches (m)\", \"Close Trenches (m)\", \"Total Trenches (m)\", \"Earnings\"];\n      rows = activityReport.data.map(row => [\n        row.month || \"\",\n        row.labourerName,\n        row.idNumber,\n        (row.daysWorked || 0).toString(),\n        row.openMeters.toFixed(2),\n        row.closeMeters.toFixed(2),\n        row.totalMeters.toFixed(2),\n        `R ${row.earnings.toFixed(2)}`,\n      ]);\n    }\n\n    rows.push([\n      \"TOTAL\",\n      \"\",\n      \"\",\n      ...(activityGroupBy !== 'daily' ? [\"\"] : []),\n      activityReport.totals.openMeters.toFixed(2),\n      activityReport.totals.closeMeters.toFixed(2),\n      activityReport.totals.totalMeters.toFixed(2),\n      `R ${activityReport.totals.earnings.toFixed(2)}`,\n    ]);\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...rows.map(row => row.join(\",\")),\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `worker_activity_${activityReport.projectName}_${activityReport.startDate}_to_${activityReport.endDate}_${activityGroupBy}.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <FileText className=\"w-8 h-8 text-primary\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-reports\">Reports</h1>\n          <p className=\"text-muted-foreground\">Generate payroll summaries and worker activity reports with date-specific filtering</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"matrix\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"matrix\" data-testid=\"tab-matrix\">\n            <TrendingUp className=\"w-4 h-4 mr-2\" />\n            Matrix View\n          </TabsTrigger>\n          <TabsTrigger value=\"activity\" data-testid=\"tab-activity\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Detailed View\n          </TabsTrigger>\n          <TabsTrigger value=\"payroll\" data-testid=\"tab-payroll\">\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Payroll Summary\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"matrix\" className=\"space-y-6 mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Worker Activity Matrix</CardTitle>\n              <CardDescription>📊 View all workers across all dates in a single grid - workers as rows, dates as columns</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"matrix-project\">Project *</Label>\n                  <Select\n                    value={matrixProjectId}\n                    onValueChange={setMatrixProjectId}\n                    disabled={loadingProjects}\n                  >\n                    <SelectTrigger id=\"matrix-project\" data-testid=\"select-matrix-project\">\n                      <SelectValue placeholder=\"Select project\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {activeProjects.map((project) => (\n                        <SelectItem key={project.id} value={project.id}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"matrix-start-date\">Start Date *</Label>\n                  <Input\n                    id=\"matrix-start-date\"\n                    type=\"date\"\n                    value={matrixStartDate}\n                    onChange={(e) => setMatrixStartDate(e.target.value)}\n                    data-testid=\"input-matrix-start-date\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"matrix-end-date\">End Date *</Label>\n                  <Input\n                    id=\"matrix-end-date\"\n                    type=\"date\"\n                    value={matrixEndDate}\n                    onChange={(e) => setMatrixEndDate(e.target.value)}\n                    data-testid=\"input-matrix-end-date\"\n                    required\n                  />\n                </div>\n\n              </div>\n\n              <Button\n                onClick={generateMatrixReport}\n                disabled={!matrixProjectId || !matrixStartDate || !matrixEndDate || isGeneratingMatrix}\n                className=\"w-full md:w-auto\"\n                data-testid=\"button-generate-matrix\"\n              >\n                {isGeneratingMatrix ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  \"Generate Matrix\"\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {matrixReport && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Worker Activity Matrix</CardTitle>\n                    <CardDescription>\n                      Period: {new Date(matrixReport.startDate).toLocaleDateString()} to {new Date(matrixReport.endDate).toLocaleDateString()} • {matrixReport.rows.length} workers × {matrixReport.dates.length} days\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      {/* First header row: Dates */}\n                      <TableRow className=\"bg-yellow-100 dark:bg-yellow-900/30\">\n                        <TableHead rowSpan={2} className=\"sticky left-0 bg-yellow-100 dark:bg-yellow-900/30 z-20 min-w-[200px] border-r-2 border-yellow-200 dark:border-yellow-800\">\n                          Worker Name\n                        </TableHead>\n                        {matrixReport.dates.map((date) => (\n                          <TableHead key={date} colSpan={2} className=\"text-center border-r border-yellow-200 dark:border-yellow-800\">\n                            {new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </TableHead>\n                        ))}\n                        <TableHead rowSpan={2} className=\"sticky right-0 bg-yellow-100 dark:bg-yellow-900/30 z-20 text-center min-w-[90px] font-bold border-l-2 border-yellow-200 dark:border-yellow-800\">\n                          Final Opens\n                        </TableHead>\n                        <TableHead rowSpan={2} className=\"bg-yellow-100 dark:bg-yellow-900/30 text-center min-w-[90px] font-bold\">\n                          Final Closes\n                        </TableHead>\n                        <TableHead rowSpan={2} className=\"bg-yellow-100 dark:bg-yellow-900/30 text-center min-w-[120px] font-bold\">\n                          Total Amount\n                        </TableHead>\n                      </TableRow>\n                      {/* Second header row: Open/Close */}\n                      <TableRow className=\"bg-yellow-100 dark:bg-yellow-900/30\">\n                        {matrixReport.dates.map((date, idx) => (\n                          <>\n                            <TableHead key={`${date}-open`} className=\"text-center text-xs min-w-[60px]\">\n                              Open\n                            </TableHead>\n                            <TableHead key={`${date}-close`} className=\"text-center text-xs min-w-[60px] border-r border-yellow-200 dark:border-yellow-800\">\n                              Close\n                            </TableHead>\n                          </>\n                        ))}\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {matrixReport.rows.map((row) => (\n                        <TableRow key={row.labourerId} data-testid={`matrix-row-${row.labourerId}`}>\n                          <TableCell className=\"sticky left-0 bg-background z-10 font-medium border-r-2\">\n                            {row.labourerName}\n                          </TableCell>\n                          {row.dailyValues.map((dayValue, idx) => (\n                            <>\n                              <TableCell key={`${idx}-open`} className=\"text-center font-mono text-sm\">\n                                {dayValue.opens > 0 ? dayValue.opens.toFixed(0) : '0'}\n                              </TableCell>\n                              <TableCell key={`${idx}-close`} className=\"text-center font-mono text-sm border-r\">\n                                {dayValue.closes > 0 ? dayValue.closes.toFixed(0) : '0'}\n                              </TableCell>\n                            </>\n                          ))}\n                          <TableCell className=\"sticky right-0 bg-muted/50 z-10 text-center font-bold border-l-2 font-mono\">\n                            {row.rowTotals.opens.toFixed(0)}\n                          </TableCell>\n                          <TableCell className=\"bg-muted/50 text-center font-bold font-mono\">\n                            {row.rowTotals.closes.toFixed(0)}\n                          </TableCell>\n                          <TableCell className=\"bg-muted/50 text-center font-bold font-mono\">\n                            R{row.rowTotals.totalAmount.toLocaleString('en-ZA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"payroll\" className=\"space-y-6 mt-6\">\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Report Parameters</CardTitle>\n          <CardDescription>Choose project and payment period dates</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"project\">Project</Label>\n              <Select\n                value={selectedProjectId}\n                onValueChange={setSelectedProjectId}\n                disabled={loadingProjects}\n              >\n                <SelectTrigger id=\"project\" data-testid=\"select-project\">\n                  <SelectValue placeholder=\"Select project\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {activeProjects.map((project) => (\n                    <SelectItem key={project.id} value={project.id}>\n                      {project.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedProject && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Payment Period: {selectedProject.paymentPeriod === \"fortnightly\" ? \"Fortnightly\" : \"Monthly\"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"startDate\">Start Date</Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                data-testid=\"input-start-date\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"endDate\">End Date</Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                data-testid=\"input-end-date\"\n              />\n            </div>\n          </div>\n\n          <Button\n            onClick={generateReport}\n            disabled={!selectedProjectId || !startDate || !endDate || isGenerating}\n            className=\"w-full md:w-auto\"\n            data-testid=\"button-generate-report\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Generating...\n              </>\n            ) : (\n              \"Generate Report\"\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {report && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Payroll Report</CardTitle>\n                <CardDescription>\n                  Period: {new Date(report.startDate).toLocaleDateString()} to {new Date(report.endDate).toLocaleDateString()}\n                  <br />\n                  Rates: Opening R{report.openRate} • Closing R{report.closeRate}\n                </CardDescription>\n              </div>\n              <Button onClick={exportToCSV} variant=\"outline\" data-testid=\"button-export-csv\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Worker Name</TableHead>\n                    <TableHead>ID Number</TableHead>\n                    <TableHead className=\"text-right\">Open Trenches (m)</TableHead>\n                    <TableHead className=\"text-right\">Close Trenches (m)</TableHead>\n                    <TableHead className=\"text-right\">Earnings</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {!report.entries || report.entries.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                        No work logs found for this period\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    <>\n                      {(report.entries || []).map((entry) => (\n                        <TableRow key={entry.labourerId} data-testid={`row-labourer-${entry.labourerId}`}>\n                          <TableCell className=\"font-medium\">{entry.labourerName}</TableCell>\n                          <TableCell className=\"font-mono text-sm\">{entry.idNumber}</TableCell>\n                          <TableCell className=\"text-right\">{entry.totalOpenMeters.toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">{entry.totalCloseMeters.toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right font-semibold\">\n                            R {entry.totalEarnings.toFixed(2)}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      <TableRow className=\"bg-muted/50 font-bold\">\n                        <TableCell colSpan={2}>Total</TableCell>\n                        <TableCell className=\"text-right\">\n                          {(report.entries || []).reduce((sum, e) => sum + e.totalOpenMeters, 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          {(report.entries || []).reduce((sum, e) => sum + e.totalCloseMeters, 0).toFixed(2)}\n                        </TableCell>\n                        <TableCell className=\"text-right\" data-testid=\"text-grand-total\">\n                          R {report.grandTotal.toFixed(2)}\n                        </TableCell>\n                      </TableRow>\n                    </>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n        </TabsContent>\n\n        <TabsContent value=\"activity\" className=\"space-y-6 mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Worker Activity Report</CardTitle>\n              <CardDescription>⚠️ Date-specific filtering required for accurate worker activity tracking</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"activity-project\">Project *</Label>\n                  <Select\n                    value={activityProjectId}\n                    onValueChange={setActivityProjectId}\n                    disabled={loadingProjects}\n                  >\n                    <SelectTrigger id=\"activity-project\" data-testid=\"select-activity-project\">\n                      <SelectValue placeholder=\"Select project\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {activeProjects.map((project) => (\n                        <SelectItem key={project.id} value={project.id}>\n                          {project.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"activity-worker\">Worker</Label>\n                  <Select\n                    value={activityLabourerId}\n                    onValueChange={setActivityLabourerId}\n                    disabled={!activityProjectId}\n                  >\n                    <SelectTrigger id=\"activity-worker\" data-testid=\"select-activity-worker\">\n                      <SelectValue placeholder=\"All workers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Workers</SelectItem>\n                      {labourers.map((labourer) => (\n                        <SelectItem key={labourer.id} value={labourer.id}>\n                          {labourer.firstName} {labourer.surname}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"activity-start-date\">Start Date *</Label>\n                  <Input\n                    id=\"activity-start-date\"\n                    type=\"date\"\n                    value={activityStartDate}\n                    onChange={(e) => setActivityStartDate(e.target.value)}\n                    data-testid=\"input-activity-start-date\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"activity-end-date\">End Date *</Label>\n                  <Input\n                    id=\"activity-end-date\"\n                    type=\"date\"\n                    value={activityEndDate}\n                    onChange={(e) => setActivityEndDate(e.target.value)}\n                    data-testid=\"input-activity-end-date\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <div className=\"space-y-2 flex-1\">\n                  <Label htmlFor=\"group-by\">View By</Label>\n                  <Select value={activityGroupBy} onValueChange={setActivityGroupBy}>\n                    <SelectTrigger id=\"group-by\" data-testid=\"select-group-by\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button\n                  onClick={generateActivityReport}\n                  disabled={!activityProjectId || !activityStartDate || !activityEndDate || isGeneratingActivity}\n                  className=\"mt-8\"\n                  data-testid=\"button-generate-activity\"\n                >\n                  {isGeneratingActivity ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : (\n                    \"Generate Report\"\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {activityReport && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Worker Activity - {activityGroupBy.charAt(0).toUpperCase() + activityGroupBy.slice(1)} View</CardTitle>\n                    <CardDescription>\n                      Period: {new Date(activityReport.startDate).toLocaleDateString()} to {new Date(activityReport.endDate).toLocaleDateString()}\n                    </CardDescription>\n                  </div>\n                  <Button onClick={exportActivityToCSV} variant=\"outline\" data-testid=\"button-export-activity-csv\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export CSV\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        {activityGroupBy === 'daily' && <TableHead>Date</TableHead>}\n                        {activityGroupBy === 'weekly' && <TableHead>Week Start</TableHead>}\n                        {activityGroupBy === 'monthly' && <TableHead>Month</TableHead>}\n                        <TableHead>Worker Name</TableHead>\n                        <TableHead>ID Number</TableHead>\n                        {activityGroupBy !== 'daily' && <TableHead className=\"text-right\">Days Worked</TableHead>}\n                        <TableHead className=\"text-right\">Open Trenches (m)</TableHead>\n                        <TableHead className=\"text-right\">Close Trenches (m)</TableHead>\n                        <TableHead className=\"text-right\">Total Trenches (m)</TableHead>\n                        <TableHead className=\"text-right\">Earnings</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {!activityReport.data || activityReport.data.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={activityGroupBy === 'daily' ? 7 : 8} className=\"text-center text-muted-foreground\">\n                            No work activity found for this period\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        <>\n                          {activityReport.data.map((row, idx) => (\n                            <TableRow key={idx} data-testid={`row-activity-${idx}`}>\n                              {activityGroupBy === 'daily' && <TableCell className=\"font-mono text-sm\">{new Date(row.workDate!).toLocaleDateString()}</TableCell>}\n                              {activityGroupBy === 'weekly' && <TableCell className=\"font-mono text-sm\">{new Date(row.weekStart!).toLocaleDateString()}</TableCell>}\n                              {activityGroupBy === 'monthly' && <TableCell className=\"font-mono text-sm\">{row.month}</TableCell>}\n                              <TableCell className=\"font-medium\">{row.labourerName}</TableCell>\n                              <TableCell className=\"font-mono text-sm\">{row.idNumber}</TableCell>\n                              {activityGroupBy !== 'daily' && <TableCell className=\"text-right\">{row.daysWorked}</TableCell>}\n                              <TableCell className=\"text-right\">{row.openMeters.toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right\">{row.closeMeters.toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right font-medium\">{row.totalMeters.toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right font-semibold\">R {row.earnings.toFixed(2)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow className=\"bg-muted/50 font-bold\">\n                            <TableCell colSpan={activityGroupBy === 'daily' ? 3 : 4}>Total</TableCell>\n                            <TableCell className=\"text-right\">{activityReport.totals.openMeters.toFixed(2)}</TableCell>\n                            <TableCell className=\"text-right\">{activityReport.totals.closeMeters.toFixed(2)}</TableCell>\n                            <TableCell className=\"text-right\">{activityReport.totals.totalMeters.toFixed(2)}</TableCell>\n                            <TableCell className=\"text-right\" data-testid=\"text-activity-total\">\n                              R {activityReport.totals.earnings.toFixed(2)}\n                            </TableCell>\n                          </TableRow>\n                        </>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":36960},"client/src/pages/audit.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Loader2, CheckCircle, XCircle, FileText, Clock } from \"lucide-react\";\nimport { insertCorrectionRequestSchema } from \"@shared/schema\";\nimport type { User, CorrectionRequest } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { format, parseISO } from \"date-fns\";\n\ninterface AuditPageProps {\n  user: User;\n}\n\ntype CorrectionRequestFormData = z.infer<typeof insertCorrectionRequestSchema>;\n\nconst statusColors: Record<string, string> = {\n  pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n  approved: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  rejected: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n};\n\nconst statusLabels: Record<string, string> = {\n  pending: \"Pending\",\n  approved: \"Approved\",\n  rejected: \"Rejected\",\n};\n\nexport default function AuditPage({ user }: AuditPageProps) {\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState<CorrectionRequest | null>(null);\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n\n  const canCreate = true; // All authenticated users can create correction requests\n  const canReview = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\";\n\n  const createForm = useForm<CorrectionRequestFormData>({\n    resolver: zodResolver(insertCorrectionRequestSchema),\n    defaultValues: {\n      entityType: \"\",\n      entityId: \"\",\n      fieldName: \"\",\n      oldValue: \"\",\n      newValue: \"\",\n      reason: \"\",\n      requestedBy: \"\",\n    },\n  });\n\n  const { data: requests, isLoading } = useQuery<CorrectionRequest[]>({\n    queryKey: [\"/api/correction-requests\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CorrectionRequestFormData) => {\n      // Populate requestedBy with current user ID\n      const payload = {\n        ...data,\n        requestedBy: user.id,\n      };\n      return apiRequest(\"POST\", \"/api/correction-requests\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/correction-requests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Correction request submitted successfully\",\n      });\n      setCreateDialogOpen(false);\n      createForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create correction request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes: string }) => {\n      return apiRequest(\"PUT\", `/api/correction-requests/${id}`, {\n        status,\n        reviewedBy: user.id,\n        reviewedAt: new Date().toISOString(),\n        reviewNotes: notes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/correction-requests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Correction request reviewed successfully\",\n      });\n      setReviewDialogOpen(false);\n      setReviewNotes(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to review correction request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRequests = requests?.filter(request => {\n    if (selectedStatus !== \"all\" && request.status !== selectedStatus) return false;\n    return true;\n  }) || [];\n\n  const handleViewDetails = (request: CorrectionRequest) => {\n    setSelectedRequest(request);\n    setDetailsDialogOpen(true);\n  };\n\n  const handleReview = (request: CorrectionRequest) => {\n    setSelectedRequest(request);\n    setReviewDialogOpen(true);\n  };\n\n  const handleApprove = () => {\n    if (!selectedRequest) return;\n    reviewMutation.mutate({\n      id: selectedRequest.id,\n      status: \"approved\",\n      notes: reviewNotes,\n    });\n  };\n\n  const handleReject = () => {\n    if (!selectedRequest) return;\n    reviewMutation.mutate({\n      id: selectedRequest.id,\n      status: \"rejected\",\n      notes: reviewNotes,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Audit Trail</h1>\n          <p className=\"text-muted-foreground\">Track and manage data correction requests</p>\n        </div>\n        {canCreate && (\n          <Button onClick={() => setCreateDialogOpen(true)} data-testid=\"button-create-request\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            New Request\n          </Button>\n        )}\n      </div>\n\n      <div className=\"flex gap-4\">\n        <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n          <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"pending\">Pending</SelectItem>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"rejected\">Rejected</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Correction Requests</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            </div>\n          ) : filteredRequests.length === 0 ? (\n            <div className=\"text-center p-8 text-muted-foreground\">\n              No correction requests found\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Entity Type</TableHead>\n                  <TableHead>Field</TableHead>\n                  <TableHead>Change</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Requested</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredRequests.map(request => (\n                  <TableRow key={request.id} data-testid={`row-request-${request.id}`}>\n                    <TableCell className=\"font-medium\">\n                      {request.entityType}\n                    </TableCell>\n                    <TableCell>{request.fieldName}</TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs truncate\">\n                        <span className=\"text-muted-foreground line-through\">{request.oldValue || \"N/A\"}</span>\n                        {\" → \"}\n                        <span className=\"font-medium\">{request.newValue}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[request.status]} data-testid={`status-${request.id}`}>\n                        {statusLabels[request.status]}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm\">\n                          {request.requestedAt && format(typeof request.requestedAt === 'string' ? parseISO(request.requestedAt) : request.requestedAt, \"MMM d, yyyy\")}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleViewDetails(request)}\n                          data-testid={`button-view-${request.id}`}\n                        >\n                          <FileText className=\"mr-2 h-4 w-4\" />\n                          Details\n                        </Button>\n                        {canReview && request.status === \"pending\" && (\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            onClick={() => handleReview(request)}\n                            data-testid={`button-review-${request.id}`}\n                          >\n                            Review\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Create Correction Request Dialog */}\n      <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n        <DialogContent data-testid=\"dialog-create-request\">\n          <DialogHeader>\n            <DialogTitle>Create Correction Request</DialogTitle>\n            <DialogDescription>\n              Request a change to existing data with proper approval workflow\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...createForm}>\n            <form onSubmit={createForm.handleSubmit((data) => createMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={createForm.control}\n                name=\"entityType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Entity Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-entity-type\">\n                          <SelectValue placeholder=\"Select entity type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"work_log\">Work Log</SelectItem>\n                        <SelectItem value=\"labourer\">Labourer</SelectItem>\n                        <SelectItem value=\"project\">Project</SelectItem>\n                        <SelectItem value=\"payment_period\">Payment Period</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"entityId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Entity ID</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter entity ID\" {...field} data-testid=\"input-entity-id\" />\n                    </FormControl>\n                    <FormDescription>\n                      The ID of the record you want to change\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"fieldName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Field Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., openTrenchingMeters\" {...field} data-testid=\"input-field-name\" />\n                    </FormControl>\n                    <FormDescription>\n                      The name of the field to change\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"oldValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Current Value</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Current value\" {...field} value={field.value || \"\"} data-testid=\"input-old-value\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"newValue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>New Value</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Desired new value\" {...field} data-testid=\"input-new-value\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"reason\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reason for Change</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Explain why this change is needed\"\n                        {...field}\n                        data-testid=\"input-reason\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-create\">\n                  {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Submit Request\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Details Dialog */}\n      <Dialog open={detailsDialogOpen} onOpenChange={setDetailsDialogOpen}>\n        <DialogContent data-testid=\"dialog-request-details\">\n          <DialogHeader>\n            <DialogTitle>Correction Request Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Status</p>\n                  <Badge className={statusColors[selectedRequest.status]}>\n                    {statusLabels[selectedRequest.status]}\n                  </Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Requested</p>\n                  <p>{selectedRequest.requestedAt && format(typeof selectedRequest.requestedAt === 'string' ? parseISO(selectedRequest.requestedAt) : selectedRequest.requestedAt, \"MMM d, yyyy HH:mm\")}</p>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Entity</p>\n                <p className=\"font-medium\">{selectedRequest.entityType} (ID: {selectedRequest.entityId})</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Field</p>\n                <p className=\"font-medium\">{selectedRequest.fieldName}</p>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Change</p>\n                <div className=\"p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm\">\n                    <span className=\"text-muted-foreground line-through\">{selectedRequest.oldValue || \"N/A\"}</span>\n                    {\" → \"}\n                    <span className=\"font-medium text-primary\">{selectedRequest.newValue}</span>\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Reason</p>\n                <p className=\"text-sm\">{selectedRequest.reason}</p>\n              </div>\n\n              {selectedRequest.reviewedBy && (\n                <>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Reviewed</p>\n                    <p>{selectedRequest.reviewedAt ? format(typeof selectedRequest.reviewedAt === 'string' ? parseISO(selectedRequest.reviewedAt) : selectedRequest.reviewedAt, \"MMM d, yyyy HH:mm\") : \"N/A\"}</p>\n                  </div>\n                  {selectedRequest.reviewNotes && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Review Notes</p>\n                      <p className=\"text-sm\">{selectedRequest.reviewNotes}</p>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDetailsDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Review Dialog */}\n      <Dialog open={reviewDialogOpen} onOpenChange={setReviewDialogOpen}>\n        <DialogContent data-testid=\"dialog-review-request\">\n          <DialogHeader>\n            <DialogTitle>Review Correction Request</DialogTitle>\n            <DialogDescription>\n              Approve or reject this data change request\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Change</p>\n                <div className=\"p-3 bg-muted rounded-md\">\n                  <p className=\"text-sm font-mono\">\n                    <span className=\"text-muted-foreground line-through\">{selectedRequest.oldValue || \"N/A\"}</span>\n                    {\" → \"}\n                    <span className=\"font-medium text-primary\">{selectedRequest.newValue}</span>\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Reason</p>\n                <p className=\"text-sm\">{selectedRequest.reason}</p>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Review Notes (optional)</label>\n                <Textarea\n                  value={reviewNotes}\n                  onChange={(e) => setReviewNotes(e.target.value)}\n                  placeholder=\"Add any notes about your decision\"\n                  data-testid=\"input-review-notes\"\n                />\n              </div>\n            </div>\n          )}\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setReviewDialogOpen(false);\n                setReviewNotes(\"\");\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={handleReject}\n              disabled={reviewMutation.isPending}\n              data-testid=\"button-reject-review\"\n            >\n              <XCircle className=\"mr-2 h-4 w-4\" />\n              Reject\n            </Button>\n            <Button\n              variant=\"default\"\n              onClick={handleApprove}\n              disabled={reviewMutation.isPending}\n              data-testid=\"button-approve-review\"\n            >\n              <CheckCircle className=\"mr-2 h-4 w-4\" />\n              Approve\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":21085},"client/src/pages/payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Loader2, CheckCircle, XCircle, Send, Calendar, DollarSign, Download } from \"lucide-react\";\nimport { insertPaymentPeriodSchema } from \"@shared/schema\";\nimport type { User, Project, PaymentPeriod, PaymentPeriodEntry, Labourer } from \"@shared/schema\";\nimport type { z } from \"zod\";\nimport { format, parseISO } from \"date-fns\";\n\ninterface PaymentsPageProps {\n  user: User;\n}\n\ntype PaymentPeriodFormData = z.infer<typeof insertPaymentPeriodSchema>;\n\nconst statusColors: Record<string, string> = {\n  open: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\",\n  submitted: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n  approved: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  rejected: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n  paid: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n};\n\nconst statusLabels: Record<string, string> = {\n  open: \"Open\",\n  submitted: \"Submitted\",\n  approved: \"Approved\",\n  rejected: \"Rejected\",\n  paid: \"Paid\",\n};\n\nexport default function PaymentsPage({ user }: PaymentsPageProps) {\n  const { toast } = useToast();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [detailsDialogOpen, setDetailsDialogOpen] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState<PaymentPeriod | null>(null);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n\n  const canCreate = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\";\n  const canApprove = user.role === \"super_admin\" || user.role === \"admin\" || user.role === \"project_manager\";\n  const canSubmit = true; // Any authenticated user can submit\n\n  const createForm = useForm<PaymentPeriodFormData>({\n    resolver: zodResolver(insertPaymentPeriodSchema),\n    defaultValues: {\n      projectId: \"\",\n      startDate: \"\",\n      endDate: \"\",\n    },\n  });\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Get all payment periods across all projects\n  const { data: allPeriods, isLoading } = useQuery<PaymentPeriod[]>({\n    queryKey: [\"/api/payment-periods/all\"],\n    queryFn: async () => {\n      if (!projects || projects.length === 0) return [];\n      \n      const periodPromises = projects.map(project =>\n        fetch(`/api/projects/${project.id}/payment-periods`)\n          .then(res => res.ok ? res.json() : [])\n      );\n      \n      const results = await Promise.all(periodPromises);\n      return results.flat();\n    },\n    enabled: !!projects,\n  });\n\n  const { data: entries } = useQuery<(PaymentPeriodEntry & { labourer?: Labourer })[]>({\n    queryKey: [\"/api/payment-periods\", selectedPeriod?.id, \"entries\"],\n    queryFn: async () => {\n      if (!selectedPeriod) return [];\n      const response = await fetch(`/api/payment-periods/${selectedPeriod.id}/entries`);\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedPeriod && detailsDialogOpen,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: PaymentPeriodFormData) => {\n      // Backend will auto-calculate totalAmount from work logs\n      return apiRequest(\"POST\", \"/api/payment-periods\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-periods/all\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payment period created successfully\",\n      });\n      setCreateDialogOpen(false);\n      createForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create payment period\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status, userId }: { id: string; status: string; userId: string }) => {\n      const updateData: any = { status };\n      \n      if (status === \"submitted\") {\n        updateData.submittedBy = userId;\n        updateData.submittedAt = new Date().toISOString();\n      } else if (status === \"approved\") {\n        updateData.approvedBy = userId;\n        updateData.approvedAt = new Date().toISOString();\n      }\n      \n      return apiRequest(\"PUT\", `/api/payment-periods/${id}`, updateData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-periods/all\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payment period status updated successfully\",\n      });\n      setDetailsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update payment period\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredPeriods = allPeriods?.filter(period => {\n    if (selectedProjectId !== \"all\" && period.projectId !== selectedProjectId) return false;\n    if (selectedStatus !== \"all\" && period.status !== selectedStatus) return false;\n    return true;\n  }) || [];\n\n  const getProjectName = (projectId: string) => {\n    return projects?.find(p => p.id === projectId)?.name || \"Unknown Project\";\n  };\n\n  const handleViewDetails = (period: PaymentPeriod) => {\n    setSelectedPeriod(period);\n    setDetailsDialogOpen(true);\n  };\n\n  const handleSubmit = (period: PaymentPeriod) => {\n    updateStatusMutation.mutate({\n      id: period.id,\n      status: \"submitted\",\n      userId: user.id,\n    });\n  };\n\n  const handleApprove = (period: PaymentPeriod) => {\n    updateStatusMutation.mutate({\n      id: period.id,\n      status: \"approved\",\n      userId: user.id,\n    });\n  };\n\n  const handleReject = (period: PaymentPeriod) => {\n    updateStatusMutation.mutate({\n      id: period.id,\n      status: \"rejected\",\n      userId: user.id,\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Payment Periods</h1>\n          <p className=\"text-muted-foreground\">Manage fortnightly payment cycles and approvals</p>\n        </div>\n        {canCreate && (\n          <Button onClick={() => setCreateDialogOpen(true)} data-testid=\"button-create-period\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Period\n          </Button>\n        )}\n      </div>\n\n      <div className=\"flex gap-4\">\n        <Select value={selectedProjectId} onValueChange={setSelectedProjectId}>\n          <SelectTrigger className=\"w-64\" data-testid=\"select-project-filter\">\n            <SelectValue placeholder=\"Filter by project\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Projects</SelectItem>\n            {projects?.map(project => (\n              <SelectItem key={project.id} value={project.id}>\n                {project.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n          <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"open\">Open</SelectItem>\n            <SelectItem value=\"submitted\">Submitted</SelectItem>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"rejected\">Rejected</SelectItem>\n            <SelectItem value=\"paid\">Paid</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment Periods</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center p-8\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n            </div>\n          ) : filteredPeriods.length === 0 ? (\n            <div className=\"text-center p-8 text-muted-foreground\">\n              No payment periods found\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Project</TableHead>\n                  <TableHead>Period</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Total Amount</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredPeriods.map(period => (\n                  <TableRow key={period.id} data-testid={`row-period-${period.id}`}>\n                    <TableCell className=\"font-medium\">\n                      {getProjectName(period.projectId)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>\n                          {format(parseISO(period.startDate), \"MMM d, yyyy\")} - {format(parseISO(period.endDate), \"MMM d, yyyy\")}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[period.status]} data-testid={`status-${period.id}`}>\n                        {statusLabels[period.status]}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right font-mono\">\n                      R {parseFloat(period.totalAmount).toFixed(2)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleViewDetails(period)}\n                          data-testid={`button-view-${period.id}`}\n                        >\n                          View Details\n                        </Button>\n                        {canSubmit && period.status === \"open\" && (\n                          <Button\n                            variant=\"default\"\n                            size=\"sm\"\n                            onClick={() => handleSubmit(period)}\n                            disabled={updateStatusMutation.isPending}\n                            data-testid={`button-submit-${period.id}`}\n                          >\n                            <Send className=\"mr-2 h-4 w-4\" />\n                            Submit\n                          </Button>\n                        )}\n                        {canApprove && period.status === \"submitted\" && (\n                          <>\n                            <Button\n                              variant=\"default\"\n                              size=\"sm\"\n                              onClick={() => handleApprove(period)}\n                              disabled={updateStatusMutation.isPending}\n                              data-testid={`button-approve-${period.id}`}\n                            >\n                              <CheckCircle className=\"mr-2 h-4 w-4\" />\n                              Approve\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleReject(period)}\n                              disabled={updateStatusMutation.isPending}\n                              data-testid={`button-reject-${period.id}`}\n                            >\n                              <XCircle className=\"mr-2 h-4 w-4\" />\n                              Reject\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Create Payment Period Dialog */}\n      <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n        <DialogContent data-testid=\"dialog-create-period\">\n          <DialogHeader>\n            <DialogTitle>Create Payment Period</DialogTitle>\n            <DialogDescription>\n              Create a new payment period for tracking worker earnings\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...createForm}>\n            <form onSubmit={createForm.handleSubmit((data) => createMutation.mutate(data))} className=\"space-y-4\">\n              <FormField\n                control={createForm.control}\n                name=\"projectId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Project</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-project\">\n                          <SelectValue placeholder=\"Select project\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {projects?.map(project => (\n                          <SelectItem key={project.id} value={project.id}>\n                            {project.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"startDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Start Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-start-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"endDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>End Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-end-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"bg-muted p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">\n                  <strong>Note:</strong> The total amount will be automatically calculated from work logs in this date range.\n                </p>\n              </div>\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-create\">\n                  {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Create Period\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Period Details Dialog */}\n      <Dialog open={detailsDialogOpen} onOpenChange={setDetailsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] flex flex-col\" data-testid=\"dialog-period-details\">\n          <DialogHeader>\n            <DialogTitle>Payment Period Details</DialogTitle>\n            <DialogDescription>\n              {selectedPeriod && (\n                <>\n                  {getProjectName(selectedPeriod.projectId)} | {format(parseISO(selectedPeriod.startDate), \"MMM d, yyyy\")} - {format(parseISO(selectedPeriod.endDate), \"MMM d, yyyy\")}\n                </>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex-1 overflow-y-auto\">\n            {selectedPeriod && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Status</p>\n                    <Badge className={statusColors[selectedPeriod.status]}>\n                      {statusLabels[selectedPeriod.status]}\n                    </Badge>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                    <p className=\"text-2xl font-bold\">\n                      R {entries ? entries.reduce((sum, entry) => sum + parseFloat(entry.totalEarnings), 0).toFixed(2) : \"0.00\"}\n                    </p>\n                  </div>\n                </div>\n\n                {entries && entries.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Payment Entries</h3>\n                    <div className=\"border rounded-md\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Labourer</TableHead>\n                            <TableHead>Days Worked</TableHead>\n                            <TableHead className=\"text-right\">Open (m)</TableHead>\n                            <TableHead className=\"text-right\">Close (m)</TableHead>\n                            <TableHead className=\"text-right\">Total (m)</TableHead>\n                            <TableHead className=\"text-right\">Earnings</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {entries.map(entry => (\n                            <TableRow key={entry.id}>\n                              <TableCell>{entry.labourerId}</TableCell>\n                              <TableCell>{entry.daysWorked}</TableCell>\n                              <TableCell className=\"text-right font-mono\">{parseFloat(entry.openMeters || \"0\").toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right font-mono\">{parseFloat(entry.closeMeters || \"0\").toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right font-mono\">{parseFloat(entry.totalMeters).toFixed(2)}</TableCell>\n                              <TableCell className=\"text-right font-mono\">\n                                R {parseFloat(entry.totalEarnings).toFixed(2)}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n            <Button \n              variant=\"default\"\n              onClick={async () => {\n                if (!selectedPeriod) return;\n                try {\n                  const response = await fetch(`/api/payment-periods/${selectedPeriod.id}/payment-file`);\n                  if (!response.ok) {\n                    const error = await response.json();\n                    toast({\n                      title: \"Error generating payment file\",\n                      description: error.message || \"Failed to generate payment file\",\n                      variant: \"destructive\",\n                    });\n                    return;\n                  }\n                  // Get filename from Content-Disposition header\n                  const contentDisposition = response.headers.get('Content-Disposition');\n                  const filenameMatch = contentDisposition?.match(/filename=\"(.+)\"/);\n                  const filename = filenameMatch ? filenameMatch[1] : 'payment_file.csv';\n                  \n                  // Download the file\n                  const blob = await response.blob();\n                  const url = window.URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = filename;\n                  document.body.appendChild(a);\n                  a.click();\n                  window.URL.revokeObjectURL(url);\n                  document.body.removeChild(a);\n                  \n                  toast({\n                    title: \"Payment file downloaded\",\n                    description: `Successfully generated ${filename}`,\n                  });\n                } catch (error: any) {\n                  toast({\n                    title: \"Download failed\",\n                    description: error.message || \"Failed to download payment file\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n              data-testid=\"button-download-payment-file\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download Payment File\n            </Button>\n            <Button variant=\"outline\" onClick={() => setDetailsDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":22552},"client/src/pages/roles.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Users, Briefcase, ClipboardList, UserCog, User, Check } from \"lucide-react\";\n\nconst roles = [\n  {\n    name: \"Super Admin\",\n    value: \"super_admin\",\n    icon: Shield,\n    color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n    description: \"Full system access with all permissions\",\n    permissions: [\n      \"Manage all users and assign roles\",\n      \"Create, edit, and delete projects\",\n      \"Assign project managers and supervisors\",\n      \"Manage employee types and pay rates\",\n      \"Create and edit work logs\",\n      \"Manage payment periods and approve payments\",\n      \"Review and approve correction requests\",\n      \"Access all reports and data\"\n    ],\n    notes: \"Reserved for kholofelo@mooya.co.za. Highest level of access.\"\n  },\n  {\n    name: \"Admin\",\n    value: \"admin\",\n    icon: Users,\n    color: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\",\n    description: \"Full operational access to manage the system\",\n    permissions: [\n      \"Manage users and assign roles (except Super Admin)\",\n      \"Create, edit, and delete projects\",\n      \"Assign project managers and supervisors\",\n      \"Manage employee types and pay rates\",\n      \"Create and edit work logs\",\n      \"Manage payment periods and approve payments\",\n      \"Review and approve correction requests\",\n      \"Access all reports and data\"\n    ],\n    restrictions: [\n      \"Cannot assign Super Admin role to users\"\n    ],\n    notes: \"Default role for @xnext.co.za emails. Has full access except for Super Admin role assignment.\"\n  },\n  {\n    name: \"Project Manager\",\n    value: \"project_manager\",\n    icon: Briefcase,\n    color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n    description: \"Manages projects with controlled editing permissions\",\n    permissions: [\n      \"Create new projects\",\n      \"View all projects they manage\",\n      \"Update project status only (cannot edit other fields)\",\n      \"Assign supervisors to projects\",\n      \"Onboard and manage labourers\",\n      \"Manage pay rates\",\n      \"Create work logs (today only)\",\n      \"Edit their own work logs\",\n      \"Create and manage payment periods\",\n      \"Approve payment periods\",\n      \"View all reports\",\n      \"Review and approve correction requests\"\n    ],\n    restrictions: [\n      \"Cannot edit project details after creation (name, location, budget)\",\n      \"Cannot assign project managers\"\n    ],\n    notes: \"Focused on operational oversight with controlled permissions. Note: Daily work logging UI may not be visible in navigation but the capability exists.\"\n  },\n  {\n    name: \"Supervisor\",\n    value: \"supervisor\",\n    icon: ClipboardList,\n    color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n    description: \"Field-focused role for daily work tracking\",\n    permissions: [\n      \"View assigned projects only\",\n      \"Create work logs for today\",\n      \"Onboard labourers (register new workers)\",\n      \"Submit correction requests for historical data\"\n    ],\n    restrictions: [\n      \"Cannot create or edit projects\",\n      \"Cannot manage payment periods\",\n      \"Cannot access all projects\",\n      \"Cannot edit past work logs (must submit correction request)\"\n    ],\n    notes: \"Default role for @mooya.co.za and @mooyawireless.co.za emails. Designed for mobile field use.\"\n  },\n  {\n    name: \"Project Admin\",\n    value: \"project_admin\",\n    icon: UserCog,\n    color: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n    description: \"Team management focused on labourer onboarding\",\n    permissions: [\n      \"Onboard labourers (register new workers)\",\n      \"View assigned projects\",\n      \"Create work logs for today\"\n    ],\n    restrictions: [\n      \"Cannot create or edit projects\",\n      \"Cannot manage payment periods\",\n      \"Limited to team management tasks\"\n    ],\n    notes: \"Similar to supervisor but focused on team administration.\"\n  },\n  {\n    name: \"Labourer\",\n    value: \"labourer\",\n    icon: User,\n    color: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\",\n    description: \"Limited access for workers in the field\",\n    permissions: [\n      \"View their assigned project only\",\n      \"Create work logs for today only\"\n    ],\n    restrictions: [\n      \"Cannot view other projects\",\n      \"Cannot edit past work logs\",\n      \"Cannot submit correction requests\",\n      \"Cannot manage any system data\"\n    ],\n    notes: \"Primarily a data entity. Most labourers don't have user accounts.\"\n  }\n];\n\nexport default function RolesPage() {\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\" data-testid=\"page-roles\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"heading-roles\">System Roles & Permissions</h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-roles-description\">\n          Mooya EMPCare uses role-based access control (RBAC) to manage permissions. \n          Below is a complete overview of each role and what they can do in the system.\n        </p>\n      </div>\n\n      <div className=\"mb-6 p-4 bg-muted rounded-lg\">\n        <h2 className=\"font-semibold mb-2\">Role Assignment Rules</h2>\n        <ul className=\"space-y-1 text-sm text-muted-foreground\">\n          <li><strong>kholofelo@mooya.co.za</strong> → Always assigned Super Admin (cannot be changed)</li>\n          <li><strong>@xnext.co.za emails</strong> → Default to Admin role</li>\n          <li><strong>@mooya.co.za and @mooyawireless.co.za emails</strong> → Default to Supervisor role</li>\n          <li><strong>OIDC role claims</strong> → Override default assignments (useful for testing)</li>\n        </ul>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-1 lg:grid-cols-2\">\n        {roles.map((role) => {\n          const Icon = role.icon;\n          return (\n            <Card key={role.value} className=\"flex flex-col\" data-testid={`card-role-${role.value}`}>\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-start justify-between gap-2 mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`p-2 rounded-lg ${role.color}`}>\n                      <Icon className=\"h-5 w-5\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-xl\" data-testid={`text-role-name-${role.value}`}>\n                        {role.name}\n                      </CardTitle>\n                      <Badge variant=\"outline\" className=\"mt-1 font-mono text-xs\" data-testid={`badge-role-value-${role.value}`}>\n                        {role.value}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription data-testid={`text-role-description-${role.value}`}>\n                  {role.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"flex-1 space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-sm mb-2 text-green-700 dark:text-green-400\">\n                    ✓ Permissions\n                  </h3>\n                  <ul className=\"space-y-1.5\">\n                    {role.permissions.map((permission, index) => (\n                      <li \n                        key={index} \n                        className=\"text-sm flex items-start gap-2\"\n                        data-testid={`text-permission-${role.value}-${index}`}\n                      >\n                        <Check className=\"h-4 w-4 text-green-600 dark:text-green-400 mt-0.5 flex-shrink-0\" />\n                        <span>{permission}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                {role.restrictions && (\n                  <div>\n                    <h3 className=\"font-semibold text-sm mb-2 text-red-700 dark:text-red-400\">\n                      ✗ Restrictions\n                    </h3>\n                    <ul className=\"space-y-1.5\">\n                      {role.restrictions.map((restriction, index) => (\n                        <li \n                          key={index} \n                          className=\"text-sm text-muted-foreground flex items-start gap-2\"\n                          data-testid={`text-restriction-${role.value}-${index}`}\n                        >\n                          <span className=\"text-red-600 dark:text-red-400\">✗</span>\n                          <span>{restriction}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                {role.notes && (\n                  <div className=\"pt-2 border-t\">\n                    <p className=\"text-xs text-muted-foreground italic\" data-testid={`text-notes-${role.value}`}>\n                      {role.notes}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"mt-8 p-4 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg\">\n        <h2 className=\"font-semibold mb-2 text-blue-900 dark:text-blue-100\">\n          Security Features\n        </h2>\n        <ul className=\"space-y-1 text-sm text-blue-800 dark:text-blue-200\">\n          <li><strong>Defense-in-depth:</strong> Permissions enforced at both frontend (UI visibility) and backend (API validation)</li>\n          <li><strong>Domain restrictions:</strong> Only @mooya.co.za, @mooyawireless.co.za, and @xnext.co.za emails can access the system</li>\n          <li><strong>Audit trails:</strong> All corrections tracked through formal review process</li>\n          <li><strong>Today-only work logs:</strong> Supervisors can only create work logs for today (historical edits require correction requests)</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10069},"client/src/components/CorrectionRequestDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, AlertCircle } from \"lucide-react\";\nimport { z } from \"zod\";\nimport type { User } from \"@shared/schema\";\n\n// Field definitions for each entity type\nconst ENTITY_FIELDS: Record<string, { label: string; value: string }[]> = {\n  work_log: [\n    { label: \"Open Trenching Meters\", value: \"openTrenchingMeters\" },\n    { label: \"Close Trenching Meters\", value: \"closeTrenchingMeters\" },\n    { label: \"Work Date\", value: \"workDate\" },\n  ],\n  labourer: [\n    { label: \"First Name\", value: \"firstName\" },\n    { label: \"Surname\", value: \"surname\" },\n    { label: \"Contact Number\", value: \"contactNumber\" },\n    { label: \"Email\", value: \"email\" },\n    { label: \"Physical Address\", value: \"physicalAddress\" },\n    { label: \"Bank Name\", value: \"bankName\" },\n    { label: \"Account Number\", value: \"accountNumber\" },\n    { label: \"Branch Code\", value: \"branchCode\" },\n  ],\n  project: [\n    { label: \"Project Name\", value: \"name\" },\n    { label: \"Location\", value: \"location\" },\n    { label: \"Budget\", value: \"budget\" },\n  ],\n  payment_period: [\n    { label: \"Start Date\", value: \"startDate\" },\n    { label: \"End Date\", value: \"endDate\" },\n    { label: \"Status\", value: \"status\" },\n  ],\n};\n\nconst correctionRequestFormSchema = z.object({\n  fieldName: z.string().min(1, \"Please select a field\"),\n  oldValue: z.string(),\n  newValue: z.string().min(1, \"Please enter the new value\"),\n  reason: z.string().min(10, \"Please provide a detailed reason (at least 10 characters)\"),\n});\n\ntype CorrectionRequestFormData = z.infer<typeof correctionRequestFormSchema>;\n\ninterface CorrectionRequestDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  entityType: \"work_log\" | \"labourer\" | \"project\" | \"payment_period\";\n  entityId: string;\n  entityData: Record<string, any>;\n  user: User;\n  entityDisplayName?: string;\n}\n\nexport default function CorrectionRequestDialog({\n  open,\n  onOpenChange,\n  entityType,\n  entityId,\n  entityData,\n  user,\n  entityDisplayName,\n}: CorrectionRequestDialogProps) {\n  const { toast } = useToast();\n  const [selectedField, setSelectedField] = useState<string>(\"\");\n\n  const form = useForm<CorrectionRequestFormData>({\n    resolver: zodResolver(correctionRequestFormSchema),\n    defaultValues: {\n      fieldName: \"\",\n      oldValue: \"\",\n      newValue: \"\",\n      reason: \"\",\n    },\n  });\n\n  // Get the current value when field is selected\n  const handleFieldChange = (fieldName: string) => {\n    setSelectedField(fieldName);\n    const currentValue = entityData[fieldName];\n    const displayValue = currentValue !== null && currentValue !== undefined \n      ? String(currentValue) \n      : \"\";\n    form.setValue(\"fieldName\", fieldName);\n    form.setValue(\"oldValue\", displayValue);\n    form.setValue(\"newValue\", \"\");\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CorrectionRequestFormData) => {\n      return apiRequest(\"POST\", \"/api/correction-requests\", {\n        entityType,\n        entityId,\n        fieldName: data.fieldName,\n        oldValue: data.oldValue,\n        newValue: data.newValue,\n        reason: data.reason,\n        requestedBy: user.id,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/correction-requests\"] });\n      toast({\n        title: \"Correction request submitted\",\n        description: \"Your request will be reviewed by an administrator\",\n      });\n      form.reset();\n      setSelectedField(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit correction request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CorrectionRequestFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const availableFields = ENTITY_FIELDS[entityType] || [];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-request-correction\">\n        <DialogHeader>\n          <DialogTitle>Request Data Correction</DialogTitle>\n          <DialogDescription>\n            {entityDisplayName \n              ? `Submit a request to correct data for ${entityDisplayName}`\n              : \"Submit a request to correct this data\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"rounded-md bg-muted p-3 mb-4\">\n          <div className=\"flex gap-2\">\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n            <p className=\"text-sm text-muted-foreground\">\n              Historical data cannot be edited directly. Your correction request will be reviewed and approved by an administrator.\n            </p>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"fieldName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Field to Correct</FormLabel>\n                  <Select \n                    onValueChange={handleFieldChange} \n                    value={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-correction-field\">\n                        <SelectValue placeholder=\"Select the field to correct\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {availableFields.map((fieldOption) => (\n                        <SelectItem key={fieldOption.value} value={fieldOption.value}>\n                          {fieldOption.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {selectedField && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"oldValue\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Current Value</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          disabled \n                          className=\"bg-muted\"\n                          data-testid=\"input-correction-old-value\"\n                        />\n                      </FormControl>\n                      <FormDescription>This is the current value in the system</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"newValue\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>New Value</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Enter the correct value\"\n                          data-testid=\"input-correction-new-value\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"reason\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Reason for Correction</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Explain why this correction is needed\"\n                          rows={3}\n                          data-testid=\"input-correction-reason\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Provide a clear explanation to help reviewers approve your request\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => {\n                  form.reset();\n                  setSelectedField(\"\");\n                  onOpenChange(false);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createMutation.isPending || !selectedField}\n                data-testid=\"button-submit-correction\"\n              >\n                {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Submit Request\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9870},"client/src/pages/labourer-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, User, Calendar, DollarSign, Briefcase, CheckCircle, Clock, XCircle } from \"lucide-react\";\nimport type { User as UserType, Labourer } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface LabourerDashboardProps {\n  user?: UserType | null;\n}\n\nexport default function LabourerDashboard({ user }: LabourerDashboardProps) {\n  const { data: profile, isLoading: profileLoading, error: profileError } = useQuery<Labourer>({\n    queryKey: [\"/api/my-labourer-profile\"],\n  });\n\n  const { data: workLogs = [], isLoading: logsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/my-work-logs\"],\n  });\n\n  const { data: payments = [], isLoading: paymentsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/my-payments\"],\n  });\n\n  const { data: currentPeriod, isLoading: currentPeriodLoading } = useQuery<any>({\n    queryKey: [\"/api/my-current-period\"],\n  });\n\n  if (profileLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        <p className=\"ml-2 text-sm text-muted-foreground\">Loading profile...</p>\n      </div>\n    );\n  }\n\n  if (profileError) {\n    return (\n      <div className=\"space-y-4\">\n        <Card>\n          <CardContent className=\"p-6 space-y-4\">\n            <p className=\"text-destructive font-medium\">Error loading profile</p>\n            <p className=\"text-sm text-muted-foreground\">{(profileError as Error).message}</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Please try logging in again or contact your supervisor for assistance.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className=\"space-y-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"text-muted-foreground\">Profile not found. Please contact your supervisor.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const totalEarnings = workLogs.reduce((sum: number, log: any) => sum + (Number(log.totalEarnings) || 0), 0);\n  const totalOpenMeters = workLogs.reduce((sum: number, log: any) => sum + (Number(log.openTrenchingMeters) || 0), 0);\n  const totalCloseMeters = workLogs.reduce((sum: number, log: any) => sum + (Number(log.closeTrenchingMeters) || 0), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-dashboard-title\">My Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          View your work history and payment information\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </div>\n            <div>\n              <CardTitle data-testid=\"text-profile-name\">\n                {profile.firstName} {profile.surname}\n              </CardTitle>\n              <CardDescription>ID: {profile.idNumber}</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Contact Number</div>\n              <div className=\"font-medium\" data-testid=\"text-contact-number\">{profile.contactNumber}</div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Email</div>\n              <div className=\"font-medium\" data-testid=\"text-email\">{profile.email || \"Not provided\"}</div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Date of Birth</div>\n              <div className=\"font-medium\">{profile.dateOfBirth ? format(new Date(profile.dateOfBirth), \"MMM d, yyyy\") : \"Not provided\"}</div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Bank Details</div>\n              <div className=\"font-medium\">{profile.bankName} - {profile.accountNumber}</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Current Period Earnings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-current-period-earnings\">\n              R{currentPeriod?.currentPeriodEarnings?.toFixed(2) || \"0.00\"}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              Total: R{totalEarnings.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              Days Worked This Period\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-days-worked-period\">\n              {currentPeriod?.daysWorkedThisPeriod || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              Total: {workLogs.length} days\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Next Payment Date\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-next-payment-date\">\n              {currentPeriod?.nextPaymentDate ? format(new Date(currentPeriod.nextPaymentDate), \"MMM d\") : \"TBD\"}\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {currentPeriod?.nextPaymentDate ? format(new Date(currentPeriod.nextPaymentDate), \"yyyy\") : \"No active period\"}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Total Meters This Period\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-meters-period\">\n              {currentPeriod?.totalMetersThisPeriod?.toFixed(1) || \"0.0\"} m\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              All-time: {(totalOpenMeters + totalCloseMeters).toFixed(1)} m\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"work-logs\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"work-logs\" data-testid=\"tab-work-logs\">\n            Work History ({workLogs.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">\n            Payment Status ({payments.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"work-logs\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Work History</CardTitle>\n              <CardDescription>All your recorded work activities</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {logsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                </div>\n              ) : workLogs.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No work logs recorded yet\n                </p>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Date</TableHead>\n                      <TableHead className=\"text-right\">Open Trenching (m)</TableHead>\n                      <TableHead className=\"text-right\">Close Trenching (m)</TableHead>\n                      <TableHead className=\"text-right\">Total Earnings</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {workLogs.map((log: any) => (\n                      <TableRow key={log.id} data-testid={`row-work-log-${log.id}`}>\n                        <TableCell>\n                          {format(new Date(log.workDate), \"MMM d, yyyy\")}\n                        </TableCell>\n                        <TableCell className=\"text-right font-mono\">\n                          {Number(log.openTrenchingMeters).toFixed(1)}\n                        </TableCell>\n                        <TableCell className=\"text-right font-mono\">\n                          {Number(log.closeTrenchingMeters).toFixed(1)}\n                        </TableCell>\n                        <TableCell className=\"text-right font-mono text-green-600 dark:text-green-400\">\n                          R{Number(log.totalEarnings).toFixed(2)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Status</CardTitle>\n              <CardDescription>Track your payment periods and status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {paymentsLoading ? (\n                <div className=\"flex items-center justify-center h-32\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                </div>\n              ) : payments.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  No payment records available yet\n                </p>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Period</TableHead>\n                      <TableHead>Project</TableHead>\n                      <TableHead className=\"text-right\">Open Meters</TableHead>\n                      <TableHead className=\"text-right\">Close Meters</TableHead>\n                      <TableHead className=\"text-right\">Amount</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {payments.map((payment: any) => (\n                      <TableRow key={payment.entry.id} data-testid={`row-payment-${payment.entry.id}`}>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {format(new Date(payment.period.startDate), \"MMM d\")} - {format(new Date(payment.period.endDate), \"MMM d, yyyy\")}\n                          </div>\n                        </TableCell>\n                        <TableCell>{payment.project.name}</TableCell>\n                        <TableCell className=\"text-right font-mono\">\n                          {Number(payment.entry.openMeters).toFixed(1)}\n                        </TableCell>\n                        <TableCell className=\"text-right font-mono\">\n                          {Number(payment.entry.closeMeters).toFixed(1)}\n                        </TableCell>\n                        <TableCell className=\"text-right font-mono font-semibold text-green-600 dark:text-green-400\">\n                          R{Number(payment.entry.amount).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              payment.period.status === \"approved\" ? \"default\" : \n                              payment.period.status === \"pending\" ? \"secondary\" : \n                              \"outline\"\n                            }\n                            className=\"gap-1\"\n                            data-testid={`badge-payment-status-${payment.entry.id}`}\n                          >\n                            {payment.period.status === \"approved\" && <CheckCircle className=\"h-3 w-3\" />}\n                            {payment.period.status === \"pending\" && <Clock className=\"h-3 w-3\" />}\n                            {payment.period.status === \"rejected\" && <XCircle className=\"h-3 w-3\" />}\n                            {payment.period.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":13777},"server/seedData.ts":{"content":"import { db } from \"./db\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\n\n// South African Names\nconst saFirstNames = [\n  \"Thabo\", \"Sipho\", \"Lerato\", \"Nomsa\", \"Kagiso\", \"Zanele\", \"Mandla\", \"Precious\",\n  \"Bongani\", \"Thandiwe\", \"Sello\", \"Refilwe\", \"Nhlanhla\", \"Palesa\", \"Lungile\", \"Ntombi\",\n  \"Mpho\", \"Katlego\", \"Tebogo\", \"Dineo\", \"Themba\", \"Lindiwe\", \"Sibusiso\", \"Nokuthula\",\n  \"Jabu\", \"Nandi\", \"Dumisani\", \"Zinhle\", \"Mthunzi\", \"Ayanda\", \"Thandeka\", \"Sabelo\",\n  \"Bongiwe\", \"Siyabonga\", \"Nomvula\", \"Bheki\", \"Thulani\", \"Zodwa\", \"Vusi\", \"Nomalanga\"\n];\n\nconst saLastNames = [\n  \"Nkosi\", \"Dlamini\", \"Mokoena\", \"Khumalo\", \"Zulu\", \"Molefe\", \"Mthembu\", \"Sithole\",\n  \"Ndlovu\", \"Mahlangu\", \"Buthelezi\", \"Ntuli\", \"Shabalala\", \"Ngcobo\", \"Mkhize\", \"Radebe\",\n  \"Cebekhulu\", \"Zwane\", \"Tshabalala\", \"Cele\", \"Mazibuko\", \"Zungu\", \"Khoza\", \"Hadebe\",\n  \"Nxumalo\", \"Biyela\", \"Gumede\", \"Naidoo\", \"Pillay\", \"Reddy\", \"Moodley\", \"Govender\",\n  \"Chetty\", \"Naicker\", \"Padayachee\", \"Singh\", \"Van der Merwe\", \"Botha\", \"De Villiers\", \"Fourie\"\n];\n\n// Foreign Names (Zimbabwe, Mozambique, Lesotho)\nconst foreignNames = [\n  { first: \"Tendai\", last: \"Moyo\", country: \"Zimbabwe\" },\n  { first: \"Farai\", last: \"Ncube\", country: \"Zimbabwe\" },\n  { first: \"Rumbidzai\", last: \"Sibanda\", country: \"Zimbabwe\" },\n  { first: \"Anesu\", last: \"Chirwa\", country: \"Zimbabwe\" },\n  { first: \"Carlos\", last: \"Machel\", country: \"Mozambique\" },\n  { first: \"Amélia\", last: \"Santos\", country: \"Mozambique\" },\n  { first: \"João\", last: \"Fernandes\", country: \"Mozambique\" },\n  { first: \"Isabel\", last: \"Dos Santos\", country: \"Mozambique\" },\n  { first: \"Thabo\", last: \"Molapo\", country: \"Lesotho\" },\n  { first: \"Masechaba\", last: \"Khethisa\", country: \"Lesotho\" },\n  { first: \"Tšepo\", last: \"Moloi\", country: \"Lesotho\" },\n  { first: \"Lineo\", last: \"Motaung\", country: \"Lesotho\" },\n];\n\n// Generate valid RSA ID number (format: YYMMDD GSSS CAZ)\nfunction generateRSAID(birthYear: number, birthMonth: number, birthDay: number, gender: \"M\" | \"F\"): string {\n  const yy = birthYear.toString().slice(-2).padStart(2, \"0\");\n  const mm = birthMonth.toString().padStart(2, \"0\");\n  const dd = birthDay.toString().padStart(2, \"0\");\n  const genderCode = gender === \"M\" ? Math.floor(Math.random() * 5000 + 5000) : Math.floor(Math.random() * 5000);\n  const citizenship = \"0\"; // SA citizen\n  const checkDigit = Math.floor(Math.random() * 10);\n  return `${yy}${mm}${dd}${genderCode.toString().padStart(4, \"0\")}${citizenship}8${checkDigit}`;\n}\n\n// Generate passport number\nfunction generatePassport(country: string): string {\n  const prefixes: Record<string, string> = {\n    \"Zimbabwe\": \"AN\",\n    \"Mozambique\": \"MP\",\n    \"Lesotho\": \"LS\",\n  };\n  const prefix = prefixes[country] || \"XX\";\n  const number = Math.floor(Math.random() * 900000 + 100000);\n  return `${prefix}${number}`;\n}\n\n// Generate DOB from RSA ID\nfunction getdobFromID(year: number, month: number, day: number): string {\n  const fullYear = year < 50 ? 2000 + year : 1900 + year;\n  const mm = month.toString().padStart(2, \"0\");\n  const dd = day.toString().padStart(2, \"0\");\n  return `${fullYear}-${mm}-${dd}`;\n}\n\n// South African Banks with Universal Branch Codes (matching frontend)\nconst SA_BANKS = [\n  { name: \"Absa Bank\", universalBranchCode: \"632005\" },\n  { name: \"Capitec Bank\", universalBranchCode: \"470010\" },\n  { name: \"First National Bank (FNB)\", universalBranchCode: \"250655\" },\n  { name: \"Nedbank\", universalBranchCode: \"198765\" },\n  { name: \"Standard Bank\", universalBranchCode: \"051001\" },\n  { name: \"African Bank\", universalBranchCode: \"430000\" },\n  { name: \"TymeBank\", universalBranchCode: \"678910\" },\n] as const;\n\n// Date helpers\nfunction getDateString(date: Date): string {\n  return date.toISOString().split('T')[0];\n}\n\nfunction addDays(date: Date, days: number): Date {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nasync function seedData() {\n  console.log(\"Starting seed data generation...\");\n\n  // ============= 1. EMPLOYEE TYPES =============\n  console.log(\"1. Creating employee types...\");\n  \n  const employeeTypeData = [\n    { name: \"Trainee\", description: \"Entry-level trainee\" },\n    { name: \"General Worker\", description: \"General construction worker\" },\n    { name: \"Semi-Skilled\", description: \"Semi-skilled technician\" },\n    { name: \"Skilled\", description: \"Skilled technician\" },\n    { name: \"Supervisor\", description: \"Team supervisor\" },\n  ];\n\n  const createdEmployeeTypes: any[] = [];\n  const existingTypes = await storage.getEmployeeTypes();\n  \n  for (const et of employeeTypeData) {\n    const existing = existingTypes.find(e => e.name === et.name);\n    if (existing) {\n      createdEmployeeTypes.push(existing);\n    } else {\n      const created = await storage.createEmployeeType(et);\n      createdEmployeeTypes.push(created);\n    }\n  }\n\n  // ============= 2. STAFF USERS =============\n  console.log(\"2. Creating staff users...\");\n\n  const staffUsers = [\n    {\n      email: \"james.vanderwalt@mooya.co.za\",\n      firstName: \"James\",\n      lastName: \"van der Walt\",\n      role: \"admin\" as const,\n      oidcSub: \"mock_sub_james\",\n    },\n    {\n      email: \"sarah.nkosi@mooya.co.za\",\n      firstName: \"Sarah\",\n      lastName: \"Nkosi\",\n      role: \"project_manager\" as const,\n      oidcSub: \"mock_sub_sarah\",\n    },\n    {\n      email: \"michael.botha@mooya.co.za\",\n      firstName: \"Michael\",\n      lastName: \"Botha\",\n      role: \"project_manager\" as const,\n      oidcSub: \"mock_sub_michael\",\n    },\n    {\n      email: \"lindiwe.dlamini@mooya.co.za\",\n      firstName: \"Lindiwe\",\n      lastName: \"Dlamini\",\n      role: \"supervisor\" as const,\n      oidcSub: \"mock_sub_lindiwe\",\n    },\n    {\n      email: \"thabo.molefe@xnext.co.za\",\n      firstName: \"Thabo\",\n      lastName: \"Molefe\",\n      role: \"supervisor\" as const,\n      oidcSub: \"mock_sub_thabo\",\n    },\n    {\n      email: \"priya.naidoo@mooyawireless.co.za\",\n      firstName: \"Priya\",\n      lastName: \"Naidoo\",\n      role: \"supervisor\" as const,\n      oidcSub: \"mock_sub_priya\",\n    },\n    {\n      email: \"johan.fourie@mooya.co.za\",\n      firstName: \"Johan\",\n      lastName: \"Fourie\",\n      role: \"supervisor\" as const,\n      oidcSub: \"mock_sub_johan\",\n    },\n  ];\n\n  const createdStaff: any[] = [];\n  for (const staff of staffUsers) {\n    const existing = await storage.getUserByEmail(staff.email);\n    if (existing) {\n      createdStaff.push(existing);\n    } else {\n      const created = await storage.upsertUser(staff);\n      createdStaff.push(created);\n    }\n  }\n\n  const [admin, pm1, pm2, sup1, sup2, sup3, sup4] = createdStaff;\n  console.log(`Created/found ${createdStaff.length} staff users`);\n\n  // ============= 3. PROJECTS =============\n  console.log(\"3. Creating projects...\");\n\n  const projectsData = [\n    {\n      name: \"Sandton CBD Fibre Rollout\",\n      location: \"Sandton, Johannesburg\",\n      description: \"High-density fibre deployment in Sandton business district covering 15km of trenching\",\n      startDate: new Date(\"2025-08-01\"),\n      endDate: new Date(\"2025-10-31\"),\n      status: \"active\" as const,\n      budget: \"2500000\",\n      paymentPeriod: \"fortnightly\" as const,\n      createdBy: admin.id,\n      supervisorIds: [sup1.id, sup2.id],\n    },\n    {\n      name: \"Soweto Residential Deployment\",\n      location: \"Soweto, Johannesburg\",\n      description: \"Residential fibre to the home deployment across multiple suburbs\",\n      startDate: new Date(\"2025-08-01\"),\n      endDate: new Date(\"2025-10-31\"),\n      status: \"active\" as const,\n      budget: \"1800000\",\n      paymentPeriod: \"monthly\" as const,\n      createdBy: admin.id,\n      supervisorIds: [sup3.id],\n    },\n    {\n      name: \"Pretoria East Network Expansion\",\n      location: \"Pretoria East\",\n      description: \"Network expansion in Pretoria East suburbs including Menlyn and Waterkloof\",\n      startDate: new Date(\"2025-08-01\"),\n      endDate: new Date(\"2025-10-31\"),\n      status: \"active\" as const,\n      budget: \"2100000\",\n      paymentPeriod: \"fortnightly\" as const,\n      createdBy: admin.id,\n      supervisorIds: [sup4.id],\n    },\n    {\n      name: \"Durban North Coast Deployment\",\n      location: \"Umhlanga, Durban\",\n      description: \"Coastal fibre deployment from Umhlanga to Ballito\",\n      startDate: new Date(\"2025-08-01\"),\n      endDate: new Date(\"2025-10-31\"),\n      status: \"active\" as const,\n      budget: \"1950000\",\n      paymentPeriod: \"monthly\" as const,\n      createdBy: admin.id,\n      supervisorIds: [sup2.id],\n    },\n  ];\n\n  const createdProjects: any[] = [];\n  for (const proj of projectsData) {\n    const { supervisorIds, ...projectData } = proj;\n    const created = await storage.createProject(projectData);\n    createdProjects.push({ ...created, supervisorIds });\n\n    // Assign supervisors\n    for (const supId of supervisorIds) {\n      await storage.assignProjectSupervisor(created.id, supId);\n    }\n\n    // Create pay rates for this project\n    const basePayRates: Record<string, number> = {\n      \"Trainee\": 1.80,\n      \"General Worker\": 2.20,\n      \"Semi-Skilled\": 2.80,\n      \"Skilled\": 3.50,\n      \"Supervisor\": 4.50,\n    };\n\n    for (const empType of createdEmployeeTypes) {\n      // Create open trenching rate\n      await storage.createPayRate({\n        projectId: created.id,\n        employeeTypeId: empType.id,\n        category: \"open_trenching\",\n        amount: basePayRates[empType.name]?.toString() || \"2.00\",\n        unit: \"per_meter\",\n        effectiveDate: \"2025-08-01\",\n        createdBy: admin.id,\n      });\n\n      // Create close trenching rate (slightly lower)\n      await storage.createPayRate({\n        projectId: created.id,\n        employeeTypeId: empType.id,\n        category: \"close_trenching\",\n        amount: (basePayRates[empType.name] * 0.9)?.toString() || \"1.80\",\n        unit: \"per_meter\",\n        effectiveDate: \"2025-08-01\",\n        createdBy: admin.id,\n      });\n    }\n  }\n\n  console.log(`Created ${createdProjects.length} projects`);\n\n  // ============= 4. LABOURERS =============\n  console.log(\"4. Creating labourers...\");\n\n  const createdLabourers: any[] = [];\n  const employeeTypeIds = createdEmployeeTypes.map(et => et.id);\n\n  // Create 40 SA labourers\n  for (let i = 0; i < 40; i++) {\n    const firstName = saFirstNames[Math.floor(Math.random() * saFirstNames.length)];\n    const surname = saLastNames[Math.floor(Math.random() * saLastNames.length)];\n    const gender = Math.random() > 0.5 ? \"M\" : \"F\";\n    \n    // Random birth date between 1980-2003 (ages 22-45)\n    const birthYear = 80 + Math.floor(Math.random() * 24); // 80-103\n    const birthMonth = 1 + Math.floor(Math.random() * 12);\n    const birthDay = 1 + Math.floor(Math.random() * 28);\n    \n    const idNumber = generateRSAID(1900 + birthYear, birthMonth, birthDay, gender);\n    const hashedId = await bcrypt.hash(idNumber, 10);\n    const dateOfBirth = getdobFromID(birthYear, birthMonth, birthDay);\n    \n    // Random employee type (weighted toward General Worker)\n    const employeeTypeIndex = Math.random() < 0.5 ? 1 : Math.floor(Math.random() * (employeeTypeIds.length - 1));\n    \n    const labourer = await storage.createLabourer({\n      firstName,\n      surname,\n      idNumber,\n      passwordHash: hashedId,\n      dateOfBirth,\n      contactNumber: `+27${Math.floor(Math.random() * 900000000 + 600000000)}`,\n      email: `${firstName.toLowerCase()}.${surname.toLowerCase()}${i}@worker.mooya.co.za`,\n      employeeTypeId: employeeTypeIds[employeeTypeIndex],\n      ...(() => {\n        const randomBank = SA_BANKS[Math.floor(Math.random() * SA_BANKS.length)];\n        return {\n          bankName: randomBank.name,\n          branchCode: randomBank.universalBranchCode,\n        };\n      })(),\n      accountNumber: Math.floor(Math.random() * 9000000000 + 1000000000).toString(),\n      accountType: Math.random() > 0.5 ? \"savings\" as const : \"cheque\" as const,\n      createdBy: admin.id,\n    });\n    \n    createdLabourers.push(labourer);\n  }\n\n  // Create 12 foreign nationals\n  for (let i = 0; i < 12; i++) {\n    const foreignWorker = foreignNames[i];\n    const passportNumber = generatePassport(foreignWorker.country);\n    const hashedPassport = await bcrypt.hash(passportNumber, 10);\n    \n    // Foreign workers tend to be in lower tiers\n    const employeeTypeIndex = Math.random() < 0.7 ? 0 : 1;\n    \n    const labourer = await storage.createLabourer({\n      firstName: foreignWorker.first,\n      surname: foreignWorker.last,\n      idNumber: passportNumber,\n      passwordHash: hashedPassport,\n      dateOfBirth: \"1990-01-01\", // Placeholder\n      contactNumber: `+27${Math.floor(Math.random() * 900000000 + 600000000)}`,\n      email: `${foreignWorker.first.toLowerCase()}.${foreignWorker.last.toLowerCase()}@worker.mooya.co.za`,\n      employeeTypeId: employeeTypeIds[employeeTypeIndex],\n      ...(() => {\n        const randomBank = SA_BANKS[Math.floor(Math.random() * SA_BANKS.length)];\n        return {\n          bankName: randomBank.name,\n          branchCode: randomBank.universalBranchCode,\n        };\n      })(),\n      accountNumber: Math.floor(Math.random() * 9000000000 + 1000000000).toString(),\n      accountType: \"savings\" as const,\n      createdBy: admin.id,\n    });\n    \n    createdLabourers.push(labourer);\n  }\n\n  console.log(`Created ${createdLabourers.length} labourers (40 SA + 12 foreign nationals)`);\n\n  // ============= 5. ASSIGN LABOURERS TO PROJECTS =============\n  console.log(\"5. Assigning labourers to projects...\");\n\n  // Distribute labourers across projects\n  const labourersPerProject = Math.floor(createdLabourers.length / createdProjects.length);\n  for (let i = 0; i < createdProjects.length; i++) {\n    const project = createdProjects[i];\n    const start = i * labourersPerProject;\n    const end = i === createdProjects.length - 1 ? createdLabourers.length : start + labourersPerProject;\n    \n    const labourerIds = [];\n    for (let j = start; j < end; j++) {\n      labourerIds.push(createdLabourers[j].id);\n    }\n    \n    await storage.assignLabourersToProject(labourerIds, project.id);\n  }\n\n  console.log(\"Labourers assigned to projects\");\n\n  // ============= 6. WORK LOGS =============\n  console.log(\"6. Generating work logs for past 3 months...\");\n\n  const startDate = new Date(\"2025-08-01\");\n  const endDate = new Date(\"2025-10-30\");\n  \n  let totalWorkLogs = 0;\n  \n  for (const project of createdProjects) {\n    console.log(`  Generating logs for ${project.name}...`);\n    \n    // Get labourers for this project\n    const projectLabourers = await storage.getLabourers(project.id);\n    \n    // Get supervisor for this project\n    const supervisorId = project.supervisorIds[0];\n    \n    // Get pay rates for this project\n    const payRates = await storage.getPayRates(project.id);\n    const rateMap = new Map<string, { open: number, close: number }>();\n    \n    for (const rate of payRates) {\n      if (!rateMap.has(rate.employeeTypeId)) {\n        rateMap.set(rate.employeeTypeId, { open: 0, close: 0 });\n      }\n      const amount = parseFloat(rate.amount);\n      if (rate.category === \"open_trenching\") {\n        rateMap.get(rate.employeeTypeId)!.open = amount;\n      } else if (rate.category === \"close_trenching\") {\n        rateMap.get(rate.employeeTypeId)!.close = amount;\n      }\n    }\n    \n    // Generate work logs for each day\n    let currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      const dateStr = getDateString(currentDate);\n      const dayOfWeek = currentDate.getDay();\n      \n      // Weekend - reduced workforce\n      const workProbability = (dayOfWeek === 0 || dayOfWeek === 6) ? 0.3 : 0.85;\n      \n      for (const labourer of projectLabourers) {\n        // Random chance of working this day\n        if (Math.random() < workProbability) {\n          const openMeters = Math.floor(Math.random() * 40 + 20); // 20-60 meters\n          const closeMeters = Math.floor(Math.random() * 35 + 15); // 15-50 meters\n          \n          // Get pay rates\n          const rates = rateMap.get(labourer.employeeTypeId);\n          const openRate = rates?.open || 2.00;\n          const closeRate = rates?.close || 1.80;\n          \n          const totalEarnings = ((openMeters * openRate) + (closeMeters * closeRate)).toFixed(2);\n          \n          await storage.createWorkLog({\n            labourerId: labourer.id,\n            projectId: project.id,\n            workDate: dateStr,\n            openTrenchingMeters: openMeters.toString(),\n            closeTrenchingMeters: closeMeters.toString(),\n            totalEarnings,\n            recordedBy: supervisorId,\n          });\n          \n          totalWorkLogs++;\n        }\n      }\n      \n      currentDate = addDays(currentDate, 1);\n    }\n  }\n\n  console.log(`Created ${totalWorkLogs} work log entries`);\n\n  // ============= 7. PAYMENT PERIODS =============\n  console.log(\"7. Creating payment periods...\");\n\n  for (const project of createdProjects) {\n    console.log(`  Creating periods for ${project.name}...`);\n    \n    if (project.paymentPeriod === \"fortnightly\") {\n      // Create 6 fortnightly periods\n      const periods = [\n        { start: \"2025-08-01\", end: \"2025-08-14\", status: \"paid\" },\n        { start: \"2025-08-15\", end: \"2025-08-31\", status: \"paid\" },\n        { start: \"2025-09-01\", end: \"2025-09-14\", status: \"paid\" },\n        { start: \"2025-09-15\", end: \"2025-09-30\", status: \"approved\" },\n        { start: \"2025-10-01\", end: \"2025-10-14\", status: \"submitted\" },\n        { start: \"2025-10-15\", end: \"2025-10-30\", status: \"open\" },\n      ];\n      \n      for (const period of periods) {\n        const createdPeriod = await storage.createPaymentPeriod({\n          projectId: project.id,\n          startDate: period.start,\n          endDate: period.end,\n          status: period.status as any,\n          submittedBy: period.status !== \"open\" ? project.supervisorIds[0] : null,\n          submittedAt: period.status !== \"open\" ? new Date(`${period.end}T18:00:00Z`) : null,\n          approvedBy: (period.status === \"approved\" || period.status === \"paid\") ? admin.id : null,\n          approvedAt: (period.status === \"approved\" || period.status === \"paid\") ? new Date(`${period.end}T20:00:00Z`) : null,\n        });\n        \n        // Get work logs for this period\n        const workLogsInPeriod = await storage.getWorkLogsByDateRange(project.id, period.start, period.end);\n        \n        // Group by labourer\n        const labourerWorkLogs = new Map<string, any[]>();\n        for (const wl of workLogsInPeriod) {\n          if (!labourerWorkLogs.has(wl.labourerId)) {\n            labourerWorkLogs.set(wl.labourerId, []);\n          }\n          labourerWorkLogs.get(wl.labourerId)!.push(wl);\n        }\n        \n        // Create entries\n        for (const [labourerId, logs] of Array.from(labourerWorkLogs.entries())) {\n          const openMeters = logs.reduce((sum, l) => sum + parseFloat(l.openTrenchingMeters || \"0\"), 0);\n          const closeMeters = logs.reduce((sum, l) => sum + parseFloat(l.closeTrenchingMeters || \"0\"), 0);\n          const totalMeters = openMeters + closeMeters;\n          const totalAmount = logs.reduce((sum, l) => sum + parseFloat(l.totalEarnings || \"0\"), 0);\n          \n          await storage.createPaymentPeriodEntry({\n            periodId: createdPeriod.id,\n            labourerId,\n            openMeters: openMeters.toFixed(2),\n            closeMeters: closeMeters.toFixed(2),\n            totalMeters: totalMeters.toFixed(2),\n            totalEarnings: totalAmount.toFixed(2),\n            daysWorked: logs.length,\n          });\n        }\n      }\n    } else {\n      // Monthly periods\n      const periods = [\n        { start: \"2025-08-01\", end: \"2025-08-31\", status: \"paid\" },\n        { start: \"2025-09-01\", end: \"2025-09-30\", status: \"approved\" },\n        { start: \"2025-10-01\", end: \"2025-10-31\", status: \"open\" },\n      ];\n      \n      for (const period of periods) {\n        const createdPeriod = await storage.createPaymentPeriod({\n          projectId: project.id,\n          startDate: period.start,\n          endDate: period.end,\n          status: period.status as any,\n          submittedBy: period.status !== \"open\" ? project.supervisorIds[0] : null,\n          submittedAt: period.status !== \"open\" ? new Date(`${period.end}T18:00:00Z`) : null,\n          approvedBy: (period.status === \"approved\" || period.status === \"paid\") ? admin.id : null,\n          approvedAt: (period.status === \"approved\" || period.status === \"paid\") ? new Date(`${period.end}T20:00:00Z`) : null,\n        });\n        \n        // Get work logs for this period\n        const workLogsInPeriod = await storage.getWorkLogsByDateRange(project.id, period.start, period.end);\n        \n        // Group by labourer\n        const labourerWorkLogs = new Map<string, any[]>();\n        for (const wl of workLogsInPeriod) {\n          if (!labourerWorkLogs.has(wl.labourerId)) {\n            labourerWorkLogs.set(wl.labourerId, []);\n          }\n          labourerWorkLogs.get(wl.labourerId)!.push(wl);\n        }\n        \n        // Create entries\n        for (const [labourerId, logs] of Array.from(labourerWorkLogs.entries())) {\n          const openMeters = logs.reduce((sum, l) => sum + parseFloat(l.openTrenchingMeters || \"0\"), 0);\n          const closeMeters = logs.reduce((sum, l) => sum + parseFloat(l.closeTrenchingMeters || \"0\"), 0);\n          const totalMeters = openMeters + closeMeters;\n          const totalAmount = logs.reduce((sum, l) => sum + parseFloat(l.totalEarnings || \"0\"), 0);\n          \n          await storage.createPaymentPeriodEntry({\n            periodId: createdPeriod.id,\n            labourerId,\n            openMeters: openMeters.toFixed(2),\n            closeMeters: closeMeters.toFixed(2),\n            totalMeters: totalMeters.toFixed(2),\n            totalEarnings: totalAmount.toFixed(2),\n            daysWorked: logs.length,\n          });\n        }\n      }\n    }\n  }\n\n  // ============= 8. CORRECTION REQUESTS =============\n  console.log(\"8. Creating audit trail correction requests...\");\n\n  // Get a sample work log ID for reference\n  const sampleWorkLog = await db.query.workLogs.findFirst();\n  const sampleLabourer = createdLabourers[0];\n\n  const scenarios = [\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"openMeters\",\n      newValue: \"45\",\n      reason: \"Incorrect meter reading on 2025-08-15 - should be 45 open meters not 25\",\n      requestedBy: sup1.id,\n      status: \"approved\" as const,\n      approvedBy: admin.id,\n      approvedAt: new Date(\"2025-08-16T10:30:00Z\"),\n    },\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"workDate\",\n      newValue: \"2025-09-03\",\n      reason: \"Missed work entry for 2025-09-03 - worker was present but not logged\",\n      requestedBy: sup2.id,\n      status: \"pending\" as const,\n    },\n    {\n      entityType: \"labourer\",\n      entityId: sampleLabourer.id,\n      fieldName: \"employeeTypeId\",\n      newValue: employeeTypeIds[1],\n      reason: \"Employee type change - worker completed skills assessment, promote from Trainee to General Worker\",\n      requestedBy: sup3.id,\n      status: \"approved\" as const,\n      approvedBy: admin.id,\n      approvedAt: new Date(\"2025-09-20T14:00:00Z\"),\n    },\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"duplicate\",\n      newValue: \"remove\",\n      reason: \"Duplicate entry on 2025-08-22 - same work logged twice\",\n      requestedBy: sup4.id,\n      status: \"rejected\" as const,\n      approvedBy: admin.id,\n      approvedAt: new Date(\"2025-08-23T09:00:00Z\"),\n      reviewNotes: \"No evidence of duplicate entry in system logs\",\n    },\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"closeMeters\",\n      newValue: \"30\",\n      reason: \"Close meters incorrectly recorded as 60, should be 30 on 2025-09-12\",\n      requestedBy: sup1.id,\n      status: \"approved\" as const,\n      approvedBy: admin.id,\n      approvedAt: new Date(\"2025-09-13T11:15:00Z\"),\n    },\n    {\n      entityType: \"labourer\",\n      entityId: sampleLabourer.id,\n      fieldName: \"accountNumber\",\n      newValue: \"9876543210\",\n      reason: \"Banking details update - account number changed\",\n      requestedBy: sup2.id,\n      status: \"pending\" as const,\n    },\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"workDate\",\n      newValue: \"2025-10-05\",\n      reason: \"Wrong date entered - work done on 2025-10-05 was logged as 2025-10-06\",\n      requestedBy: sup3.id,\n      status: \"pending\" as const,\n    },\n    {\n      entityType: \"work_log\",\n      entityId: sampleWorkLog?.id || \"sample-id\",\n      fieldName: \"openMeters\",\n      newValue: \"40\",\n      reason: \"Open meters reading of 120 is unrealistic for single day - should be 40\",\n      requestedBy: sup4.id,\n      status: \"approved\" as const,\n      approvedBy: admin.id,\n      approvedAt: new Date(\"2025-10-10T16:45:00Z\"),\n    },\n  ];\n\n  for (const scenario of scenarios) {\n    await storage.createCorrectionRequest(scenario);\n  }\n\n  console.log(\"\\n✅ Seed data generation complete!\");\n  console.log(`   - ${createdEmployeeTypes.length} employee types`);\n  console.log(`   - ${createdStaff.length} staff users`);\n  console.log(`   - ${createdProjects.length} projects`);\n  console.log(`   - ${createdLabourers.length} labourers (40 SA, 12 foreign nationals)`);\n  console.log(`   - ${totalWorkLogs} work logs for 3 months (Aug-Oct 2025)`);\n  console.log(`   - Payment periods (fortnightly and monthly)`);\n  console.log(`   - ${scenarios.length} correction requests`);\n}\n\n// Run the seed function\nseedData()\n  .then(() => {\n    console.log(\"\\nSeed completed successfully!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"\\nError seeding data:\", error);\n    process.exit(1);\n  });\n","size_bytes":25784},"client/src/pages/labourer-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, User, Lock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function LabourerLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [identifier, setIdentifier] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response: any = await apiRequest(\"POST\", \"/api/labourer/login\", {\n        identifier: identifier.trim(),\n        password: password.trim(),\n      });\n\n      if (response.success) {\n        toast({\n          title: \"Login successful\",\n          description: `Welcome back, ${response.labourer.firstName}!`,\n        });\n        setLocation(\"/labourer-dashboard\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid phone/email or RSA ID/passport number\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-16 w-16 rounded-full bg-primary/10 flex items-center justify-center\">\n              <User className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl text-center\">Labourer Login</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your phone number or email and RSA ID/passport number\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"identifier\">Phone Number or Email</Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"identifier\"\n                  type=\"text\"\n                  placeholder=\"0821234567 or email@example.com\"\n                  value={identifier}\n                  onChange={(e) => setIdentifier(e.target.value)}\n                  required\n                  disabled={isLoading}\n                  className=\"pl-10\"\n                  data-testid=\"input-identifier\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Use your registered phone number or email address\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">RSA ID or Passport Number</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your ID or passport number\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  disabled={isLoading}\n                  className=\"pl-10\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Your RSA ID (13 digits) or passport number\n              </p>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                \"Sign In\"\n              )}\n            </Button>\n\n            <div className=\"text-center text-sm text-muted-foreground pt-4\">\n              <p>Need help accessing your account?</p>\n              <p className=\"mt-1\">Contact your supervisor or project manager</p>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4688}},"version":2}